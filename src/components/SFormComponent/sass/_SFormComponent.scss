@mixin s-form-component-group(
) {

	@include s-component('s-form') {

		// form group
		#{s-component-selector()}-group {
			// make form group flex
			display: flex !important;
			flex: 1 !important;

			input[type="submit"], button,
			#{s-component-selector()}-addon {
				flex:0;
			}

			// remove margin-top from input that are in a form-group
			> * {
				margin-top: 0 !important;
			}

			// make input flex
			> input:not([type="checkbox"]):not([type="radio"]):not([type="submit"]),
			> label {
				flex: 1 !important;
				margin-top: 0 !important;
			}
		}
	}
}

@mixin s-form-component-addon(
	$colors : null
) {
	@include s-form-component-addon-bare();
	@if $colors {
		@include s-form-component-addon-style($colors);
	}
}

@mixin s-form-component-addon-bare(
) {
	@include s-input-component-init();
	@include s-component('s-form') {

		// base
		#{s-component-selector()}-addon {
			@extend %s-input-component-field-bare;
			pointer-events: none;
			// set input styling
			@include s-input-component-field-size();

			@include s-vertical-rhythme {
				margin-bottom: 1rem;
			}
		}
	}
}

@mixin s-form-component-addon-style(
	$colors : default primary secondary
) {
	// parse properties
	@if $_sugar-test-arguments {
		// $colors : s-test-argument('s-formset','colors',map-keys(s-setting('colors')),$colors);
	}
	@include s-component('s-form') {

		@each $color in $colors {

			#{s-selector( #{s-component-selector()-addon}, null, $color )} {
				@include s-input-component-field-color($color);
			}
			#{s-selector( #{s-component-selector()-addon}, null, $color )} {
				background-color: s-color($color, -opacity .08);
				color : s-color($color, -darken 20%);
			}
		}
	}
}
