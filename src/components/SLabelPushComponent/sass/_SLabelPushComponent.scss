@mixin s-label-push-component(
	$colors : default primary secondary
) {
	@include s-label-push-component-bare();
	@include s-label-push-component-style(
		$colors : $colors
	);
}

@mixin s-label-push-component-bare(
) {
	@include s-input-component-init();
	@include s-component('s-label-push') {

		// push
		#{s-component-selector()} {
			position: relative;
			display: block;

			> input {
				@include s-transition(fast);
			}
			> span {
				display:inline-block;
				padding: s-lnf(padding-horizontal) s-lnf(padding-vertical);
				height: 1em + s-lnf(padding-horizontal) * 2;
				position:absolute;
				top:0; left:0;
				white-space: nowrap;
				pointer-events: none;
				text-overflow: ellipsis;
				overflow: hidden;
				color: s-color(text);
				@include s-translate(0,0);
				@include s-transition(default left, default transform, fast opacity);
			}
			> input[placeholder] ~ span,
			> input[value]:not([value=""]) ~ span,
			> input:focus ~ span {
				left:100%;
				@include s-translate(-100%,0);
			}
		}
	}
}

@mixin s-label-push-component-style(
	$colors : default primary secondary
) {
	// parse properties
	@if $_sugar-test-arguments {
		// $colors : s-test-argument('s-formset','colors',map-keys(s-setting('colors')),$colors);
	}
	@include s-component('s-label-push') {
		// generate each colors
		@each $color in $colors {

			// label styling
			#{s-component-selector(null, $color)} {
				> input[value]:not([value=""]) ~ span,
				> input:focus ~ span {
					color: s-color($color);
				}
			}
		}
	}
}
