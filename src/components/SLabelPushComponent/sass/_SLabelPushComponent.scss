@mixin s-label-push-component(
	$colors : null
) {
	@include s-label-push-component-bare(
	);
	@if $colors {
		@include s-label-push-component-style(
			$colors : $colors
		);
	}
}

@mixin s-label-push-component-bare(
) {
	@include s-input-component-init();
	@include s-component('s-label-push') {
		// push
		#{s-component-item()} {
			> input {
				@include s-transition(fast);
			}
			> span {
				display:inline-block;
				padding: s-lnf(padding-horizontal) s-lnf(padding-vertical);
				height: 1em + s-lnf(padding-horizontal) * 2;
				position:absolute;
				top:0; left:0;
				white-space: nowrap;
				pointer-events: none;
				text-overflow: ellipsis;
				overflow: hidden;
				@include s-translate(0,0);
				@include s-transition(default left, default transform, fast opacity);
			}
			> input[placeholder] ~ span,
			> input[value]:not([value=""]) ~ span,
			> input:focus ~ span {
				left:100%;
				@include s-translate(-100%,0);
			}
		}
	}
}

@mixin s-label-push-component-style(
	$colors : default primary secondary
) {
	// parse properties
	@if $_sugar-test-arguments {
		// $colors : s-test-argument('s-formset','colors',map-keys(sugar('settings.colors')),$colors);
	}
	@include s-component('s-label-push') {
		// generate each colors
		@each $color in $colors {

			// label styling
			#{s-selector((
				BEM : (
					'#{s-component-item()} > .input--#{$color}:not([type="checkbox"]):not([type="radio"])',
					'.color--#{$color} #{s-component-item()} > .input:not([type="checkbox"]):not([type="radio"])'
				),
				SMACCS : (
					'#{s-component-item()} > .input-#{$color}:not([type="checkbox"]):not([type="radio"])',
					'.color-#{$color} #{s-component-item()} > .input:not([type="checkbox"]):not([type="radio"])'
				)
			))} {
				& ~ span {
					color: s-color($color);
				}
			}
		}
	}
}
