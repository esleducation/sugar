@include s-component-setup((
	s-radiobox : ()
));

$_s-formset-radiobox-component-inited : false;
@mixin s-radiobox-component-init() {
	@if not $_s-formset-radiobox-component-inited {
		$_s-formset-radiobox-component-inited : true !global;
	}
}

@mixin s-radiobox-component(
	$colors : null,
	$animations : true,
	$componentName : 's-radiobox'
) {
	@include s-radiobox-component-bare(
		$componentName : $componentName
	);
	@if $colors {
		@include s-radiobox-component-style(
			$componentName : $componentName,
			$animations : $animations,
			$colors : $colors
		);
	}
}

@mixin s-radiobox-component-bare(
	$componentName : 's-radiobox'
) {

	// init form
	@include s-radiobox-component-init();

	// parse properties
	@if $_sugar-test-arguments {
		// $colors : s-test-argument('s-formset-radiobox-style','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	$context : 'formset';
	@if sugar('settings.components.#{$componentName}') {
		$context : $componentName;
	}
	@include s-component-context($componentName) {

		// base
		%#{$componentName}-checkbox-bare,
		input[#{$componentName}][type="checkbox"] {
			position: absolute;
			left : -999999px;

			& + .#{$componentName} {
				display: inline-block;
				position: relative;
				cursor: pointer;
				vertical-align: sub;

				&:before {
					content:'';
					display: block;
					position:absolute;
					top:50%; left:50%;
					@include s-translate(-50%,-50%);
					height:100%; width:100%;
					pointer-events:none;
				}
				&:after {
					content:'';
					display: block;
					position: absolute;
					top:50%; left:50%;
					width: 30%; height: 30%;
					@include s-translate(-50%, -50%);
					z-index:1;
				}
			}
		}
		input[#{$componentName}][type="radio"] {
			@extend %#{$componentName}-checkbox-bare;
			border-radius: 50% !important;

			& + .#{$componentName} {
				&,
				&:after,
				&:before {
					border-radius:50% !important;
				}
			}
		}

		#{s-selector((
			BEM : (
				'.label .label .#{$componentName}'
			),
			SMACCS : (
				'.label .label .#{$componentName}'
			)
		))} {
			margin-top:1rem;
		}

	}
}

@mixin s-radiobox-component-style(
	$colors : null,
	$animations : true,
	$componentName : 's-radiobox'
) {

	// init form
	@include s-radiobox-component-init();

	// parse properties
	@if $_sugar-test-arguments {
		// $colors : s-test-argument('s-formset-radiobox-style','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	$context : 'formset';
	@if sugar('settings.components.#{$componentName}') {
		$context : $componentName;
	}
	@include s-component-context($componentName) {

        // colors
        @if ($colors) {
			@each $color in $colors {

				#{s-selector((
					BEM : (
						'input[#{$componentName}].input--#{$color}',
						'input.#{$componentName}.input--#{$color}'
					),
					SMACCS : (
						'input[#{$componentName}].input-#{$color}',
						'input#{$componentName}.input-#{$color}'
					)
				))} {
					& + .#{$componentName} {
						&:before {
							background-color: s-color($color, -opacity .1);
							border:1px solid s-color($color, -opacity .1);
						}
					}

					& + .#{$componentName}:after {
						background-color : s-color($color, -opacity .3);
						background-color: white;
					}

					#{s-selector((
						BEM : (
							'&.input--hover',
							'&.input--active'
						),
						SMACCS : (
							'&.is-hover',
							'&.is-active'
						)
					))} {
						& + .#{$componentName} {
							&:after {
								background-color: s-color($color, -opacity .15);
								width:60%;
								height:60%;
							}
							&:before {
								width: 60%;
								height: 60%;
							}
						}
					}

					& + .#{$componentName}:hover {
						&:after {
							background-color: s-color($color, -opacity .15);
							@include s-depth(3, s-color($color, -opacity .3));
						}
						&:after,
						&:before {
							width:60% !important;
							height:60% !important;
						}
					}
					&:checked {
						& + .#{$componentName} {
							&:after {
								background-color: s-color($color);
								@include s-depth(3, s-color($color, -opacity .3));
							}
						}
					}
				}
			}
		}

		.input.#{$componentName},
		.input[#{$componentName}] {

			$br : s-lnf(border-radius);
			$fs : 1em * 1.3;
			& + .#{$componentName} {
				width: $fs;
				height: $fs;
				&:after {
					border-radius: $br / 100 * 30;
				}
				&:before {
					border-radius: $br;
				}
			}

			#{s-selector((
				BEM : (
					'&.input--hover',
					'&.input--active'
				),
				SMACCS : (
					'&.is-hover',
					'&.is-active'
				)
			))},
			&:hover {
				& + .#{$componentName} {
					&:before,
					&:after {
						border-radius: $br / 100 * 60
					}
				}
			}
			&:checked {
				& + .#{$componentName} {
					&:after {
						border-radius: $br / 100 * 60
					}
				}
			}
		}

		// animations
		@if ($animations) {
			input.#{$componentName}[type="checkbox"],
			input[#{$componentName}][type="checkbox"],
			input.#{$componentName}[type="radio"]
			input[#{$componentName}][type="radio"] {
				& + .#{$componentName} {
					&,
					&:before,
					&:after {
						@include s-transition(fast);
					}
				}
				&:checked + .#{$componentName}:after {
					width:40%; height:40%;
				}
			}
		}
	}
}
