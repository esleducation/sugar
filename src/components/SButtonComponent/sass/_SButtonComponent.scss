$_s-button-component-inited : false;
@mixin s-button-component-init() {
	@if not $_s-button-component-inited {
		$_s-button-component-inited : true !global;
		%s-button-component-bare {
			display: inline-block;
			border: none;
			cursor: pointer;
			outline-width:0;
			-webkit-appearance: none;
			line-height: 1;
			text-decoration: none;
			font-size:1em;
			user-select:none;

			> * {
				vertical-align: middle;
			}
		}
	}
}

@mixin s-button-component(
	$colors : null
) {
	@include s-button-component-bare();
	@if $colors {
		@include s-button-component-style($colors);
	}
}

@mixin s-button-component-bare(
) {
	// init dropdown
	@include s-button-component-init();
	@include s-component('s-button') {
		// base
		#{s-component-selector()} {
			@extend %s-button-component-bare;
			border-radius: s-lnf(border-radius);
			padding : s-lnf(padding-horizontal) s-lnf(padding-vertical);
			height: 1em + s-lnf(padding-horizontal) * 2;
		}
		button {
			line-height: 1 !important;
		}

		// block
		#{s-component-selector(null, 'block')} {
			display: block;
			width: 100%;
		}
	}
}

@mixin s-button-component-style(
	$colors : default primary secondary
) {
	// init dropdown
	@include s-button-component-init();
	@include s-component('s-button') {

		// parse properties
		@if $_sugar-test-arguments {
			// @TODO find a solution to check the colors properties
			// $colors : s-test-argument('s-button-component-style','colors',map-keys(s-setting('colors')),$colors);
		}


		// base
		#{s-component-selector()} {
			@extend %s-button-component-bare;
			@include s-transition(fast);
		}
		button {
			line-height: 1 !important;
		}

		// generate each colors
		@each $color in $colors {
			#{s-component-selector(null, $color, null, 'color')} {
				background-color: s-color($color);
				border: 1px solid s-color($color);
				@if lightness(s-color($color)) > 70 {
					color : s-color($color, -darken 30%);
				} @else {
					color : white;
				}

				&:active,
				&:hover,
				&.active,
				&#{s-component-selector('&', null, 'active')} {
					&:not(:disabled) {
						background-color : s-color($color, -darken 15%);
						border-color: s-color($color, -darken 15%);
					}
				}
				:checked + &:not(:disabled) {
					background-color : s-color($color, -darken 25%);
					border-color: s-color($color, -darken 25%);
				}

				// outline
				&#{s-component-selector('&', 'outline')} {
					color: s-color($color);

					&:active,
					&:hover,
					&.active,
					:checked + &,
					&#{s-component-selector('&', null, 'active')} {
						&:not(:disabled) {
							background-color: s-color($color);
							border-color: s-color($color);
							@if lightness(s-color($color)) > 70 {
								color : s-color($color, -darken 30%);
							} @else {
								color : white;
							}
						}
					}
				}
			}
		}
		// link button
		#{s-component-selector(null, 'link')} {
			background: transparent !important;
			color: s-color(link) !important;
			border: none !important;
		}
		// outline
		#{s-component-selector(null, 'outline')} {
			background-color: transparent;
		}
		// disabled
		#{s-component-selector()}[disabled],
		#{s-component-selector(null, null, 'disabled')} {
			opacity: 0.65;
			cursor: not-allowed !important;
		}

		// button group
		#{s-component-selector()}-group {
			@include s-clearfix();

			> input[type="checkbox"],
			> input[type="radio"] {
				display: none;
			}

			#{s-component-selector()} {
				float: left;

				&:not(:first-of-type):not(:last-of-type) {
					border-radius: 0;
				}
				&:first-of-type {
					border-top-right-radius:0;
					border-bottom-right-radius:0;
				}
				&:last-of-type {
					border-top-left-radius:0;
					border-bottom-left-radius:0;
				}
			}
		}
	}
}
