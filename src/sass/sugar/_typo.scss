//
// Helpers with typography
//
@mixin s-vertical-rhythme(
	$font-size : null,
	$font-family : sugar('settings.typo.font-family'),
	$line-height : null,
	$margin-top : 0,
	$margin-bottom : 0,
	$padding-top : 0,
	$padding-bottom : 0,
	$margin : null,
	$padding : null,
	$border-bottom : null,
	$border-top : null,
	$border-bottom-width : 0,
	$border-top-width : 0,
	$border : null,
	$cap-height : null,
	$scope-class : true,
	$calculate-height : false
) {

	@if sugar('settings.vertical-rhythme.enabled') {
		
		// get if need the no-vertical-rhythme or not
		$no-vertical-rhythme-class : sugar('settings.vertical-rhythme.no-vertical-rhythme-class');
		$no-vertical-rhythme-selector : ':not(.#{$no-vertical-rhythme-class})';
		@if not $no-vertical-rhythme-class {
			$no-vertical-rhythme-selector : '';
		}

		// prevent from adding 2 times the scope class
		@if str-index("#{&}", s-vertical-rhythme-scope-class()) {
			$scope-class : false;
		}

		$sc : sugar('settings.vertical-rhythme.scope-class');
		@if type-of($scope-class) == string {
			$sc : $scope-class;
		}

		// check if we have some arguments
		// mean that we want the vertical rhythme css properties
		// otherwise we just need to wrap content in vertical-align scope
		@if $font-size {

			// get the rhythme
			$rhythme-map : s-vertical-rhythme(
				$font-size : $font-size,
				$line-height : $line-height,
				$margin : $margin,
				$margin-top : $margin-top,
				$margin-bottom : $margin-bottom,
				$padding : $padding,
				$padding-top : $padding-top,
				$padding-bottom : $padding-bottom,
				$border-top-width : $border-top-width,
				$border-top : $border-top,
				$border-bottom-width : $border-bottom-width,
				$border-bottom : $border-bottom,
				$cap-height : $cap-height,
				$calculate-height : $calculate-height
			);
			// remove margin-top cause it's done by top and margin-bottom compensation
			@if map-get($rhythme-map, top) {
				$rhythme-map : map-remove($rhythme-map, margin-top);
			}

			// set values
			$rhythme-map : map-remove($rhythme-map, cap-height);
			$rhythme-map : map-remove($rhythme-map, scope-class);
			$rhythme-map : map-remove($rhythme-map, calculate-height);
			@if $scope-class {
				.#{$sc} &#{$no-vertical-rhythme-selector} {
					@each $prop, $value in $rhythme-map {
						#{$prop} : $value;
					}
					@content;
				}
			} @else {
				&#{$no-vertical-rhythme-selector} {
					@each $prop, $value in $rhythme-map {
						#{$prop} : $value;
					}
					@content;
				}
			}
		} @else {
			@if $scope-class {
				.#{$sc} &#{$no-vertical-rhythme-selector} {
					@content;
				}
			} @else {
				&#{$no-vertical-rhythme-selector} {
					@content;
				}
			}
		}
	}
}

@function s-vertical-rhythme-scope-class() {
	@return unquote(".#{sugar('settings.vertical-rhythme.scope-class')}");
}

@function s-margin(
	$margin
) {
	@if type-of($margin) == number {
		@return (
			top : s-rem($margin),
			right : s-rem($margin),
			bottom : s-rem($margin),
			left : s-rem($margin)
		);
	} @else if type-of($margin) == list and length($margin) == 2 {
		@return (
			top : s-rem(nth($margin,1)),
			bottom : s-rem(nth($margin,1)),
			left : s-rem(nth($margin,2)),
			right : s-rem(nth($margin,2))
		);
	} @else if type-of($margin) == list and length($margin) == 4 {
		@return (
			top : s-rem(nth($margin,1)),
			right : s-rem(nth($margin,2)),
			bottom : s-rem(nth($margin,3)),
			left : s-rem(nth($margin,4))
		);
	}
}

@function s-border(
	$border
) {
	$border : s-parse-properties($border, (
		width : number,
		color : color,
		style : none hidden dotted dashed solid double groove ridge inset outset initial inherit
	));
	@return $border;
}

@mixin s-font(
	$family : null,
	$color : null,
	$size : null,
	$style : null,
	$variant : null,
	$weight : null,
	$decoration : null,
	$align : null,
	$transform : null,
	$stretch : null,
	$white-space : null,
	$height : null,
	$spacing : null,
	$indent : null,
	$break : null,
	$wrap : null
) {
	$font-map : s-font(
		$family : $family,
		$color : $color,
		$size : $size,
		$style : $style,
		$variant : $variant,
		$weight : $weight,
		$decoration : $decoration,
		$align : $align,
		$transform : $transform,
		$stretch : $stretch,
		$white-space : $white-space,
		$height : $height,
		$spacing : $spacing,
		$indent : $indent,
		$break : $break,
		$wrap : $wrap
	);

	// set values
	@each $prop, $value in $font-map {
		@if $prop != cap-height {
			#{$prop} : $value;
		}
	}
}

@function s-font-family(
	$name
) {
	@return map-get(s-font($name), font-family);
}

//
// s-font
//
@function s-font(
	$family : null,
	$color : null,
	$size : null,
	$style : null,
	$variant : null,
	$weight : null,
	$decoration : null,
	$align : null,
	$transform : null,
	$stretch : null,
	$white-space : null,
	$height : null,
	$spacing : null,
	$indent : null,
	$break : null,
	$wrap : null
) {
	@if $_sugar-test-arguments {
		$family : s-test-argument('s-font','family',map-keys(sugar('settings.fonts')),$family);
		$color : s-test-truncate('s-font','color',color,$color);
		$size : s-test-argument('s-font','size',number,$size);
		$style : s-test-argument('s-font','style',(normal,italic,oblique,initial,inherit),$style);
		$variant : s-test-argument('s-font','variant',(normal,small-caps,initial,inherit),$variant);
		$weight : s-test-argument('s-font','weight','string|number',$weight);
		$decoration : s-test-argument('s-font','decoration',(none,underline,overline,line-through,initial,inherit),$decoration);
		$align : s-test-argument('s-font','align',(left,right,center,justify,initial,inherit),$align);
		$transform : s-test-argument('s-font','transform',(none,capitalize,uppercase,lowercase,initial,inherit),$transform);
		$stretch : s-test-argument('s-font','stretch',(ultra-condensed,extra-condensed,condensed,semi-condensed,normal,semi-expanded,expanded,extra-expanded,ultra-expanded,initial,inherit),$stretch);
		$white-space : s-test-argument('s-font','white-space',(normal,nowrap,pre,pre-line,pre-wrap,initial,inherit),$white-space);
		$height : s-test-argument('s-font','height',number,$height);
		$spacing : s-test-argument('s-font','spacing',number,$spacing);
		$indent : s-test-argument('s-font','indent',number,$indent);
		$break : s-test-argument('s-font','break',(normal,break-all,keep-all,initial,inherit),$break);
		$wrap : s-test-argument('s-font','wrap',(normal,break-word,initial,inherit),$wrap);
	}
	
	// get the font object
	$fonts : sugar('settings.fonts');
	$f : map-get($fonts, sugar('settings.typo.font-family'));
	@if type-of($f) == string {
		$f : map-get($fonts, $f);
	}
	$cap-height : map-get-or($f, cap-height, 0);
	
	// if a font family is passed
	@if $family {
		@if map-get($fonts, $family) {
			$f : map-get($fonts, $family);
			@if type-of($f) == string {
				$f : map-get($fonts, $f);
			}
			$cap-height : map-get-or($f, cap-height, 0);
			$family : map-get-or($f, font-family, $family);
			@if not $style {
				$style : map-get($f, font-style);
			}
			@if not $weight {
				$weight : map-get($f, font-weight);
			}
		}			
	}
	
	// init object to return
	$return : (
		cap-height : $cap-height
	);

	// set the font
	@if $family {
		$return : map-set($return, font-family, $family);
	}

	// color
	@if $color {
		$return : map-set($return, color, $color);
	}

	// font-size
	@if $size {
		@if unitless($size) or unit($size) == px {
			$size : s-rem($size);
		}
		$return : map-set($return, font-size, $size);
	}

	@if $height {
		$return : map-set($return, line-height, s-rem($height));
	}

	// font-style
	@if $style {
		$return : map-set($return, font-style, $style);
	}
	// font-variant
	@if $variant {
		$return : map-set($return, font-variant, $variant);
	}
	// font-weight
	@if $weight {
		$return : map-set($return, font-weight, $weight);
	}
	// text-decoration
	@if $decoration {
		$return : map-set($return, text-decoration, $decoration);
	}
	// text-align
	@if $align {
		$return : map-set($return, text-align, $align);
	}
	// text-transform
	@if $transform {
		$return : map-set($return, text-transform, $transform);
	}
	// font-stretch
	@if $stretch {
		$return : map-set($return, font-stretch, $stretch);
	}
	// white-space
	@if $white-space {
		$return : map-set($return, white-space, $white-space);
	}
	// letter spacing
	@if $spacing {
		$return : map-set($return, letter-spacing, $spacing);
	}
	// text-indent
	@if $indent {
		$return : map-set($return, text-indent, $indent);
	}
	// word break
	@if $break {
		$return : map-set($return, word-break, $break);
	}
	// word wrap
	@if $wrap {
		$return : map-set($return, word-wrap, $wrap);
	}

	// return the map
	@return $return;
}

//
// Font face
//
@mixin s-font-face(
	$font-family,
	$src,
	$extensions : woff2,
	$font-weight : normal,
	$font-style : normal
) {
	@if $_sugar-test-arguments {
		$font-family : s-test-argument('s-font-face','font-family',string,$font-family);
		$src : s-test-argument('s-font-face','src',url,$src);
		$extensions : s-test-argument('s-font-face','extensions','string|list',$extensions);
		$font-weight : s-test-argument('s-font-face','font-weight',(normal,bold,bolder,lighter,number,initial,inherit),$font-weight);
		$font-style : s-test-argument('s-font-face','font-style',(normal,italic,oblique,initial,inherit),$font-style);
	}

	// get font format from settings
	$font-format : sugar('settings.typo.font-format');

	// process url
	$split : _split($src, '.');
	$e : last-nth($split);
	$split : list-pop($split);
	$path : list-implode($split, '.');

	// add extention in list
	@if index($extensions, $e) == null {
		$extensions : append($extensions, $e);
	}

	// loop on each extensions
	$srcs : ();
	@each $e in $extensions {
		// get the format
		$format : map-get($font-format, $e);
		$srcs : append($srcs, url('#{$path}.#{$e}') format('#{$format}'), comma);
	}

	// declare font
	@font-face {
		font-family: "#{$font-family}";
		src : $srcs;
		@if $font-style {
			font-style : $font-style;
		}
		@if $font-weight {
			font-weight : $font-weight;
		}
	}
}

//
// Get rhythme max-width
//
@function s-rhythme-width(
	$letters-count : sugar('settings.typo.line-letters-count')
) {
	@if unitless($letters-count) {
		@return (
			display: block,
			max-width : $letters-count + ex
		);
	} @else {
		@return (
			display: block,
			max-width : $letters-count
		);
	}
}

//
// Set rhythme max-width
//
@mixin s-rhythme-width(
	$letters-count : sugar('settings.typo.line-letters-count')
) {
	@each $prop, $value in s-rhythme-width($letters-count) {
		#{$prop} : $value;
	}
}

//
// Get rhythme
//
@function s-vertical-rhythme(
	$font-size : sugar('settings.typo.font-size'),
	$font-family : sugar('settings.typo.font-family'),
	$line-height : null,
	$margin-top : 0,
	$margin-bottom : 0,
	$padding-top : 0,
	$padding-bottom : 0,
	$margin : null,
	$padding : null,
	$border-bottom : null,
	$border-top : null,
	$border-bottom-width : 0,
	$border-top-width : 0,
	$border : null,
	$cap-height : null,
	$scope-class : true,
	$calculate-height : false
) {
	@if $_sugar-test-arguments {
		$font-size : s-test-argument('s-vertical-rhythme','font-size',number,$font-size);
		$font-family : s-test-argument('s-vertical-rhythme','font-family',map-keys(sugar('settings.fonts')),$font-family);
		$line-height : s-test-argument('s-vertical-rhythme','line-height',number,$line-height);
		$margin-top : s-test-argument('s-vertical-rhythme','margin-top',number,$margin-top);
		$margin-bottom : s-test-argument('s-vertical-rhythme','margin-bottom',number,$margin-bottom);
		$padding-top : s-test-argument('s-vertical-rhythme','padding-top',number,$padding-top);
		$padding-bottom : s-test-argument('s-vertical-rhythme','padding-bottom',number,$padding-bottom);
		$margin : s-test-argument('s-vertical-rhythme','margin','number|list',$margin);
		$padding : s-test-argument('s-vertical-rhythme','padding','number|list',$padding);
		$border-bottom : s-test-argument('s-vertical-rhythme','border-bottom','number|list',$border-bottom);
		$border-top : s-test-argument('s-vertical-rhythme','border-top','number|list',$border-top);
		$border-bottom-width : s-test-argument('s-vertical-rhythme','border-bottom-width',number,$border-bottom-width);
		$border-top-width : s-test-argument('s-vertical-rhythme','border-top-width',number,$border-top-width);
		$border : s-test-argument('s-vertical-rhythme','border','number|list',$border);
		$cap-height : s-test-argument('s-vertical-rhythme','cap-height',number,$cap-height);
		$scope-class : s-test-argument('s-vertical-rhythme','scope-class',boolean,$scope-class);
		$calculate-height : s-test-argument('s-vertical-rhythme','calculate-height',(true,false,min-height,max-height,height),$calculate-height);		
	}

	$root-font-size : sugar('settings.typo.font-size');

	// get the font object
	$fonts : sugar('settings.fonts');
	@if not $cap-height {
		$f : sugar('settings.fonts.default');
		@if type-of($f) == string {
			$f : map-get($fonts, $f);
		}
		$cap-height : map-get-or($f, cap-height, 0);
	}
	
	// if a font family is passed
	@if $font-family {
		@if map-get($fonts, $font-family) {
			$f : map-get($fonts, $font-family);
			@if type-of($f) == string {
				$f : map-get($fonts, $f);
			}
			$cap-height : map-get-or($f, cap-height, $cap-height);
			$font-family : map-get-or($f, font-family, $font-family);
		}			
	}

	// check some values
	@if $border-bottom-width {
		$border-bottom : $border-bottom-width;
	} @else if $border-bottom and type-of($border-bottom) != number {
		$map : s-border($border-bottom);
		$border-bottom : map-get-or($map, width, $border-bottom);
	} @else if $border and type-of($border) != number {
		$map : s-border($border);
		$border-bottom : map-get-or($map, width, $border);
	} @else if $border and type-of($border) == number {
		$border-bottom : $border;
	}
	@if $border-top-width {
		$border-top : $border-top-width;
	} @else if $border-top and type-of($border-top) != number {
		$map : s-border($border-top);
		$border-top : map-get-or($map, width, $border-top);
	} @else if $border and type-of($border) != number {
		$map : s-border($border);
		$border-top : map-get-or($map, width, $border);
	} @else if $border and type-of($border) == number {
		$border-top : $border;
	}
	@if $margin {
		$map : s-margin($margin);
		$margin-top : map-get-or($map, top, $margin-top);
		$margin-bottom : map-get-or($map, bottom, $margin-bottom);
	}
	@if $padding {
		$map : s-margin($padding);
		$padding-top : map-get-or($map, top, $padding-top);
		$padding-bottom : map-get-or($map, bottom, $padding-bottom);
	}

	// protect
	@if not $font-size {
		@error("The function s-vertical-rhythme need a font-size...");
	}

	// calculate number of line height needed
	@if not $line-height and $font-size {
		$line-height : s-strip-units(ceil(s-rem(s-px($font-size))));
	}

	// process values
	$margin-top : round(s-rem($margin-top));
	$margin-bottom : round(s-rem($margin-bottom));
	$padding-top : s-rem($padding-top);
	$padding-bottom : s-rem($padding-bottom);
	$border-bottom : s-rem($border-bottom);
	$border-top : s-rem($border-top);
	$line-height : ceil(s-rem($line-height));

	// save targeted margin bottom
	$targeted-margin-bottom : $margin-bottom;
	$targeted-margin-top : $margin-top;

	// transform in rem if are pixels passed
	@if unit($font-size) != px {
		$font-size : s-px($font-size);
	}

	// manage cap height
	@if $cap-height == null {
		$cap-height : 0;
	}
	// manage font-size
	@if s-strip-units($font-size) <= 0 {
		$font-size : ceil($font-size + 0.1);
	}

	// protect
	@if type-of($font-size) == number {
		$rootsize: $root-font-size;
		$baseline-shift: ($font-size / 2 * (($line-height * $rootsize / $font-size) - $cap-height)) / $rootsize + 0.00001;
		$baseline-push: $margin-bottom - (($font-size / 2 * (($line-height * $rootsize / $font-size) - $cap-height)) / $rootsize + 0.00001);
	
		$baseline-push : $baseline-push % 1;
		$baseline-shift : $baseline-shift % 1;
		$decimal : $baseline-push % 1;

		// if we have a padding top, respect it
		// we add the shift to the margin bottom
		// to respect the vertical rhythme
		$respect-padding-top : false;
		@if $padding-top > 0rem {
			$margin-bottom : $margin-bottom + $baseline-shift;
			$respect-padding-top : true;
		} @else {
			$padding-top : $padding-top + $baseline-shift;
		}
		$margin-bottom : $margin-bottom + $baseline-push;



		$dec : $margin-bottom % 1;
		$diff : $margin-bottom - $targeted-margin-bottom;
		@if $diff > 1rem {
			$margin-bottom : $margin-bottom - 1;
		}
		@if $margin-bottom > $targeted-margin-bottom {
			@if $dec > 0.5rem {
				$margin-bottom : $margin-bottom - 1;
			}
		} @else if $margin-bottom < $targeted-margin-bottom {
			@if $dec < 0.5rem {
				$margin-bottom : $margin-bottom + 1;
			}
		}



		// handle borders
		@if $border-top > 0rem {
		 	$dec : $border-top % 1;

			// check where to cut the border
			// to have the best result
			@if $margin-top > $padding-top {
				@if $margin-top - $border-top >= 0rem {
					$margin-top : $margin-top - $border-top;
				} @else {
					$margin-top : $margin-top + (1 - $dec);
				}
			} @else {
				@if $padding-top - ($border-top / 2) >= 0rem and $padding-bottom - ($border-top / 2) >= 0rem {
					$padding-top : $padding-top - $border-top / 2;
					$padding-bottom : $padding-bottom - $border-top / 2;
				} @else if $padding-top - $border-top >= 0rem {
					$padding-top : $padding-top - $border-top;
				} @else {
					$padding-top : $padding-top + (1 - $dec);
				}
			}
		}
		@if $border-bottom > 0rem {
		 	$dec : $border-bottom % 1;

			// check where to cut the border
			// to have the best result
			@if $margin-bottom > $padding-bottom {
				@if $margin-bottom - $border-bottom >= 0rem {
					$margin-bottom : $margin-bottom - $border-bottom;
				} @else {
					$margin-bottom : $margin-bottom + (1 - $dec);
				}
			} @else {
				@if $padding-top - ($border-bottom / 2) >= 0rem and $padding-bottom - ($border-bottom / 2) >= 0rem {
					$padding-top : $padding-top - $border-bottom / 2;
					$padding-bottom : $padding-bottom - $border-bottom / 2;
				} @else if $padding-bottom - $border-bottom >= 0rem {
					$padding-bottom : $padding-bottom - $border-bottom;
				} @else {
					$padding-bottom : $padding-bottom + (1 - $dec);
				}
			}
		}

		$ret : (
			font-size : s-rem($font-size),
			line-height : s-rem($line-height)
		);

		@if $calculate-height != false {
			$height : $padding-top + $padding-bottom + $line-height;
			@if $calculate-height == true {
				$calculate-height : height;
			}
			$ret : map-set($ret, $calculate-height, $height);
			$ret : map-set($ret, line-height, $height);
			$dec : $height % 1;
			$padding-top : 0;
			$padding-bottom : 0;
			$margin-bottom : $margin-bottom - $dec;
		}

		$ret : map-set($ret, padding-top, $padding-top);
		$ret : map-set($ret, padding-bottom, $padding-bottom);
		$ret : map-set($ret, margin-bottom, $margin-bottom);
		@if $margin-top > 0rem {
			$ret : map-merge($ret, (
				position : relative,
				top : $margin-top,
				margin-bottom : $margin-bottom + $margin-top
			));
		}
		
		@return $ret;
		// }
	} @else {
		@warn "#{$font-size} is not a valid scale variable";
	}
	@return null;
}

//
// Show rhythme
//
@mixin s-show-rhythme(
	$color : #0ff
) {
	// overflow: hidden;
	position: relative;
	&:after {
		pointer-events: none;
		content:'';
		display: block;
		position: absolute;
		top:0; left:0;
		width:100%; height:100%;
		background-image: -webkit-linear-gradient(top,$color 0,rgba(255,255,255,0)1px);
		background-image: -moz-linear-gradient(top,$color 0,rgba(255,255,255,0)1px);
		background-image: -o-linear-gradient(top,$color 0,rgba(255,255,255,0)1px);
		background-image: linear-gradient(to bottom,$color 0,rgba(255,255,255,0)1px);
		background-repeat: repeat-y;
		background-size: 100% 1rem;
	}
}

//
// Columns
//
@mixin s-columns(
	$count : null,
	$gap : null,
	$fill : null,
	$width : null,
	$span : null,
	$rule : null,
	$rule-style : null,
	$rule-color : null,
	$rule-width : null
	
) {
	// get columns props
	$columns : s-columns(
		$count : $count,
		$gap : $gap,
		$fill : $fill,
		$width : $width,
		$span : $span,
		$rule : $rule,
		$rule-style : $rule-style,
		$rule-color : $rule-color,
		$rule-width : $rule-width
	);

	// set props
	@each $prop, $value in $columns {
		#{$prop} : $value;
	}

	// handle nested
	@include s-handle-nested(columns) {
		@content;
	}
}
@function s-columns(
	$count : null,
	$gap : null,
	$fill : null,
	$width : null,
	$span : null,
	$rule : null,
	$rule-style : null,
	$rule-color : null,
	$rule-width : null
) {
	@if $_sugar-test-arguments {
		$fill : s-test-argument('s-columns','fill',(balance,auto,initial,inherit),$fill);
		$rule-style : s-test-argument('s-columns','rule-style',(none,hidden,dotted,dashed,solid,double,groove,ridge,inset,outset,initial,inherit),$rule-style);
		$count : s-test-argument('s-columns','count',integer,$count);
		$gap : s-test-argument('s-columns','gap',number,$gap);
		$width : s-test-argument('s-columns','width',number,$width);
		$span : s-test-argument('s-columns','span',number,$span);
		$rule-color : s-test-argument('s-columns','rule-color',color,$rule-color);
		$rule-width : s-test-argument('s-columns','rule-width',number,$rule-width);
		$rule : s-test-argument('s-columns','rule',mixed,$rule);
	}

	$return : ();

	@if $count {
		$return : map-set($return, column-count, $count);
	}
	@if $width {
		$return : map-set($return, column-width, $width);
	}
	@if $rule {
		$return : map-set($return, column-rule, $rule);
	} @else {
		@if $rule-style {
			$return : map-set($return, column-rule-style, $rule-style);
		}
		@if $rule-color {
			$return : map-set($return, column-rule-color, $rule-color);
		}
		@if $rule-width {
			$return : map-set($return, column-rule-width, $rule-width);
		}
	}
	@if $gap {
		$return : map-set($return, column-gap, $gap);
	}
	@if $fill {
		$return : map-set($return, column-fill, $fill);
	}
	@if $span {
		$return : map-set($return, column-span, $span);
	}

	// return
	@return $return;
}

//
// Truncate
//
@mixin _s-text-truncate() {
	display: inline-block;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}
%s-text-truncate {
	@include _s-text-truncate();
}
@mixin s-text-truncate() {
	@include _s-text-truncate();
}

//
// Hide text
//
@mixin _s-text-hidden() {
	overflow:hidden;
    text-indent:-9000px;
    display:block;
}
%s-text-hidden {
	@include _s-text-hidden();
}
@mixin s-text-hidden() {
	@include _s-text-hidden();
}