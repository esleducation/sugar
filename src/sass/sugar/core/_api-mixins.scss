//
// Sugar mixin
//
// @mixin sugar(
// 	$what...
// ) {
// 	@if type-of(nth($what,1)) == map {
// 		// setup
// 		@include s-setup(nth($what,1));
// 	} @else if nth($what,1) == classes {
// 		@include s-classes();
// 	}
// }
@mixin s(
	$what...
) {
	@include sugar($what...);
}


//
// Setup
//
@mixin s-setup(
	$settings
) {
	$_sugar-settings : map-extend($_sugar-settings, $settings, true) !global;
}


//
// Component definition
//
$_sugar-previous-component : null;
$_sugar-current-component : null;
@mixin s-component-context(
	$name
) {
	// check if the component exist
	$comp : map-get($_sugar-settings, components);
	$comp : map-get($comp, $name);
	@if not $comp {
		@error("You cannot wrap the component #{$name} cause it does not exist in settings...");
	}
	// $_sugar-previous-component : $_sugar-current-component !global;
	$_sugar-current-component : $name !global;
	@content;
	$_sugar-current-component : null !global;
}


//
// Component setup
//
@mixin s-component-setup(
	$settings
) {
	// check if we have already some settings for this components
	$keys : map-keys($settings);
	@if length($keys) != 1 {
		@error("A components need to be setting up with a unique key map...");
	}
	$name : nth($keys,1);
	$settings : map-get($settings, $name);
	
	// get component
	$components : map-get($_sugar-settings, components);
	@if not $components {
		$components : ();
	}
	$current-settings : map-get($components, $name);
	@if $current-settings {
		$new-settings : map-extend($settings, $current-settings);
		$components : map-set($components, $name, $new-settings);
	} @else {
		$components : map-set($components, $name, $settings);
	}
	$_sugar-settings : map-set($_sugar-settings, components, $components) !global;
}


//
// Register helper class
//
@mixin s-register-class(
	$classname,
	$namespace
) {
	@if $_sugar-test-arguments {
		$classname : s-test-argument('s-register-class','classname',string,$classname);
		$namespace : s-test-argument('s-register-class','namespace',string,$namespace);
	}

	// register the class
	$split : _split($namespace, '.');
	$_sugar-classes : _set($_sugar-classes, $split, $classname) !global;
	%#{$classname} {
		@content;
	}
}


//
// Classes
//
$_sugar-classes-inited : false;
@mixin s-classes-init() {
	@if not $_sugar-classes-inited {
		$_sugar-classes-inited : true !global;

		$filters : sugar('settings.filters');
		@each $name, $filter in $filters {
			@include s-register-class(
				$classname : 'f-#{$name}',
				$namespace : 'sugar.filter.#{$name}'
			) {
				@include s-filter($filter);
			}
		}

		// transitions
		$transitions : sugar('settings.transitions.transitions');
		@each $name, $transition in $transitions {
			@include s-register-class(
				$classname : 't-#{$name}',
				$namespace : 'sugar.transition.#{$name}'
			) {
				@include s-transition($transition);
			}
		}

		$vertical-rhythme-scope : sugar('settings.vertical-rhythme.scope-class');
		$spaces : sugar('settings.sizes');
		@each $name, $space in $spaces {
			@include s-register-class(
				$classname : 'm-b-#{$name}',
				$namespace : 'sugar.margin.bottom.#{$name}'
			) {
				margin-bottom : s-space($name);
				.#{$vertical-rhythme-scope} &:not(.not-#{$vertical-rhythme-scope}),
				&.#{$vertical-rhythme-scope}:not(.not-#{$vertical-rhythme-scope}) {
					margin-bottom : round(s-space($name));
				}
			}
			@include s-register-class(
				$classname : 'm-t-#{$name}',
				$namespace : 'sugar.margin.top.#{$name}'
			) {
				margin-top : s-space($name);
				.#{$vertical-rhythme-scope} &:not(.not-#{$vertical-rhythme-scope}),
				&.#{$vertical-rhythme-scope}:not(.not-#{$vertical-rhythme-scope}) {
					margin-top : round(s-space($name));
				}
			}
			@include s-register-class(
				$classname : 'm-l-#{$name}',
				$namespace : 'sugar.margin.left.#{$name}'
			) {
				margin-left : s-space($name);
			}
			@include s-register-class(
				$classname : 'm-r-#{$name}',
				$namespace : 'sugar.margin.right.#{$name}'
			) {
				margin-right : s-space($name);
			}
			@include s-register-class(
				$classname : 'm-s-#{$name}',
				$namespace : 'sugar.margin.side.#{$name}'
			) {
				margin-left : s-space($name);
				margin-right : s-space($name);
			}

			@include s-register-class(
				$classname : 'p-b-#{$name}',
				$namespace : 'sugar.padding.bottom.#{$name}'
			) {
				padding-bottom : s-space($name);
				.#{$vertical-rhythme-scope} &:not(.not-#{$vertical-rhythme-scope}),
				&.#{$vertical-rhythme-scope}:not(.not-#{$vertical-rhythme-scope}) {
					padding-bottom : round(s-space($name));
				}
			}
			@include s-register-class(
				$classname : 'p-t-#{$name}',
				$namespace : 'sugar.padding.top.#{$name}'
			) {
				padding-top : s-space($name);
				.#{$vertical-rhythme-scope} &:not(.not-#{$vertical-rhythme-scope}),
				&.#{$vertical-rhythme-scope}:not(.not-#{$vertical-rhythme-scope}) {
					padding-top : round(s-space($name));
				}
			}
			@include s-register-class(
				$classname : 'p-l-#{$name}',
				$namespace : 'sugar.padding.left.#{$name}'
			) {
				padding-left : s-space($name);
			}
			@include s-register-class(
				$classname : 'p-r-#{$name}',
				$namespace : 'sugar.padding.right.#{$name}'
			) {
				padding-right : s-space($name);
			}
			@include s-register-class(
				$classname : 'p-s-#{$name}',
				$namespace : 'sugar.padding.side.#{$name}'
			) {
				padding-left : s-space($name);
				padding-right : s-space($name);
			}
		}

		//
		// Paddings
		//
		@include s-register-class(no-p-t,'sugar.padding.no.top') {
			padding-top: 0;
		}
		@include s-register-class(no-p-r,'sugar.padding.no.right') {
			padding-right: 0;
		}
		@include s-register-class(no-p-b,'sugar.padding.no.bottom') {
			padding-bottom: 0;
		}
		@include s-register-class(no-p-l,'sugar.padding.no.left') {
			padding-left: 0;
		}
		@include s-register-class(no-p-s,'sugar.padding.no.side') {
			padding-left: 0;
			padding-right: 0;
		}

		//
		// Margins
		//
		@include s-register-class(no-m-t,'sugar.margin.no.top') {
			margin-top: 0;
		}
		@include s-register-class(no-m-r,'sugar.margin.no.right') {
			margin-right: 0;
		}
		@include s-register-class(no-m-b,'sugar.margin.no.bottom') {
			margin-bottom: 0;
		}
		@include s-register-class(no-m-l,'sugar.margin.no.left') {
			margin-left: 0;
		}
		@include s-register-class(no-m-s,'sugar.margin.no.side') {
			margin-left: 0;
			margin-right: 0;
		}

		// colors
		$colors : sugar('settings.colors');
		@each $name, $color in $colors {
			@if $name != classes {
				$modifiers : ();
				@if type-of($color) == map {
					$modifiers : map-get($color, modifiers);
					$color : map-get($color, color);
				}	
				$cls : unquote("c-#{$name}");
				@include s-register-class(
					$classname : $cls,
					$namespace : 'sugar.color.#{$name}.color'
				) {
					color : s-color($color);
				}
				$cls : unquote("bkg-#{$name}");
				@include s-register-class(
					$classname : $cls,
					$namespace : 'sugar.color.#{$name}.bkg'
				) {
					background-color : s-color($color);
				}

				// modifiers
				@if $modifiers {
					@each $mod-name, $mod in $modifiers {
						$cls : unquote("c-#{$name}--#{$mod-name}");
						@include s-register-class(
							$classname : $cls,
							$namespace : 'sugar.color.#{$name}.modifier.#{$mod-name}.color'
						) {
							color : s-color($name, $mod-name);
						}
						$cls : unquote("bkg-#{$name}--#{$mod-name}");
						@include s-register-class(
							$classname : $cls,
							$namespace : 'sugar.color.#{$name}.modifier.#{$mod-name}.bkg'
						) {
							background-color : s-color($name, $mod-name);
						}
					}
				}
			}
		}
	}
}
@mixin s-classes(
	$classes : 'sugar'
) {
	// init classes
	@include s-classes-init();

	// classes
	@if $classes {
		@each $namespace in $classes {
			// get values
			$values : _get($_sugar-classes, _split($namespace,'.'));
			// get values
			@if type-of($values) == map {
				$values : map-deep-values($values);
				// loop to create each classes
				@each $value in $values {
					.#{$value} {
						@extend %#{$value} !optional;
					}
				}
			} @else if type-of($values) == string {
				.#{$values} {
					@extend %#{$values} !optional;
				}
			}
		}
	}

	
}


//
// Property proxy
//
@mixin s-property-proxy(
	$property,
	$value
) {
	@if $property == color {
		#{$property} : s-color($value);
	} @else if $property == font-family {
		#{$property} : s-font-family($value);
	} @else {
		#{$property} : $value;
	} 
}