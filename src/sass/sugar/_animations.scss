//
// Animations specific
//

//
// Animate mixin
//
@mixin s-animation(
	$animations...
) {
	// loop on animations
	$anims : ();
	$current_delay : 0s;
	$current_duration : 0s;
	$previous_duration : 0s;
	@for $i from 1 through length($animations) {
		$animation : nth($animations,$i);
		$animation : s-parse-properties($animation, (
			iteration : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 infinite initial inherit,
			direction : normal reverse alternate alternate-reverse initial inherit,
			fill-mode : none forwards backwards both initial inherit,
			name : string,
			duration : second,
			delay : second,
			ease : string,
			parallel : true
		));
	
		$name : map-get-or($animation, name);
		$duration : map-get-or($animation, duration, 1s);
		$delay : map-get-or($animation, delay, 0s);
		$ease : map-get-or($animation, ease, ease-in-out);
		$iteration : map-get-or($animation, iteration, 1);
		$direction : map-get-or($animation, direction, normal);
		$fill-mode : map-get-or($animation, fill-mode, forwards);
		$parallel : map-get-or($animation, parallel, false);
		
		// update delay
		$current_delay : $current_delay + $delay;

		// extend the animation if exist
		@extend %#{$name} !optional;
		
		// create the animations list	
		$anims : append($anims, $name $duration $current_delay $ease $iteration $direction $fill-mode, comma);
		
		// manage if animation is parallel with next one
		@if type-of($iteration) == number {
			@if $parallel == false {
				$current_delay : $current_delay + $duration * $iteration;
			}
		}
	}
	
	// set animation
	animation: $anims;
}

//
// Transition
//

@function s-transition-map(
	$transition
) {
	$tran : s-parse-properties($transition, (
		name : map-keys(sugar('settings.transitions')),
		property : string,
		duration : number,
		ease : string,
		delay : number
	));

	// merge with default transition
	@if $_s-default-transition-map {
		$tran : map-merge($_s-default-transition-map,$tran);
	}

	// if we have a name, mean that we want to merge transitions
	$name : map-get($tran, name);
	@if $name {
		// get the transition
		$named_transition : sugar('settings.transitions.#{$name}');
		// merge the maps
		$tran : map-merge(s-transition-map($named_transition),$tran);
	}

	// return the transition map
	@return $tran;
}
$_s-default-transition-map : null;
@function s-transition(
	$transitions...
) {
	// merge with default transition
	// to avoid recursion
	@if not $_s-default-transition-map {
		$_s-default-transition-map : s-transition-map(sugar('settings.transitions.default')) !global;
	}

	$trans : ();
	$available-transitions : map-keys(sugar('settings.transitions'));
	@if length($transitions) == 0 {
		$trans : sugar('settings.transitions.default');
	} @else {
		$transitions-settings : sugar('settings.transitions');
		@each $transition in $transitions {
			// get the transition map
			$t-map : s-transition-map($transition);
			// add the transition into list
			$trans : append($trans, map-get($t-map,property) map-get($t-map,duration) map-get($t-map,ease) map-get($t-map,delay), comma);
		}
	}
	// return the transitions
	@return $trans;
}
@mixin s-transition(
	$transitions...
) {
	// get the transitions
	$trans : s-transition($transitions...);

	// add the outline-color transition to detect the transitionstart in js
	$trans : append($trans, outline-color 0.000001s linear 0s, comma);

	// set transition
	transition: $trans;
	outline-color : black;
}

//
// Transition start trigger
//
@mixin s-transitionstart() {
	outline-color : rgba(random(255), random(255), random(255), random(1));
}

//
// DOMNodeInserted event hook
//
@keyframes s-DOMNodeInserted {
	from { opacity: .99; }
	to { opacity: 1; }
}
@function s-domnodeinserted() {
	@return s-DOMNodeInserted 0.001s;
}
@mixin s-DOMNodeInserted() {
	@include s-animation(s-domnodeinserted());
}	
@mixin s-domnodeinserted() {
	@include s-DOMNodeInserted();
}