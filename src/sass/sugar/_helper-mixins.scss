//
// Some helpers mixins
//

//
// Side lined
//
@mixin s-side-lined(
	$style : solid,
	$side : both,
	$height : s-rem(1px),
	$width : 50%,
	$color : black,
	$padding : 0,
	$margin-top : null
) {
	@if $_sugar-test-arguments {
		$style : s-test-argument('s-side-lined','style',none hidden dotted dashed solid double groove ridge inset outset initial inherit,$style);
		$side : s-test-argument('s-side-lined','side',left right both,$side);
		$height : s-test-argument('s-side-lined','height',number,$height);
		$width : s-test-argument('s-side-lined','width',number,$width);
		$color : s-test-argument('s-side-lined','color',color,$color);
		$padding : s-test-argument('s-side-lined','padding',number,$padding);
		$margin-top : s-test-argument('s-side-lined','margin-top',number,$margin-top);
	}

	display: block;
	overflow: hidden;
	min-height : 1.2em;

	@if $side == both {
		text-align: center;
	} @else if $side == left {
		text-align: right;
	} @else if $side == right {
		text-align: left;
	}
	
	$sel : '&:before, &:after';
	@if $side == left {
		$sel : '&:before';
	} @else if $side == right {
		$sel : '&:after';
	}

	#{$sel} {
		content: "";
		display: inline-block;
		vertical-align: middle;
		position: relative;
		width: $width;

		border-top-style: $style;
		border-top-width: $height;

		@if $color != inherit {
			border-top-color: $color;
    	}
		
		@if $style == double {
			height : $height * 2;
			border-bottom-style: solid;
			border-bottom-width: $height;
			border-bottom-color: $color;
		}

    	@if $margin-top {
			bottom: $margin-top;
    	} @else {
    		bottom : 0.05em;
    	}
	}

	@if $side == left or $side == both {
		&:before {
			right: $padding;
			margin-left: -50%;
		}
	}
	@if $side == right or $side == both {
		&:after {
			left: $padding;
			margin-right: -50%;
		}
	}
}

//
// Position
//
@mixin s-position(
	$position,
	$vertical-align : top,
	$align : left,
	$top : null,
	$right : null,
	$bottom : null,
	$left : null,
	$z : null
) {
	// get map
	$map : s-position(
		$position : $position,
		$vertical-align : $vertical-align,
		$align : $align,
		$top : $top,
		$right : $right,
		$bottom : $bottom,
		$left : $left,
		$z : $z
	);

	// get map
	@each $prop, $value in $map {
		#{$prop} : $value;
	}
}
@function s-position(
	$position : absolute,
	$vertical-align : top,
	$align : left,
	$top : null,
	$right : null,
	$bottom : null,
	$left : null,
	$z : null
) {
	@if $_sugar-test-arguments {
		$t : s-test-argument('s-position','position',(fixed,relative,absolute),$position);
		$t : s-test-argument('s-position','vertical-align',(top,middle,bottom),$vertical-align);
		$t : s-test-argument('s-position','align',(left,center,right),$align);
		$t : s-test-argument('s-position','top','number|null',$top);
		$t : s-test-argument('s-position','right','number|null',$right);
		$t : s-test-argument('s-position','bottom','number|null',$bottom);
		$t : s-test-argument('s-position','left','number|null',$left);
		$t : s-test-argument('s-position','z','number|null',$z);
	}

	$return : ();

	@if $position {
		$return : map-set($return, position, $position);
	}
	@if $z {
		$return : map-set($return, transform, translateZ($z));
	}
	@if $vertical-align or $align {
		// top
		@if $vertical-align == top {
			$return : map-set($return, top, 0%);
			@if $align == left {
				$return : map-set($return, left, 0%);
			} @else if $align == center {
				$return : map-set($return, left, 50%);
				$return : map-merge($return, s-translate(-50%, 0%));
			} @else if $align == right {
				$return : map-set($return, right, 0%);
			} @else {
				$return : map-set($return, left, 0%);
			}
		} @else if $vertical-align == middle {
			$return : map-set($return, top, 50%);
			@if $align == left {
				$return : map-set($return, left, 0%);
				$return : map-merge($return, s-translate(0, -50%));
			} @else if $align == center {
				$return : map-set($return, left, 50%);
				$return : map-merge($return, s-translate(-50%, -50%));
			} @else if $align == right {
				$return : map-set($return, right, 0%);
				$return : map-merge($return, s-translate(0, -50%));
			} @else {
				$return : map-merge($return, s-translate(-50%, 0%));
			}
		} @else if $vertical-align == bottom {
			$return : map-set($return, bottom, 0%);
			@if $align == left {
				$return : map-set($return, left, 0%);
			} @else if $align == center {
				$return : map-set($return, left, 50%);
				$return : map-merge($return, s-translate(-50%, 0%));
			} @else if $align == right {
				$return : map-set($return, right, 0%);
			} @else {
				$return : map-set($return, left, 0%);
			}
		} @else if $align == left {
			$return : map-set($return, left, 0%);
			@if $vertical-align == top {
				$return : map-set($return, top, 0%);
			} @else if $vertical-align == middle {
				$return : map-set($return, top, 50%);
				$return : map-merge($return, s-translate(0, -50%));
			} @else if $vertical-align == bottom {
				$return : map-set($return, bottom, 0%);
			} @else {
				$return : map-set($return, top, 0%);
			}
		} @else if $align == center {
			$return : map-set($return, left, 50%);
			@if $vertical-align == top {
				$return : map-set($return, top, 0%);
				$return : map-merge($return, s-translate(-50%, 0%));
			} @else if $vertical-align == middle {
				$return : map-set($return, top, 50%);
				$return : map-merge($return, s-translate(-50%, -50%));
			} @else if $vertical-align == bottom {
				$return : map-set($return, bottom, 0%);
				$return : map-merge($return, s-translate(-50%, 0%));
			} @else {
				$return : map-set($return, top, 0%);
			}
		} @else if $align == right {
			$return : map-set($return, right, 0%);
			@if $vertical-align == top {
				$return : map-set($return, top, 0%);
			} @else if $vertical-align == middle {
				$return : map-set($return, top, 50%);
				$return : map-merge($return, s-translate(0, -50%));
			} @else if $vertical-align == bottom {
				$return : map-set($return, bottom, 0%);
			} @else {
				$return : map-set($return, top, 0%);
			}
		}
	}
	@if $top {
		$return : map-set($return, top, $top);
	}
	@if $right {
		$return : map-set($return, right, $right);
	}
	@if $bottom {
		$return : map-set($return, bottom, $bottom);
	}
	@if $left {
		$return : map-set($return, left, $left);
	}

	// return map
	@return $return;
}

//
// Vertical aligner
//
@mixin s-vertical-aligner(
) {
	&:before {
		content: '';
		display: inline-block;
		vertical-align: middle;
		height: 100%; width: .1px;
	}

	> * {
		display: inline-block;
		vertical-align: middle;
	}
}

//
// Translate
//
@mixin s-translate(
	$x : 0,
	$y : 0,
	$z : 0
) {
	// get the translate props
	$translate : s-translate(
		$x : $x,
		$y : $y,
		$z : $z
	);

	// get map
	@each $prop, $value in $translate {
		#{$prop} : $value;
	}
}
@function s-translate(
	$x : 0,
	$y : 0,
	$z : 0
) {
	@if $_sugar-test-arguments {
		$x : s-test-argument('s-translate','x',number,$x);
		$y : s-test-argument('s-translate','y',number,$y);
		$z : s-test-argument('s-translate','z',number,$z);
	}

	// build translate
	$translates : ();
	@if $x {
		$translates : append($translates, translateX($x));
	}
	@if $y {
		$translates : append($translates, translateY($y));
	}
	@if $z {
		$translates : append($translates, translateZ($z));
	}

	// return translate
	@return (
		transform : $translates
	);
}

//
// Ratio
//
@mixin s-ratio(
	$ratio : null,
	$type : before
) {
	@if $_sugar-test-arguments {
		$type : s-test-argument('s-ratio','type',(before,after),$type);
		$ratio : s-test-argument('s-ratio','ratio',number,$ratio);
	}

	position: relative;
	overflow: hidden;
	&:#{$type} {
		content:'';
		display: block;
		height: 0;
		padding-top: percentage(1 / $ratio);
	}
}

//
// Fit
// Make an element 100% width and height
//
@mixin _s-fit() {
	width: 100%;
	height: 100%;
}
%s-fit { @include _s-fit(); }
@mixin s-fit() { @include _s-fit(); }

//
// Size
//
@mixin s-size(
	$size-width,
	$height : null,
	$position : absolute
) {
	@if $_sugar-test-arguments {
		@if type-of($size-width) != number {
			$size-width : s-test-argument('s-size','size-width',(cover,contain),$size-width);
		} @else {
			$size-width : s-test-argument('s-size','size-width',number,$size-width);
		}
		$height : s-test-argument('s-size','height','number|null',$height);
		$position : s-test-argument('s-size','position',(relative,absolute),$position);
	}

	// apply values
	@if type-of($size-width) == string {
		position: $position;
		top: 50%;
		left: 50%;
		transform: translateX(-50%) translateY(-50%);
		@if $size-width == cover {
			min-width: 100%;
			min-height: 100%;
		} @else if $size-width == contain {
			max-width:100%;
			max-height:100%;
		}
	} @else if type-of($size-width) == number and unitless($size-width) and $size-width < 1 {
		@include s-ratio($size-width);
	} @else {
		@if $size-width {
			width : $size-width;
		}
		@if $height {
			height : $height;
		}
	}
}

//
// Selection
//
@mixin s-selection {
	::-moz-selection { @content; }
	::selection { @content; }
}

/**
 * Center block
 */
@mixin s-center-block() {
	display: block;
	margin-left:auto;
	margin-right:auto;
}

//
// Expanded
// 
@mixin s-expanded {
	position: absolute;
	top:0; left:0;
	width:100%; height:100%;
}

//
// Visually hidden
//
@mixin _s-visually-hidden {
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	clip: rect(0, 0, 0, 0);
	position: absolute;
}
%s-visually-hidden {
	@include _s-visually-hidden();
}
@mixin s-visually-hidden() {
	@include _s-visually-hidden();
}