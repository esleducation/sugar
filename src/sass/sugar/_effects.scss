//
// Effects specific
//

//
// Depth
//
@mixin s-depth(
	$depth,
	$color : rgba(0,0,0,.2)
) {
	@include s-filter(box-shadow(#{$color} 0 #{$depth * s-rem(2px)} #{$depth * s-rem(3px)} ));
}

//
// Hey
//
@mixin s-hey(
	$vertical-align : top,
	$align : left,
	$size : 20px,
	$color : gold,
	$margin-left : 0,
	$margin-right : 0,
	$margin-top : 0,
	$margin-bottom : 0
) {
	@if $_sugar-test-arguments {
		$t : s-test-argument('s-hey','vertical-align',(top,middle,bottom),$vertical-align);
		$t : s-test-argument('s-hey','align',(left,center,right),$align);
		$t : s-test-argument('s-hey','size',number,$size);
		$t : s-test-argument('s-hey','color',color,$color);
		$t : s-test-argument('s-hey','margin-left',number,$margin-left);
		$t : s-test-argument('s-hey','margin-top',number,$margin-top);
		$t : s-test-argument('s-hey','margin-bottom',number,$margin-bottom);
		$t : s-test-argument('s-hey','margin-right',number,$margin-right);
	}

	$position : s-position(
		$vertical-align : $vertical-align,
		$align : $align
	);
	
	@keyframes s-hey {
		from {
			opacity: 1;
		}
		to {
			opacity: 0;
		}
	}

	position: relative;
	&:before {
		$ratio : 2;
		$s : round($size / $ratio);
		content: '';
		position: absolute;
		// top : ($size / 2 - $s / 2) + $top;
		// right : ($size / 2 - $s / 2) + $right;
		height: $s; width: $s;
		@include s-corner($s);
		background-color: $color;

		@each $prop, $value in $position {
			@if $prop == top or $prop == bottom or $prop == left or $prop == right {
				@if $prop == top and $value > 0%
					or $prop == left and $value > 0% {
					$value : "#{$value} - #{($size / 2 - $s / 2)}";
				} @else {
					$value : "#{$value} + #{($size / 2 - $s / 2)}";
				}
				@if $prop == top {
					$value : "#{$value} + #{$margin-top} - #{$margin-bottom}";
				} @else if $prop == right {
					$value : "#{$value} + #{$margin-right} - #{$margin-left}";
				} @else if $prop == bottom {
					$value : "#{$value} + #{$margin-bottom} - #{$margin-top}";
				} @else if $prop == left {
					$value : "#{$value} + #{$margin-left} - #{$margin-right}";
				}
				@if $prop != position or $prop != transform {
					#{$prop} : calc(#{$value});
				}
			}
		}

	}
	&:after {
		$border-width : floor(($size - $size / 2) / 3.5);
		content: '';
		position: absolute;
		// top: $top; right: $right;
		height: $size - $border-width * 2; width: $size - $border-width * 2;
		@include s-corner(s-rem($size / 2));
		background-color: transparent;
		border: solid $color;
		border-width: $border-width; // animates
		boz-sizing: border-box;
		@include s-animation(s-hey infinite);

		@each $prop, $value in $position {
			@if $prop == top {
				$value : "#{$value} + #{$margin-top} - #{$margin-bottom}";
			} @else if $prop == right {
				$value : "#{$value} + #{$margin-right} - #{$margin-left}";
			} @else if $prop == bottom {
				$value : "#{$value} + #{$margin-bottom} - #{$margin-top}";
			} @else if $prop == left {
				$value : "#{$value} + #{$margin-left} - #{$margin-right}";
			}
			@if $prop != position or $prop != transform {
				#{$prop} : calc(#{$value});
			}
		}
	}

	@include s-handle-nested(hey) {
		@content;
	}
}

//
// Shade
//
@mixin s-long-shadow(
	$color : rgba(0,0,0,.3),
	$type : text,
	$angle : 135deg,
	$depth : 20,
	$fade : false,
	$blur : 0,
	$blur-ratio : 0
) {
	@if $_sugar-test-arguments {
		$color : s-test-argument('s-long-shadow','color',color,$color);
		$type : s-test-argument('s-long-shadow','type',(text,box),$type);
		$angle : s-test-argument('s-long-shadow','angle',degree,$angle);
		$depth : s-test-argument('s-long-shadow','depth',number,$depth);
		$fade : s-test-argument('s-long-shadow','fade',boolean,$fade);
		$blur : s-test-argument('s-long-shadow','blur',number,$blur);
		$blur-ratio : s-test-argument('s-long-shadow','blur-ratio',number,$blur-ratio);
	}

	$angle: (s-strip-units($angle) - 90);             
	$x: 1.5 * cos($angle) + 0px;  
	$y: 1.5 * sin($angle) + 0px;  
	$darken: (lightness($color)/$depth)/2;
	$opacify: 0; 
	$shadow: ();  
	          
	$darken:0;  
	
	@if $fade == true {
	  $opacify: (opacity($color)/$depth);
	  transform: translateX(0);
	}
	
	@for $i from 1 through $depth {
		$b : $blur;
		@if $blur-ratio > 0 {
			$b : $blur + $i * $blur-ratio;
		}
		$shadow: $shadow, $i*$x $i*$y s-rem($b) hsla(hue($color) , saturation($color), (lightness($color) - ($i * $darken)), 1 - ($i * $opacify));     
	}       
	#{$type}-shadow: $shadow;
}