@include s-component-setup((
	button : (
		generate : (
			colors : default primary secondary success warning error info,
			sizes : default
		)
	)
));

$_s-button-inited : false;
@mixin s-button-init() {
	@if not $_s-button-inited {
		$_s-button-inited : true !global;
		%s-button-bare {
			display: inline-block;
			border: none;
			cursor: pointer;
			outline-width:0;
			@include s-font(sugar('settings.typo.font-family') center);
			-webkit-appearance: none;
			line-height: 1;
			text-decoration: none;
		}
	}
}

@mixin s-button(
	$sizes : sugar('settings.components.button.generate.sizes'),
	$colors : sugar('settings.components.button.generate.colors')
) {
	// init dropdown
	@include s-button-init();
	
	// parse properties
	@if $_sugar-test-arguments {
		$sizes : s-test-argument('s-button','sizes',map-keys(sugar('settings.sizes')),$sizes);
		$colors : s-test-argument('s-button','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in component context
	@include s-component-context('button') {
	
		// base
		.btn {
			@extend %s-button-bare;
		}
		button {
			line-height: 1 !important;
		}

		// generate each sizes
		@each $size in $sizes {
			#{s-selector((
				BEM : '.btn--#{$size}',
				SMACCS : '.btn-#{$size}'
			))} {
				font-size : s-look-and-feel(font-size, $size);
				border-radius: s-look-and-feel(border-radius, $size);
				padding : s-look-and-feel(padding-horizontal, $size) s-look-and-feel(padding-vertical, $size);
				height: s-lnf(font-size, $size) + s-lnf(padding-horizontal, $size) * 2;

				// @include s-vertical-rhythme(
				// 	$font-size : s-look-and-feel(font-size, $size),
				// 	$line-height: s-look-and-feel(font-size, $size),
				// 	$padding-top : s-look-and-feel(padding-horizontal, $size),
				// 	$padding-bottom : s-look-and-feel(padding-horizontal, $size),
				// 	$margin-bottom : 1,
				// 	$margin-top : 0,
				// 	$border-bottom-width: s-rem(1px),
				// 	$border-top-width : s-rem(1px),
				// 	$calculate-height : true
				// );
			}
		}
		// generate each colors
		@each $color in $colors {
			#{s-selector((
				BEM : '.btn--#{$color}',
				SMACCS : '.btn-#{$color}'
			))} {
				background-color: s-color($color);
				border: s-rem(1px) solid s-color($color);
				@if lightness(s-color($color)) > 70 {
					color : s-color($color, -darken 30%);
				} @else {
					color : white;
				}
				
				&:active,
				&:hover,
				&.active,
				#{s-selector((
					BEM : '&.btn--active',
					SMACCS : '&.is-active'
				))} {
					background-color : s-color($color, -darken 15%);
					border-color: s-color($color, -darken 15%);
				}
				:checked + & {
					background-color : s-color($color, -darken 25%);
					border-color: s-color($color, -darken 25%);
				}

				// outline
				#{s-selector((
					BEM : '&.btn--outline',
					SMACCS : '&.btn-outline'
				))} {
					color: s-color($color);
					
					&:active,
					&:hover,
					&.active,
					:checked + &,
					#{s-selector((
						BEM : '&.btn--active',
						SMACCS : '&.is-active'
					))} {
						background-color: s-color($color);
						border-color: s-color($color);
						@if lightness(s-color($color)) > 70 {
							color : s-color($color, -darken 30%);
						} @else {
							color : white;
						}
					}
				}
			}
		}
		// link button
		#{s-selector((
			BEM : '.btn--link',
			SMACCS : '.btn-link'
		))} {
			background: transparent !important;
			color: s-color(link) !important;
			border: none !important;
		}
		// outline
		#{s-selector((
			BEM : '.btn--outline',
			SMACCS : '.btn-outline'
		))} {
			background-color: transparent;
		}
		// disabled
		.btn[disabled],
		#{s-selector((
			BEM : '.btn--disabled',
			SMACCS : '.btn-disabled'
		))} {
			opacity: 0.65;
			cursor: not-allowed !important;
		}
		// block
		#{s-selector((
			BEM : '.btn--block',
			SMACCS : '.btn-block'
		))} {
			display: block;
			width: 100%;
		}

		// button group
		.btn-group {
			@include s-clearfix();

			> input[type="checkbox"],
			> input[type="radio"] {
				display: none;
			}		

			.btn {
				float: left;

				&:not(:first-of-type):not(:last-of-type) {
					border-radius: 0;
				}
				&:first-of-type {
					border-top-right-radius:0;
					border-bottom-right-radius:0;
				}
				&:last-of-type {
					border-top-left-radius:0;
					border-bottom-left-radius:0;
				}
			}
		}
	}
}