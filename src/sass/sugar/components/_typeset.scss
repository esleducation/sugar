@include s-component-setup((
	typeset : (
		scope-class : 'typeset',
		titles : (
			default : (
				margin-bottom : 2rem
			),
			h1 : (
				font-size : 57px
			),
			h2 : (
				font-size : 50px
			),
			h3 : (
				font-size : 36px
			),
			h4 : (
				font-size : 26px
			),
			h5 : (
				font-size : 20px
			),
			h6 : (
				font-size : 1rem
			)
		),
		paragraphs : (
			default : (
				font-size : 16px,
				margin-bottom : 2rem
			),
			lead : (
				font-size : 22px
			)
		),
		lists : (
			default : (
				font-size : 16px,
				margin-bottom : 2rem
			),
			ul : (),
			ol : (),
			dl : ()
		),
		tables : (
			default : (
				margin-bottom : 2rem
			)
		)
	)
));

//
// typeset base
//
@mixin s-no-typeset() {
	$typeset : sugar('settings.components.typeset.scope-class');
	&:not(.no-#{$typeset}) {
		@content;
	}
}
@function s-no-typeset() {
	$typeset : sugar('settings.components.typeset.scope-class');
	@return unquote(':not(.no-#{$typeset})');
}



@mixin s-typeset-titles(
	$count : 6,
	$color : null
) {
	// pass in component context
	@include s-component-context('typeset') {

		@if $_sugar-test-arguments {
			$count : s-test-argument('s-typeset-titles','count',integer,$count);
			$color : s-test-argument('s-typeset-titles','color|list-color',color,$color);
		}

		$typeset : sugar('settings.scope-class');

		@for $i from 1 through $count {
			// merge with default
			$s : sugar('settings.titles.h#{$i}');
			$s : map-extend(sugar('settings.titles.default'), $s);

			// vertical rhythme
			#{s-vertical-rhythme-scope-class()} .h#{$i},
			#{s-vertical-rhythme-scope-class()}.#{$typeset} h#{$i}#{s-no-typeset()} {
				@include s-vertical-rhythme(
					$font-size : map-get($s, font-size),
					$margin-bottom : map-get($s, margin-bottom)
				);
			}

			.h#{$i},
			.#{$typeset} h#{$i}#{s-no-typeset()} {
				@each $prop, $value in $s {
					@include s-property-proxy($prop, $value);
				}
				@if type-of($color) == list and nth($color,$i) {
					color : nth($color,$i);
				} @else if $color {
					color : $color;
				}
			}
		}
	}
}

@mixin s-typeset-paragraphs(
	$color : null
) {
	// pass in component context
	@include s-component-context('typeset') {

		@if $_sugar-test-arguments {
			$color : s-test-argument('s-typeset-paragraphs','color|map-color',color,$color);
		}

		$typeset : sugar('settings.scope-class');

		$paragraphs : sugar('settings.paragraphs');
		@each $name, $s in $paragraphs {


			$sel : 'p.#{$name}';
			$sel-class : '.p-#{$name}';
			@if $name == default {
				$sel : 'p';
				$sel-class : '.p';
			}

			// extend
			$s : map-extend(sugar('settings.paragraphs.default'), $s);

			// vertical rhythme
			#{s-selector((
				BEM : '.#{$typeset} p.#{$name}#{s-no-typeset()}, .p--#{$name}',
				SMACCS : '.#{$typeset} p.#{$name}#{s-no-typeset()}, .p-#{$name}'
			), $vertical-rhythme-scope : true)} {
				@include s-vertical-rhythme(
					$font-size : map-get($s, font-size),
					$margin-bottom : map-get($s, margin-bottom)
				);
			}

			// delete used properties
			$s : map-remove($s, font-size);
			$s : map-remove($s, margin-bottom);

			// vertical rhythme
			#{s-selector((
				BEM : '.#{$typeset} p.#{$name}#{s-no-typeset()}, .p--#{$name}',
				SMACCS : '.#{$typeset} p.#{$name}#{s-no-typeset()}, .p-#{$name}'
			))} {
				@each $prop, $value in $s {
					@include s-property-proxy($prop, $value);
				}
				@if type-of($color) == map and map-get($color, $name) {
					color : map-get($color,$name);
				} @else if $color {
					color : $color;
				}
			}
		}
	}
}

@mixin s-typeset-lists(
) {
	// pass in component context
	@include s-component-context('typeset') {

		$typeset : sugar('settings.scope-class');

		// ul
		$s : map-extend(sugar('settings.lists.default'), sugar('settings.lists.ul'));

		.ul,
		.#{$typeset} ul#{s-no-typeset()} {
			@include s-list();

			> li,
			> .li {
				@include s-list-bullet(
					$space : s-space(default),
					$type : square,
					$color : s-color(text, -opacity .5)
				);
			}
		}
		#{s-vertical-rhythme-scope-class()} .ul,
		#{s-vertical-rhythme-scope-class()}.#{$typeset} ul#{s-no-typeset()} {
			$args : (
				font-size : map-get($s, font-size),
				margin-bottom: 0,
				cap-height : 0.65
			);
			$rhythme : s-vertical-rhythme($args...);

			@include s-vertical-rhythme {
				margin-bottom: ceil(s-rem(s-px(map-get($s, margin-bottom)))) + map-get($rhythme, margin-bottom);
			}

			> li,
			> .li {
				@include s-vertical-rhythme($args...);

				> ul, > .ul,
				> ol, > .ol,
				> dl, > .dl {
					margin-top: map-get($rhythme, margin-bottom);
				}
			}
		}

		// ol
		$s : map-extend(sugar('settings.lists.default'), sugar('settings.lists.ol'));
		.ol,
		.#{$typeset} ol#{s-no-typeset()} {
			@include s-list();

			> li,
			> .li {
				@include s-list-bullet(
					$space : s-space(default),
					$type : decimal,
					$color : s-color(text, -opacity .5)
				);
			}
		}
		#{s-vertical-rhythme-scope-class()} .ol,
		#{s-vertical-rhythme-scope-class()}.#{$typeset} ol#{s-no-typeset()} {
			$args : (
				font-size : map-get($s, font-size),
				margin-bottom: 0,
				cap-height : 0.65
			);
			$rhythme : s-vertical-rhythme($args...);

			@include s-vertical-rhythme {
				margin-bottom: ceil(s-rem(s-px(map-get($s, margin-bottom)))) + map-get($rhythme, margin-bottom);
			}

			> li,
			> .li {
				@include s-vertical-rhythme($args...);

				> ul, > .ul,
				> ol, > .ol,
				> dl, > .dl {
					margin-top: map-get($rhythme, margin-bottom);
				}
			}
		}

		// dl
		$s : map-extend(sugar('settings.lists.default'), sugar('settings.lists.dl'));
		.dl,
		.#{$typeset} dl#{s-no-typeset()} {
			@include s-list();

			> dt,
			> .dt {
				@include s-list-bullet(
					$space : 0,
					$type : none,
					$color : s-color(text, -opacity .5)
				);
			}
			> dd,
			> .dd {
				@include s-list-bullet(
					$space :0,
					$type : none,
					$color : s-color(text, -opacity .5)
				);
			}
		}
		#{s-vertical-rhythme-scope-class()} .dl,
		#{s-vertical-rhythme-scope-class()}.#{$typeset} dl#{s-no-typeset()} {
			$args-dt : (
				font-size : map-get($s, font-size),
				margin-bottom: 0,
				cap-height : 0.65
			);
			$args-dd : (
				font-size : map-get($s, font-size),
				margin-bottom: 1,
				cap-height : 0.65
			);
			$rhythme : s-vertical-rhythme($args-dd...);
			@include s-vertical-rhythme {
				margin-bottom: ceil(s-rem(s-px(map-get($s, margin-bottom)))) + map-get($rhythme, margin-bottom);
			}

			> dt, > .dt {
				@include s-vertical-rhythme($args-dt...);
				font-weight: bold;
			}
			> dd, > .dd {
				@include s-vertical-rhythme($args-dd...);
			}
		}
	}
}

@mixin s-typeset-blocks(
) {
	$vertical-rhythme : sugar('settings.vertical-rhythme.scope-class');

	// pass in component context
	@include s-component-context('typeset') {

		$font-size : sugar('settings.typo.font-size');
		$typeset : sugar('settings.scope-class');

		// blockquote
		.blockquote,
		.#{$typeset} blockquote#{s-no-typeset()} {
			border-left: s-space(smaller) solid s-color(text, -opacity .3);
			padding-left: s-space(default);

			footer {
				color : s-color(text, -opacity .6);

				cite {
					font-style: italic;
				}

				&:before {
					content : "\2014 \00A0";
				}
			}
		}
		#{s-vertical-rhythme-scope-class()} .blockquote,
		#{s-vertical-rhythme-scope-class()}.#{$typeset} blockquote#{s-no-typeset()} {
			@include s-vertical-rhythme(
				$font-size : 20px,
				$padding-top : s-space(default),
				$padding-bottom : s-space(default),
				$margin-bottom : s-space(default)
			);
			.p, p {
				@include s-vertical-rhythme(
					$font-size : 20px,
					$margin-bottom : s-space(default)
				);
			}
			footer {
				margin-top: 1rem;
			}
		}

		// pre
		.pre,
		.#{$typeset} pre#{s-no-typeset()} {
			border-left: s-space(smaller) solid s-color(primary, -opacity .3);
			padding: s-space(default);
		}
		#{s-vertical-rhythme-scope-class()} .pre,
		#{s-vertical-rhythme-scope-class()}.#{$typeset} pre#{s-no-typeset()} {
			@include s-vertical-rhythme(
				$font-size : 16px,
				$font-family : code,
				$padding-top : s-space(default),
				$padding-bottom : s-space(default),
				$margin-bottom : s-space(default)
			);
		}

		// address
		.address,
		.#{$typeset} address#{s-no-typeset()} {
			padding: s-space(default);
			background-color : s-color(text, -opacity .05);
		}
		#{s-vertical-rhythme-scope-class()} .address,
		#{s-vertical-rhythme-scope-class()}.#{$typeset} address#{s-no-typeset()} {
			@include s-vertical-rhythme(
				$font-size : $font-size,
				$line-height : 2,
				$padding-top : s-space(default),
				$padding-bottom : s-space(default),
				$margin-bottom : s-space(default)
			);
			overflow: hidden;
			position: relative;

			i, .i {
				position: absolute;
				right: 10%; top: 50%;
				font-size: 25rem !important;
				@include s-translate(0,-40%);
				color: s-color(text, -opacity .1);
			}
		}
	}
}

@mixin s-typeset-decorators(
) {

	$sizes : sugar('settings.sizes');

	// pass in component context
	@include s-component-context('typeset') {

		$typeset : sugar('settings.scope-class');

		// sizes
		@each $size, $value in $sizes {
			.#{$size},
			.#{$typeset} #{$size}#{s-no-typeset()} {
				font-size: s-lnf(font-size, $size);
			}
		}
		.strong,
		.#{$typeset} strong#{s-no-typeset()} {
			font-weight: bold;
		}
		.mark,
		.#{$typeset} mark#{s-no-typeset()} {
			background: s-color(primary, -opacity .2);
			color: s-color(text);
		}
		.s, .del,
		.#{$typeset} s#{s-no-typeset()},
		.#{$typeset} del#{s-no-typeset()} {
			text-decoration: line-through;
		}
		.u, .ins,
		.#{$typeset} u#{s-no-typeset()},
		.#{$typeset} ins#{s-no-typeset()} {
			text-decoration: underline;
		}
		.b,
		.#{$typeset} b#{s-no-typeset()} {
			font-style: italic;
		}
		.abbr,
		.#{$typeset} abbr#{s-no-typeset()} {
			border-bottom: 1px dotted s-color(text);
			cursor: help;
		}
		.kbd,
		.#{$typeset} kbd#{s-no-typeset()} {
			background: s-color(text, -opacity .2);
			color: s-color(text);
			padding: 0 0.3em;
		}
		.code,
		.#{$typeset} code#{s-no-typeset()} {
			background: s-color(text, -opacity .2);
			color: s-color(primary);
			@include s-font(
				$family : code
			);
			padding: 0 0.3em;
		}

		.samp,
		.#{$typeset} samp#{s-no-typeset()} {
			@include s-font(code);
		}

		.hr,
		.#{$typeset} hr#{s-no-typeset()} {
			border: none;
			clear: both;
			height:0;
		}
		#{s-vertical-rhythme-scope-class()} .hr,
		#{s-vertical-rhythme-scope-class()} hr {
			@include s-vertical-rhythme(
				$font-size : 0,
				$line-height : 0,
				$margin-top : s-space(default),
				$margin-bottom : s-space(default) - s-convert(1px),
				$border-bottom: 1px solid s-color(text, -opacity .3)
			);
		}
	}
}

@mixin s-typeset-tables(
	$sizes : null
) {
	// pass in component context
	@include s-component-context('typeset') {

		$font-size : sugar('settings.typo.font-size');

		@if $_sugar-test-arguments {
			$sizes : s-test-argument('s-typeset-tables','sizes','string|list-string',$sizes);
		}

		$typeset : sugar('settings.scope-class');
		$s : sugar('settings.tables.default');

		.#{$typeset} .table-responsive#{s-no-typeset()} {
			min-height: 0.01%;
			overflow-x: auto;
			width: 100%;
			overflow-y: hidden;
		}

		.#{$typeset} table#{s-no-typeset()},
		.table {
			width: 100%;
			margin-bottom: s-rem(map-get($s, margin-bottom));

			th,
			td {
				padding-left: s-look-and-feel(padding-horizontal);
				padding-right: s-look-and-feel(padding-horizontal);
				&:last-child {
					border-right : none;
				}
			}
			th {
				border-bottom: 2px solid s-color(text, -opacity .2);
				@include s-font(bold left);
			}
			td {
				border-bottom: 1px solid s-color(text, -opacity .2);
			}
			tr:last-child td,
			tr:last-child:not(:first-child) th {
				border-bottom: none;
			}

			// caption
			caption {
				@include s-font(italic left);
				&:before {
					content : "\2014 \00A0";
				}
			}

			// adapt and grow
			td.adapt,
			th.adapt {
				width:1px;
			}
			td.grow,
			th.grow {
				width:9999999px;
			}

			// stripped
			&.table-striped,
			&.table--striped {
				> tbody > tr:nth-of-type(odd) {
					background-color : s-color(text, -opacity .05);
				}
			}

			// bordered
			&.table-bordered,
			&.table--bordered {
				border: 1px solid s-color(text, -opacity .2);

				td,
				th {
					border-right: 1px solid s-color(text, -opacity .2);
				}
			}

			// shadowed
			&.table-shadowed,
			&.table--shadowed {
				@include s-transition();
				&:hover {
					@include s-filter(shadow);
				}
			}

			// hover
			&.table-hover,
			&.table--hover {
				> tbody > tr:hover {
					background-color: s-color(text, -opacity .1);
				}
			}
		}

		#{s-vertical-rhythme-scope-class()} table,
		#{s-vertical-rhythme-scope-class()} .table {
			$args : (
				font-size : $font-size,
				border-bottom : solid s-color(text, -opacity .2) 1px,
				padding-top : ceil(s-look-and-feel(padding-vertical)),
				padding-bottom : ceil(s-look-and-feel(padding-vertical)),
				margin-bottom : 0,
				margin-top : 0
			);
			th,
			td {
				@include s-vertical-rhythme($args...);
			}
			th {
				$args : map-set($args, border-bottom, solid s-color(text, -opacity .2) 2px);
				@include s-vertical-rhythme($args...);

			}
			caption {
				@include s-vertical-rhythme(
					$font-size : $font-size,
					$margin-bottom : 1
				);
			}
		}

		@each $size in $sizes {

			.#{$typeset} table#{s-no-typeset()}.table--#{$size},
			.#{$typeset} table#{s-no-typeset()}.table-#{$size},
			.table.table-#{$size},
			.table.table--#{$size} {
				th,
				td {
					padding-left: s-look-and-feel(padding-horizontal, $size);
					padding-right: s-look-and-feel(padding-horizontal, $size);
				}
			}

			#{s-vertical-rhythme-scope-class()} table.table--#{$size},
			#{s-vertical-rhythme-scope-class()} table.table-#{$size},
			#{s-vertical-rhythme-scope-class()} .table.table--#{$size},
			#{s-vertical-rhythme-scope-class()} .table.table-#{$size} {
				$args : (
					font-size : $font-size,
					border-bottom : solid s-color(text, -opacity .2) 1px,
					padding-top : ceil(s-look-and-feel(padding-vertical, $size)),
					padding-bottom : ceil(s-look-and-feel(padding-vertical, $size)),
					margin-bottom : 0,
					margin-top : 0
				);
				th,
				td {
					@include s-vertical-rhythme($args...);
				}
				th {
					$args : map-set($args, border-bottom, solid s-color(text, -opacity .2) 2px);
					@include s-vertical-rhythme($args...);

				}
			}
		}
	}
}
