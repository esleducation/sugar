@include s-component-setup((
	dropdown : (

	)
));

$_s-dropdown-inited : false;
@mixin s-dropdown-init() {
	@if not $_s-dropdown-inited {
		$_s-dropdown-inited : true !global;
		%s-dropdown-bare {
			position: relative;

			&:hover,
			&.active,
			#{s-selector((
				BEM : '&.dropdown--active',
				SMACCS : '&.is-active'
			))} {
				z-index:1;

				#{s-selector((
					BEM : '.dropdown__menu',
					SMACCS : '.dropdown-menu'
				))} {
					visibility: visible;
					opacity: 1;
					pointer-events: all;
				}
			}

			#{s-selector((
				BEM : '.dropdown__menu',
				SMACCS : '.dropdown-menu'
			))} {
				visibility: hidden;
				opacity: 0;
				position: absolute;
				top: 100%;
				pointer-events: none;
				@include s-transition();
			}
			#{s-selector((
				BEM : '.dropdown__item',
				SMACCS : '.dropdown-item'
			))} {
				white-space: nowrap;
			}
		}

		%s-dropup-bare {
			@extend %s-dropdown-bare;

			#{s-selector((
				BEM : '.dropdown__menu',
				SMACCS : '.dropdown-menu'
			))} {
				top: auto;
				bottom: 100%;
			}
		}

		%s-dropdown-style {
			
			#{s-selector((
				BEM : '.dropdown__menu',
				SMACCS : '.dropdown-menu'
			))} {
				background: white;
				border: 1px solid s-color(default, -opacity .2);
				box-shadow: s-color(default, -opacity .3) 0 10px 10px;
				@include s-transition();
			}

			#{s-selector((
				BEM : '.dropdown__item',
				SMACCS : '.dropdown-item'
			))} {
				border-top: solid s-rem(1px) s-color(default, -opacity .2);

				&:hover,
				&.active,
				#{s-selector((
					BEM : '&.dropdown__item--active',
					SMACCS : '&.is-active'
				))} {
					background-color : s-color(default, -opacity .1);
				}

				> a {
					color : s-color(link);
					display: block;
					width: 100%;
				}
			}
		}
	}
}

@mixin s-dropdown(
	$sizes : sugar('settings.components.dropdown.generate.sizes'),
	$colors : sugar('settings.components.dropdown.generate.colors')
) {
	// init dropdown
	@include s-dropdown-init();
	
	@if $_sugar-test-arguments {
		$sizes : s-test-argument('s-nav-tabs','sizes',map-keys(sugar('settings.sizes')),$sizes);
		$colors : s-test-argument('s-nav-tabs','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in component context
	@include s-component-context('dropdown') {
		
		// base
		.dropdown {
			@extend %s-dropdown-bare;
			@extend %s-dropdown-style;

			&:hover,
			&.active,
			#{s-selector((
				BEM : '&.dropdown--active',
				SMACCS : '&.is-active'
			))} {
				#{s-selector((
					BEM : '.dropdown__menu',
					SMACCS : '.dropdown-menu'
				))} {
					top: 100%;
				}
			}
		}

		// generate each sizes
		@each $size in $sizes {
			// extend dropdown
			#{s-selector((
				BEM : '.dropdown--#{$size}',
				SMACCS : '.dropdown-#{$size}'
			))}
			 {
				#{s-selector((
					BEM : '.dropdown__menu',
					SMACCS : '.dropdown-menu'
				))} {
					border-radius: s-look-and-feel(border-radius, $size);
				}
				#{s-selector((
					BEM : '.dropdown__label',
					SMACCS : '.dropdown-label'
				))} {
					padding: s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
				}
				#{s-selector((
					BEM : '.dropdown__item',
					SMACCS : '.dropdown-item'
				))} > a {
					padding: s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
				}
			}
		}	
	}
}

@mixin s-dropup(
	$props : ()
) {
	// init dropdown
	@include s-dropdown-init();
	
	// pass in component context
	@include s-component-context('dropdown') {

		// parse properties
		$props : s-parse-properties($props, (
			sizes : map-keys(sugar('settings.sizes'))
		));

		// get variables
		$sizes : map-get-or($props, sizes, default);
		
		// base
		.dropup {
			@extend %s-dropdown-bare;
			@extend %s-dropdown-style;

			&:hover,
			&.active,
			#{s-selector((
				BEM : '&.dropdown--active',
				SMACCS : '&.is-active'
			))} {
				#{s-selector((
					BEM : '.dropdown__menu',
					SMACCS : '.dropdown-menu'
				))} {
					top: auto;
					bottom: 100%;
				}
			}
		}

		// generate each sizes
		@each $size in $sizes {
			// extend dropdown
			#{s-selector((
				BEM : '.dropup.dropdown--#{$size}',
				SMACCS : 'dropup.dropdown-#{$size}'
			))} {
				#{s-selector((
					BEM : '.dropdown__menu',
					SMACCS : '.dropdown-menu'
				))} {
					border-radius: s-look-and-feel(border-radius, $size);
				}
				#{s-selector((
					BEM : '.dropdown__label',
					SMACCS : '.dropdown-label'
				))} {
					padding: s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
				}
				#{s-selector((
					BEM : '.dropdown__item',
					SMACCS : '.dropdown-item'
				))} > a {
					padding: s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
				}
			}
		}	
	}	
}