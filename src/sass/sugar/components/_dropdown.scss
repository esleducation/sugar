@include s-component-setup((
	dropdown : (

	)
));

$_s-dropdown-inited : false;
@mixin s-dropdown-init() {
	@if not $_s-dropdown-inited {
		$_s-dropdown-inited : true !global;
		%s-dropdown-bare {
			position: relative;

			&:hover,
			&.active {
				z-index:1;

				.dropdown__menu {
					visibility: visible;
					opacity: 1;
					pointer-events: all;
				}
			}

			.dropdown__menu {
				visibility: hidden;
				opacity: 0;
				position: absolute;
				top: 100%;
				pointer-events: none;
				@include s-transition();
			}
			.dropdown__item {
				white-space: nowrap;
			}
		}

		%s-dropup-bare {
			@extend %s-dropdown-bare;

			.dropdown__menu {
				top: auto;
				bottom: 100%;
			}
		}

		%s-dropdown-style {
			.dropdown__label {
				// padding : s-look-and-feel(padding-vertical, medium) s-look-and-feel(padding-horizontal, medium);
			}

			.dropdown__menu {
				background: white;
				border: 1px solid s-color(default, -opacity .2);
				box-shadow: s-color(default, -opacity .3) 0 10px 10px;
				@include s-transition();
			}

			.dropdown__item {
				border-top: solid s-rem(1px) s-color(default, -opacity .2);

				&:hover,
				&.active {
					background-color : s-color(default, -opacity .1);
				}

				> a {
					color : s-color(link);
					display: block;
					width: 100%;
				}
			}
		}
	}
}

@mixin s-dropdown(
	$sizes : sugar('settings.components.dropdown.generate.sizes'),
	$colors : sugar('settings.components.dropdown.generate.colors')
) {
	// init dropdown
	@include s-dropdown-init();
	
	@if $_sugar-test-arguments {
		$sizes : s-test-argument('s-nav-tabs','sizes',map-keys(sugar('settings.sizes')),$sizes);
		$colors : s-test-argument('s-nav-tabs','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in component context
	@include s-component-context('dropdown') {
		
		// base
		.dropdown {
			@extend %s-dropdown-bare;
			@extend %s-dropdown-style;

			&:hover,
			&.active {
				.dropdown__menu {
					top: 100%;
				}
			}
		}

		// generate each sizes
		@each $size in $sizes {
			// extend dropdown
			$sel : '.dropdown';
			@if $size != default {
				$sel : '.dropdown.dropdown--#{$size}';
			}
			#{$sel} {
				.dropdown__menu {
					border-radius: s-look-and-feel(border-radius, $size);
				}
				.dropdown__label {
					padding: s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
				}
				.dropdown__item > a {
					padding: s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
				}
			}
		}	
	}
}

@mixin s-dropup(
	$props : ()
) {
	// init dropdown
	@include s-dropdown-init();
	
	// pass in component context
	@include s-component-context('dropdown') {

		// parse properties
		$props : s-parse-properties($props, (
			sizes : map-keys(sugar('settings.sizes'))
		));

		// get variables
		$sizes : map-get-or($props, sizes, default);
		
		// base
		.dropup {
			@extend %s-dropdown-bare;
			@extend %s-dropdown-style;

			&:hover,
			&.active {
				.dropdown__menu {
					top: auto;
					bottom: 100%;
				}
			}
		}

		// generate each sizes
		@each $size in $sizes {
			// extend dropdown
			$sel : '.dropup';
			@if $size != default {
				$sel : '.dropup.dropdown--#{$size}';
			}
			#{$sel} {
				.dropdown__menu {
					border-radius: s-look-and-feel(border-radius, $size);
				}
				.dropdown__label {
					padding: s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
				}
				.dropdown__item > a {
					padding: s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
				}
			}
		}	
	}	
}