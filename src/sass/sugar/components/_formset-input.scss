@mixin s-formset-input-field(
	$color : null
) {
	@include s-formset-init();
	@extend %s-formset-input-bare;
	@extend %s-formset-input-style;
	@include s-formset-input-size();
	@if ($color) {
		@include s-formset-input-color($color);
	}
}

@mixin s-formset-input(
	$colors : sugar('settings.components.formset.generate.colors')
) {
	@include s-formset-input-bare();
	@include s-formset-input-style($colors);
}

// what to exclude from styling
$not : ':not([type="checkbox"]):not([type="radio"]):not(.noUi-target)';

@mixin s-formset-input-bare(
) {
	@include s-formset-init();

	// pass in the component context
	@include s-component-context('formset') {

		input.input#{$not} {
			@extend %s-formset-input-bare;
		}
		textarea.input {
			height: auto !important;
		}

		// input styling
		input.input#{$not} {
			// set input styling
			@include s-formset-input-size();

			// vertical rhythme
			&, & ~Â span {
				@include s-vertical-rhythme {
					margin-bottom: 1rem;
				}
			}
		}
		// textarea styling
		textarea.input {
			@include s-formset-textarea-size();

			// vertical rhythme
			@include s-vertical-rhythme {
				margin-bottom:1rem;
			}
		}
	}
}
@mixin s-formset-input-style(
	$colors : sugar('settings.components.formset.generate.colors')
) {
	// parse properties
	@if $_sugar-test-arguments {
		$colors : s-test-argument('s-formset','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	@include s-component-context('formset') {

		input.input#{$not} {
			@extend %s-formset-input-style;
		}
		select.input {
			@extend %s-formset-select-style;
		}

		// generate each colors
		@each $color in $colors {

			// input styling
			#{s-selector((
				BEM : (
					'.input--#{$color}#{$not}',
					'.color--#{$color} .input#{$not}'
				),
				SMACCS : (
					'.input-#{$color}#{$not}',
					'.color-#{$color} .input#{$not}'
				)
			))} {
				@include s-formset-input-color($color);

				& ~ .input-reply--#{$color} {
					display: block;
				}
			}

			// select styling
			#{s-selector((
				BEM : (
					'select.input--#{$color}',
					'.input--#{$color}.s-select',
					'.color--#{$color} select.input'
				),
				SMACCS : (
					'select.input-#{$color}',
					'.input-#{$color}.s-select',
					'.color--#{$color} select.input'
				)
			))} {
				@include s-formset-select-color($color);
			}
		}
	}
}
@mixin s-formset-input-size() {
	font-size : s-lnf(font-size);
	// border-radius: s-lnf(border-radius, $size);
	padding : s-lnf(padding-horizontal) s-lnf(padding-vertical);
	height: s-lnf(font-size) + s-lnf(padding-horizontal) * 2;
}
@mixin s-formset-input-color($color) {
	border-color: s-color($color, -opacity .1);
	border-bottom-color: s-color($color, -opacity .3);

	[data-input-activator]:focus ~ &,
	[data-input-activator]:checked ~ &,
	&:hover:not(:disabled):not(.input--disabled):not(.is-disabled),
	&:focus:not(:disabled):not(.input--disabled):not(.is-disabled),
	&.active:not(:disabled):not(.input--disabled):not(.is-disabled) {
		border-bottom-color: s-color($color, -opacity .6);
		@include s-depth(3, s-color($color, -opacity .3));
	}
	[data-input-activator]:focus ~ &,
	[data-input-activator]:checked ~ &,
	&:focus:not(:disabled):not(.input--disabled):not(.is-disabled),
	&.active:not(:disabled):not(.input--disabled):not(.is-disabled) {
		border-left-color: s-color($color, -opacity .6);
	}
}
