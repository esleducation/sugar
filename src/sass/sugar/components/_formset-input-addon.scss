@mixin s-formset-input-addon-bare(
	$sizes : sugar('settings.components.formset.generate.sizes')
) {
	@include s-formset-init();
	
	// parse properties
	@if $_sugar-test-arguments {
		$sizes : s-test-argument('s-formset','sizes',map-keys(sugar('settings.sizes')),$sizes);
	}

	// pass in the component context
	@include s-component-context('formset') {

		// base
		.input-addon {
			@extend %s-formset-input-bare;
			pointer-events: none;
		}

		@each $size in $sizes {

			#{s-selector((
				BEM : (
					'.input-addon--#{$size}',
					'.size--#{$size} .input-addon',
				),
				SMACCS : (
					'.input-addon-#{$size}',
					'.size-#{$size} .input-addon'
				)
			))} {
				// set input styling
				@include s-formset-input-size($size);

				@include s-vertical-rhythme {
					margin-bottom: 1rem;
				}
			}

		}
	}
}

@mixin s-formset-input-addon-style(
	$colors : sugar('settings.components.formset.generate.colors')
) {
	// parse properties
	@if $_sugar-test-arguments {
		$colors : s-test-argument('s-formset','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	@include s-component-context('formset') {

		@each $color in $colors {

			#{s-selector((
				BEM : (
					'.input-addon--#{$color}',
					'.color--#{$color} .input-addon'
				),
				SMACCS : (
					'.input-addon-#{$color}',
					'.color-#{$color}Â .input-addon'
				)
			))} {
				@include s-formset-input-color($color);

				& ~ .input-reply--#{$color} {
					display: block;
				}
			}
			#{s-selector((
				BEM : (
					'.input-addon--#{$color}',
					'.color--#{$color} .input-addon'
				),
				SMACCS : (
					'.input-addon-#{$color}',
					'.color-#{$color} .input-addon'
				)
			))} {
				background-color: s-color($color, -opacity .08);
				color : s-color($color, -darken 20%);
			}
		}

	}
}