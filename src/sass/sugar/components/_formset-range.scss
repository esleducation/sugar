$_s-formset-range-inited : false;
@mixin s-formset-range-init() {
	@if not $_s-formset-range-inited {
		$_s-formset-range-inited : true ! global;

		/* Functional styling;
		 * These styles are required for noUiSlider to function.
		 * You don't need to change these rules to apply your design.
		 */
		.noUi-target,
		.noUi-target * {
			-webkit-touch-callout: none;
			-webkit-user-select: none;
			touch-action: none;
			user-select: none;
			box-sizing: border-box;
		}
		.noUi-target {
			position: relative;
			direction: ltr;
		}
		.noUi-base {
			width: 100%;
			height: 100%;
			position: relative;
			z-index: 1; /* Fix 401 */


		}
		.noUi-background {
			&:before {
				content:'';
				display:block;
				position:absolute;
				top:50%; left:0;
				width:100%; height:0.1em;
				border-radius:0.05em;
			}
		}
		.noUi-origin {
			position: absolute;
			right: 0;
			top: 0;
			left: 0;
			bottom: 0;
		}
		.noUi-handle {
			position: relative;
			z-index: 1;
			transform-origin:50% 50%;
		}
		.noUi-stacking .noUi-handle {
		/* This class is applied to the lower origin when
		   its values is > 50%. */
			z-index: 10;
		}
		.noUi-state-drag * {
			cursor: inherit !important;
		}

		/* Painting and performance;
		 * Browsers can paint handles in their own layer.
		 */
		.noUi-base,
		.noUi-handle {
			transform: translate3d(0,0,0);
		}

		/* Handles and cursors;
		 */
		.noUi-draggable {
			cursor: w-resize;
		}
		.noUi-vertical .noUi-draggable {
			cursor: n-resize;
		}

		.noUi-handle__value {
			position:absolute;
			top:50%; left:50%;
			@include s-translate(-50%, -50%);
		}
	}
}

@mixin s-formset-range(
	$colors : sugar('settings.components.formset.generate.colors')
) {
	@include s-formset-range-bare();
	@include s-formset-range-style($colors);
}

@mixin s-formset-range-bare(
) {
	@include s-formset-range-init();

	$h : 1em;

	// pass in the component context
	@include s-component-context('formset') {

		.s-range-container {
			padding-top:.5em;
			padding-bottom:.5em;
		}

		@include s-formset-range-style-container() {
			margin-left: $h;
			margin-right: $h;
			cursor:pointer;

			&.noUi-horizontal {
				height : $h;
			}
			&.noUi-vertical {
				width : $h;
			}
		}

		@include s-formset-range-style-tooltip() {
			display: inline-block;
			pointer-events:none;
			font-size:1rem !important;
			font-size:s-lnf(font-size);
			padding:s-lnf(padding-horizontal) s-lnf(padding-vertical);
			border-radius: s-lnf(border-radius);
		}

		@include s-formset-range-style-handle() {
			width : $h * 2;
			height : $h * 2;
			border-radius: 50%;
			@include s-translate(-50%, -25%);
		}
		@include s-formset-range-style-handle(active) {
			width: $h;
			height: $h;
			@include s-translate(-50%, 0);
		}

		@include s-formset-range-style-handle-value() {
			font-size:s-lnf(font-size) / 2;
		}
		@include s-formset-range-style-handle-value(active) {
			font-size:0;
		}
	}
}

@mixin s-formset-range-style-container(
	$state : null
) {
	@if not $state {
		.noUi-target {
			@content;
		}
	} @else if $state == hover {
		.noUi-target:hover {
			@content;
		}
	}
}
@mixin s-formset-range-style-connect(
	$state : null
) {
	@if not $state {
		.noUi-connect {
			@content;
		}
		.noUi-target.noUi-connect {
			.noUi-base {
				@content;
			}
		}
	} @else if $state == hover {
		.noUi-target:hover .noUi-connect {
			@content;
		}
		.noUi-target:hover.noUi-connect {
			.noUi-base {
				@content;
			}
		}
	}
}
@mixin s-formset-range-style-handle(
	$state : null
) {
	@if not $state {
		.noUi-handle {
			@content;
		}
	} @else if $state == hover {
		.noUi-handle:hover {
			@content;
		}
	} @else if $state == active {
		.noUi-active {
			@content;
		}
	}
}
@mixin s-formset-range-style-handle-value(
	$state : null
) {
	@if not $state {
		.noUi-handle__value {
			@content;
		}
	} @else if $state == hover {
		.noUi-handle:hover .noUi-handle__value {
			@content;
		}
	} @else if $state == active {
		.noUi-active .noUi-handle__value {
			@content;
		}
	}
}
@mixin s-formset-range-style-base(
	$state : null
) {
	@if not $state {
		.noUi-target.noUi-background,
		.noUi-background {
			@content;
		}
	} @else if $state == hover {
		.noUi-target:hover.noUi-background,
		.noUi-target:hover .noUi-background {
			@content;
		}
	}
}
@mixin s-formset-range-style-tooltip(
	$state : null
) {
	@if not $state {
		.noUi-handle .tooltip {
			@content;
		}
	} @else if $state == hover {
		.noUi-handle:hover .tooltip {
			@content;
		}
	} @else if $state == active {
		.noUi-active .tooltip {
			@content;
		}
	}
}

@mixin s-formset-range-style(
	$colors : sugar('settings.components.formset.generate.colors')
) {
	@include s-formset-range-init();

	// parse properties
	@if $_sugar-test-arguments {
		$colors : s-test-argument('s-formset-range-style','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	@include s-component-context('formset') {

		@include s-formset-range-style-base() {
			background:white;
			&:before {
				@include s-transition(fast background-color);
			}
		}

		@include s-formset-range-style-connect() {
			@include s-transition(fast background-color);
		}

		@include s-formset-range-style-handle() {
			@include s-transition(fast);

			&:before {
				content:'';
				display:block;
				width:100%;
				height:100%;
				position:absolute;
				top:50%; left:50%;
				@include s-translate(-50%,-50%);
				border-radius: 50%;
				@include s-transition(fast);
			}
		}
		@include s-formset-range-style-handle(hover) {
			&:before {
				width:150%;
				height:150%;
			}
		}
		@include s-formset-range-style-handle(active) {
			&:before {
				width:400% !important;
				height:400% !important;
			}
		}

		@include s-formset-range-style-handle-value() {
			text-align:center;
			font-weight:bold;
			color:white;
			position:relative;
			@include s-transition(fast);
		}

		@include s-formset-range-style-tooltip() {
			color: white;
			position: absolute !important;
			top:0; left:50%;
			@include s-translate(-50%,-100%);
			opacity: 0;
			@include s-transition(fast);
		}
		@include s-formset-range-style-tooltip(active) {
			opacity:1;
			top:-15px;
		}

		.noUi-state-tap .noUi-origin {
			@include s-transition(left fast, top fast);
		}

		@each $color in $colors {

			#{s-selector((
				BEM : (
					'.input--#{$color}',
					'.color--#{$color} .input'
				),
				SMACCS : (
					'.input-#{$color}',
					'.color-#{$color} .input'
				)
			))} {
				border-color: s-color($color, -opacity .1);
				border-bottom-color: s-color($color, -opacity .3);

				@include s-formset-range-style-connect() {
					background-color: s-color($color, -opacity .1);
				}
				@include s-formset-range-style-connect(hover) {
					background-color: s-color($color, -opacity .3);
				}

				@include s-formset-range-style-base() {
					&:before {
						background-color: s-color($color, -opacity .1);
					}
				}
				@include s-formset-range-style-base(hover) {
					&:before {
						background-color: s-color($color, -opacity .3);
					}
				}

				@include s-formset-range-style-handle() {
					background-color: s-color($color);

					&:before {
						background-color: s-color($color, -opacity .3);
					}
				}
				@include s-formset-range-style-handle(hover) {
					background-color: s-color($color, -darken 10%);
				}
				@include s-formset-range-style-handle(active) {
					background-color: s-color($color, -darken 20%) !important;
					@include s-depth(3, s-color($color, -opacity .3));

					&:before {
						background-color: s-color($color, -opacity .2);
					}
				}

				@include s-formset-range-style-handle-value(active) {
					color: s-color($color, -darken 20%);
				}

				@include s-formset-range-style-tooltip() {
					@include s-bubble(
						$side : bottom,
						$align : center,
						$size : 5px,
						$color : #fff,
						$arrow-offset : 0,
						$border-width : 0,
						$border-color : null
					);
					@include s-depth(3, s-color($color, -opacity .3));
					color: s-color($color);
				}
			}
		}
	}
}
