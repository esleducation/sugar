$_s-formset-radiobox-inited : false;
@mixin s-formset-radiobox-init() {
	
	@if not $_s-formset-radiobox-inited {
		$_s-formset-radiobox-inited : true !global;
		%s-formset-checkbox-bare {
			position: absolute;
			left : -999999px;

			& + .s-radiobox {
				display: inline-block;
				position: relative;
				cursor: pointer;
				@include s-transition(fast);
				vertical-align: sub;
				@include s-translate(0,0,0);

				&:before {
					border-width: s-rem(2px);
					border-style: solid;
					content:'';
					display: block;
					position: absolute;
					transform:scaleX(1) scaleY(1) rotate(360deg);
					width: 100%; height: 100%;
					@include s-transition(fast);
				}
				&:after {
					content:'';
					display: block;
					position: absolute;
					transform : scaleX(0) scaleY(0) rotate(-360deg);
					width: 100%; height: 100%;
					@include s-transition(fast);
					background-size: 100% 100%;
					background-position: 50% 50%;
					background-repeat: no-repeat;
				}
			}
			&:checked + .s-radiobox:before {
				transform:scaleX(0) scaleY(0) rotate(0deg);
			}
			&:checked + .s-radiobox:after {
				transform:scaleX(1) scaleY(1) rotate(0deg);
			}

			#{s-selector((
				BEM : (
					'&.checkmark--inside',
					'&.checkmark--fill'
				),
				SMACCS : (
					'&.checkmark-inside',
					'&.checkmark-fill'
				)
			))} {
				& + .s-radiobox:after {
					background-size: 60% 60%;
					background-position: 49% 57% !important;
				}
			}

			#{s-selector((
				BEM : '&.checkmark--inside',
				SMACCS : '&.checkmark-inside'
			))} {
				& + .s-radiobox:before {
					transform: scaleX(1) scaleY(1) rotate(0) !important;
				}
			}

		}
		%s-formset-radio-bare {
			@extend %s-formset-checkbox-bare;
			
			#{s-selector((
				BEM : (
					'&.checkmark--inside',
					'&.checkmark--fill'
				),
				SMACCS : (
					'&.checkmark-inside',
					'&.checkmark-fill'
				)
			))} {
				& + .s-radiobox:after {
					background-position: 49% 56% !important;
				}
			}

			& + .s-radiobox:before,
			& + .s-radiobox:after {
				border-radius:50% !important;
			}
		}
	}
}

@mixin s-formset-radiobox(
	$sizes : sugar('settings.components.formset.generate.sizes'),
	$colors : sugar('settings.components.formset.generate.colors')
) {
	// init form
	@include s-formset-radiobox-init();
	
	// parse properties
	@if $_sugar-test-arguments {
		$sizes : s-test-argument('s-formset-radiobox','sizes',map-keys(sugar('settings.sizes')),$sizes);
		$colors : s-test-argument('s-formset-radiobox','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	@include s-component-context('formset') {

		// get variables
		$form-scope-class : sugar('settings.scope-class');

		// base
		input[data-s-radiobox] + .s-radiobox:after {
			background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A#{str-replace("#{s-color(success)}","#","%23")};}</style><path d="M432 48L192 288 80 176 0 256l192 192 320-320"/></svg>');
		}
		input[data-s-radiobox].checkmark--fill + .s-radiobox:after {
			background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A#{str-replace("#{s-color(#fff)}","#","%23")};}</style><path d="M432 48L192 288 80 176 0 256l192 192 320-320"/></svg>');
			background-color: s-color(success);
		}
		input[data-s-radiobox][type="checkbox"] {
			@extend %s-formset-checkbox-bare;
		}
		input[data-s-radiobox][type="radio"] {
			@extend %s-formset-radio-bare;
		}

		#{s-selector((
			BEM : (
				'.label .label .s-radiobox'
			),
			SMACCS : (
				'.label .label .s-radiobox'
			)
		))} {
			margin-top:s-rem(1);
		}

		// generate each sizes
		@each $size in $sizes {
			#{s-selector((
				BEM : (
					'input[data-s-radiobox].input--#{$size}'
				),
				SMACCS : (
					'input[data-s-radiobox].input-#{$size}'
				)
			))} {
				height: s-look-and-feel(font-size, $size);

				$br : s-look-and-feel(border-radius, $size);
				$fs : s-render-round-even(s-look-and-feel(font-size, $size) * 1.3);
				& + .s-radiobox {
					width: $fs;
					height: $fs;

					&:before,
					&:after {
						border-radius: $br;
					}
				}

				@include s-vertical-rhythme(
					$font-size : $fs,
					$line-height: $fs,
					$margin-bottom : 2,
					$margin-top : 0,
					$border-bottom-width: s-rem(2px),
					$border-top-width : s-rem(2px)
				);

				label + & + .s-radiobox, .label + & + .s-radiobox {
					margin-left: s-look-and-feel(padding-vertical, $size);
				}
			}

			// label styling
			// #{s-selector((
			// 	BEM : (
			// 		'.label--#{$size}'
			// 	),
			// 	SMACCS : (
			// 		'.label-#{$size}'
			// 	)
			// ))}Â {
			// 	.s-radiobox + & {
			// 		padding-left: s-look-and-feel(padding-vertical, $size) * .5;
			// 		padding-right: s-look-and-feel(padding-vertical, $size);
			// 	}
			// }
		}
		@each $color in $colors {

			#{s-selector((
				BEM : (
					'input[data-s-radiobox]'
				),
				SMACCS : (
					'input[data-s-radiobox]'
				)
			))} {
				&.checkmark--#{$color}:not(.checkmark--fill) + .s-radiobox:after {
					background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A#{str-replace("#{s-color($color)}","#","%23")};}</style><path d="M432 48L192 288 80 176 0 256l192 192 320-320"/></svg>');
				}
				&.checkmark--fill.checkmark--#{$color} + .s-radiobox:after {
					background-color : s-color($color);
				}
			}

			#{s-selector((
				BEM : (
					'input[data-s-radiobox].input--#{$color}'
				),
				SMACCS : (
					'input[data-s-radiobox].input-#{$color}'
				)
			))} {
				& + .s-radiobox {
					&:before {
						border-color: s-color($color, -opacity .3);
					}
					
				}
				#{s-selector((
					BEM : (
						'&.input--hover',
						'&.input--active'
					),
					SMACCS : (
						'&.is-hover',
						'&.is-active'
					)
				))},
				&:hover {
					& + .s-radiobox {
						&:before {
							border-color: s-color($color, -opacity .6);
						}
					}
				}
				&:focus {
					& + .s-radiobox {
						&:before {
							@include s-filter(box-shadow(s-color($color, -opacity .3) 0 5px s-rem(5px)));
						}
					}	
				}
				&:checked {
					& + .s-radiobox {
						&:before {
							border-color: s-color($color, -opacity .3);
						}
					}
				}
			}
		}

		// error fields
		#{s-selector((
			BEM : (
				'.error input[data-s-radiobox]'
			),
			SMACCS : (
				'.error input[data-s-radiobox]'
			)
		))} {
			& + .s-radiobox {
				&:before {
					border-color: s-color(error, -opacity .3);
				}
				
			}
		}
	}
}