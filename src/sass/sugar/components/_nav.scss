@include s-component-setup((
	nav : (
		generate : (
			colors : default primary secondary success warning error info
		)
	)
));


$_s-nav-inited : false;
@mixin s-nav-init() {
	@if not $_s-nav-inited {
		$_s-nav-inited : true !global;
		%s-nav-bare {
			list-style: none;
			padding: 0;
			margin: 0;
			user-select:none;
		}
	}
}

@mixin s-nav-inline-bare() {
	// init nav
	@include s-nav-init();

	// pass in component context
	@include s-component-context('nav') {
		#{s-selector((
			BEM : '.nav.nav--inline',
			SMACCS : '.nav.nav-inline'
		))} {
			@extend %s-nav-bare;

			> li,
			> #{s-selector((
				BEM : '.nav__item',
				SMACCS : '.nav-item'
			))} {
				display: inline-block;
				padding-left : s-lnf(padding-horizontal);
				padding-right : s-lnf(padding-horizontal);

				&:last-of-type {
					padding-right: 0 !important;
				}
				&:first-of-type {
					padding-left: 0 !important;
				}
			}
		}
	}
}

@mixin s-nav-tabs(
	$colors : sugar('settings.components.nav.generate.colors')
) {
	@include s-nav-tabs-bare();
	@include s-nav-tabs-style($colors);
}

@mixin s-nav-tabs-bare() {
	@include s-nav-init();

	@include s-component-context('nav') {

		// base
		#{s-selector((
			BEM : '.nav.nav--tabs',
			SMACCS : '.nav.nav-tabs'
		))} {
			@extend %s-nav-bare;

			> li,
			> #{s-selector((
				BEM : '.nav__item',
				SMACCS : '.nav-item'
			))} {

				font-size : s-lnf(font-size);
				@include s-corner(
					$top-left : s-lnf(border-radius),
					$top-right : s-lnf(border-radius)
				);
				// margin-right: s-space(smaller);
				padding : s-lnf(padding-vertical) s-lnf(padding-horizontal);
				float: left;
				cursor: pointer;

				&.disabled,
				#{s-selector((
					BEM : '&.nav__item--disabled',
					SMACCS : '&.is-disabled'
				))} {
					pointer-events: none;
					opacity: .5;
					cursor: not-allowed;
				}
			}
		}

	}
}

@mixin s-nav-tabs-style(
	$colors : sugar('settings.components.nav.generate.colors')
) {
	// init nav
	@include s-nav-init();

	@if $_sugar-test-arguments {
		// $colors : s-test-argument('s-nav-tabs','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in component context
	@include s-component-context('nav') {

		// base
		#{s-selector((
			BEM : '.nav.nav--tabs',
			SMACCS : '.nav.nav-tabs'
		))} {
			@extend %s-nav-bare;

			> li,
			> #{s-selector((
				BEM : '.nav__item',
				SMACCS : '.nav-item'
			))} {
				margin-bottom: -1px;
			}
		}

		// generate each colors
		@each $color in $colors {

			#{s-selector((
				BEM : '.nav--tabs.nav--#{$color}',
				SMACCS : '.nav--tabs.nav-#{$color}'
			))} {
				border-bottom: 1px solid s-color($color, -opacity .2);
				@include s-clearfix;

				> li,
				> #{s-selector((
					BEM : '.nav__item',
					SMACCS : '.nav-item'
				))} {
					border: 1px solid s-color($color, -opacity .1);
					color : s-color($color);

					#{s-selector((
						BEM : '&.hover',
						SMACCS : '&.is-hover'
					))},
					&:hover {
						background-color : s-color($color, -opacity .1);
					}
					#{s-selector((
						BEM : '&.active',
						SMACCS : '&.is-active'
					))} {
						background-color : s-color($color);
						border-color: s-color($color);
						@if lightness(s-color($color)) > 70 {
							color : s-color($color, -darken 30%);
						} @else {
							color : white;
						}
					}
				}
			}
		}
	}
}
