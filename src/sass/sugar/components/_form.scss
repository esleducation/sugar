@include s-component-setup((
	form : (
		colors : default primary secondary success warning error info,
		sizes : default
	)
));

$_s-form-inited : false;
@mixin s-form-init() {
	@if not $_s-form-inited {
		$_s-form-inited : true !global;
		%s-form-input-bare {
			display: inline-block;
			border: s-color(default, -opacity .3) 1px solid;
			background: white;
			@include s-font(sugar('settings.typo.font-family'));
			-webkit-appearance: none;
			line-height: 1;
			outline : none;
			width:100%;
			@include s-transition();
		}
		%s-form-select-bare {
			background-size: 9px 6px;
			background-position: right center;
			background-origin: content-box;
			background-repeat: no-repeat;
		}
		%s-form-fieldset-bare {
			border-width: s-rem(1px);
			border-style: solid;
			display:block;
			width: 100%;
		}
		%s-form-checkbox-bare {
			position: relative;
			left : -999999px;

			&:after,
			&:before {
				content:'';
				display: inline-block;
				position: absolute;
				left: 999999px;
				// left: 20px;
				bottom:0;
				border-width: s-rem(2px);
				border-style : solid;
				cursor: pointer;
			}
			&:after {
				border: none !important;
			}
		}
		%s-form-radio-bare {
			position: relative;
			left : -999999px;

			&:after,
			&:before {
				content:'';
				display: inline-block;
				position: absolute;
				left: 999999px;
				bottom:0;
				border-radius:50% !important;
				border-width: s-rem(2px);
				border-style : solid;
				cursor:pointer;
			}
			&:after {
				border: none !important;
			}
		}
	}
}

@mixin s-form-fieldset(
	$props : ()
) {
	// init form
	@include s-form-init();

	// parse properties
	$props : s-parse-properties($props, (
		sizes : map-keys(sugar('settings.sizes')),
		colors : list-color
	));

	// get variables
	$sizes : map-get-or($props, sizes, sugar('settings.form.sizes'));
	$colors : map-get-or($props, colors, sugar('settings.form.colors'));

	fieldset {
		@extend %s-form-fieldset-bare;
	}

	// generate each sizes
	@each $size in $sizes {
		// input styling
		#{s-selector((
			BEM : 'fieldset.#{$size}, .fieldset--#{$size}'
		))} {
			border-radius: s-look-and-feel(border-radius, $size);
			padding : s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
			display: inline-block;

			> legend {
				margin-left: s-look-and-feel(padding-vertical, $size) / 1.5 * -1;
				font-size : s-look-and-feel(font-size, $size);
				padding : s-look-and-feel(padding-horizontal, $size) / 1.5 s-look-and-feel(padding-horizontal, $size) / 1.5;
				border-radius: s-look-and-feel(border-radius, $size);
			}
		}
	}

	// generate each colors
	@each $color in $colors {
		
		#{s-selector((
			BEM : 'fieldset.#{$color}, .fieldset--#{$color}',
			SMACCS : 'fieldset.#{$color}, .fieldset-#{$color}'
		))} {
			border-color: s-color($color, -opacity .3);
			background: s-color($color, -opacity .05);

			&:hover,
			&.active {
				border-color: s-color($color, -opacity .6);
			}

			> legend {
				color: s-color($color);
				border:s-rem(1px) solid s-color($color, -opacity .3);
				background: white;
			}
		}
	}
}

@mixin s-form(
	$props : ()
) {
	// init form
	@include s-form-init();
	
	// parse properties
	$props : s-parse-properties($props, (
		sizes : map-keys(sugar('settings.sizes')),
		colors : list-color
	));

	// get variables
	$sizes : map-get-or($props, sizes, sugar('settings.form.sizes'));
	$colors : map-get-or($props, colors, sugar('settings.form.colors'));

	$vertical-rhythme : sugar('settings.vertical-rhythme.scope-class');
	$typeset : sugar('settings.typeset.scope-class');

	// base
	input:not([type="checkbox"]):not([type="radio"]),
	.input:not([type="checkbox"]):not([type="radio"]),
	textarea, .textarea,
	select, .select,
	[class*="postfix"] {
		@extend %s-form-input-bare;
	}
	textarea, .textarea {
		height: auto !important;
	}
	input[type="checkbox"],
	.input[type="checkbox"] {
		@extend %s-form-checkbox-bare;
	}
	input[type="radio"],
	.input[type="radio"] {
		@extend %s-form-radio-bare;
	}


	// generate each sizes
	@each $size in $sizes {
		// input styling
		#{s-selector((
			BEM : 'select.#{$size}, .select--#{$size}, textarea.#{$size}, .textarea--#{$size}, input:not([type="checkbox"]):not([type="radio"]).#{$size}, .input--#{$size}, .input-postfix--#{$size}',
			SMACCS : 'select.#{$size}, .select-#{$size}, textarea.#{$size}, .textarea-#{$size}, input:not([type="checkbox"]):not([type="radio"]).#{$size}, .input-#{$size}, .input-postfix-#{$size}'
		))} {
			font-size : s-look-and-feel(font-size, $size);
			border-radius: s-look-and-feel(border-radius, $size);
			padding : s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
			display: inline-block;
			height: s-look-and-feel(font-size, $size) + s-look-and-feel(padding-vertical, $size) * 2;

			@include s-vertical-rhythme((
				s-font : s-look-and-feel(font-size, $size),
				line-height: s-look-and-feel(font-size, $size),
				padding-top : s-look-and-feel(padding-vertical, $size),
				padding-bottom : s-look-and-feel(padding-vertical, $size),
				margin-bottom : 1,
				margin-top : 0,
				border-bottom-width: s-rem(1px),
				border-top-width : s-rem(1px),
				calculate-height : true
			));

		}

		// #{s-selector((
		// 	BEM : 'select.#{$size}, .select--#{$size}, textarea.#{$size}, .textarea--#{$size}, input.#{$size}, .input--#{$size}, .input-postfix--#{$size}',
		// 	SMACCS : 'select.#{$size}, .select-#{$size}, textarea.#{$size}, .textarea-#{$size}, input.#{$size}, .input-#{$size}, .input-postfix-#{$size}'
		// ))} {
			
		// }

		// label styling
		#{s-selector((
			BEM : 'label.#{$size}, .label--#{$size}',
			SMACCS : 'label.#{$size}, .label-#{$size}'
		))} {
			font-size: s-look-and-feel(font-size, $size);
			display: inline-block;

			@include s-vertical-rhythme((
				s-font : s-look-and-feel(font-size, $size),
				line-height: s-look-and-feel(font-size, $size),
				margin-bottom : 1,
				margin-top : 0
			));

			input[type="checkbox"] + &,
			input[type="radio"] + & {
				padding-left: s-look-and-feel(padding-vertical, $size);
				padding-right: s-look-and-feel(padding-vertical, $size) * 1.5;
			}
		}
	}

	// generate each sizes
	@each $size in $sizes {
		#{s-selector((
			BEM : 'input[type="checkbox"].#{$size}, .input--#{$size}[type="checkbox"], input[type="radio"].#{$size}, .input--#{$size}[type="radio"]',
			SMACCS : 'input[type="checkbox"].#{$size}, .input-#{$size}[type="checkbox"], input[type="radio"].#{$size}, .input-#{$size}[type="radio"]'
		))} {
			height: s-look-and-feel(font-size, $size);

			&:before {
				width: s-look-and-feel(font-size, $size);
				height: s-look-and-feel(font-size, $size);
				border-radius: s-look-and-feel(border-radius, $size);
			}
			// &:after {
			// 	width: s-look-and-feel(font-size, $size) / 2;
			// 	height: s-look-and-feel(font-size, $size) / 2;
			// 	margin-bottom: s-look-and-feel(font-size, $size) / 2;
			// 	margin-left: s-look-and-feel(font-size, $size) / 2;
			// 	@include s-translate(-50% 50%);
			// 	border-radius: s-look-and-feel(border-radius, $size);
			// }

			@include s-vertical-rhythme((
				s-font : s-look-and-feel(font-size, $size),
				line-height: s-look-and-feel(font-size, $size),
				margin-bottom : 2,
				margin-top : 0,
				border-bottom-width: s-rem(2px),
				border-top-width : s-rem(2px)
			));

			label + &, [class*="label"] + & {
				margin-left: s-look-and-feel(padding-vertical, $size) * 1.5;
			}
		}
	}
	@each $color in $colors {
		#{s-selector((
			BEM : 'input[type="checkbox"].#{$color}, .input--#{$color}[type="checkbox"], input[type="radio"].#{$color}, .input--#{$color}[type="radio"]',
			SMACCS : 'input[type="checkbox"].#{$color}, .input-#{$color}[type="checkbox"], input[type="radio"].#{$color}, .input-#{$color}[type="radio"]'
		))} {
			&:after {
				background-color: s-color($color);
			}
			&:before {
				border-color: s-color($color, -opacity .3);
			}
			&:hover {
				// &:after {
				// 	background-color: s-color($color, -opacity .6);
				// }
				&:before {
					border-color: s-color($color, -opacity .6);
					background-color: s-color($color, -opacity .3);
				}
			}
			&:checked {
				&:before {
					background-color: s-color($color, -opacity .9);
					border-color: s-color($color);
				}
			}
		}
	}

	// generate each colors
	@each $color in $colors {
		
		#{s-selector((
			BEM : 'select.#{$color}, .select--#{$color}, textarea.#{$color}, .textarea--#{$color}, input:not([type="checkbox"]):not([type="radio"]).#{$color}, .input--#{$color}, .input-postfix--#{$color}',
			SMACCS : 'select.#{$color}, .select-#{$color}, textarea.#{$color}, .textarea--#{$color}, input:not([type="checkbox"]):not([type="radio"]).#{$color}, .input-#{$color}, .input-postfix-#{$color}'
		))} {
			border-color: s-color($color, -opacity .3);

			&:hover,
			&:focus,
			&.active {
				border-color: s-color($color, -opacity .6);
				@include s-filter(-box-shadow s-color($color, -opacity .3) 0 0 s-rem(10px));
			}
		}
		#{s-selector((
			BEM : '.input-postfix--#{$color}',
			SMACCS : '.input-postfix-#{$color}'
		))} {
			background: s-color($color, -opacity .2);
			color : s-color($color, -darken 30%);
		}
		#{s-selector((
			BEM : 'select.#{$color}, .select--#{$color}',
			SMACCS : 'select.#{$color}, .select-#{$color}'
		))} {
			@extend %s-form-select-bare;
			background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="32" height="24" viewBox="0 0 32 24"><polygon points="0,0 32,0 16,24" style="fill: #{s-color($color)}"></polygon></svg>');
		}
	}

	// postfix
	[class*="input-postfix"] {
		border-left: none;
	}
	[class*="input-prefix"] {
		border-right: none;
	}
}