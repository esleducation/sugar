@include s-component-setup((
	formset : (
		scope-class : 'formset',
		generate : (
			colors : default primary secondary success warning error info,
			sizes : default
		)
	)
));
	
$_s-formset-inited : false;
@mixin s-formset-init() {
	
	@if not $_s-formset-inited {
		$_s-formset-inited : true !global;
		%s-formset-input-bare {
			display: inline-block;
			border-width:0;
			border-bottom-width : s-rem(3px);
			border-left-width : s-rem(0px);
			border-style : solid;
			background-color: white;
			@include s-font(sugar('settings.typo.font-family'));
			-webkit-appearance: none;
			-moz-appearance: none;
			line-height: 1;
			outline : none;
			width:100%;
			@include s-transition();

			&:focus {
				border-left-width : s-rem(5px);
			}
		}
		%s-formset-select-bare {
			background-size: 9px 6px;
			background-position: right center;
			background-origin: content-box;
			background-repeat: no-repeat;
		}
		%s-formset-fieldset-bare {
			border-left-width: s-rem(5px);
			border-left-style: solid;
			display:block;
			width: 100%;
			@include s-transition();

			> legend,
			> .legend {
				@include s-transition();
				border-left-style: solid;
				border-left-width: s-rem(5px);
				border-bottom-style: solid;
				border-bottom-width: s-rem(2px);
			}
		}
		%s-formset-checkbox-bare {
			position: absolute;
			left : -999999px;

			& + .s-radiobox {
				display: inline-block;
				position: relative;
				cursor: pointer;
				@include s-transition(.1s);
				vertical-align: sub;

				&:before {
					border-width: s-rem(2px);
					border-style: solid;
					content:'';
					display: block;
					position: absolute;
					transform:scaleX(1) scaleY(1) rotate(90deg);
					width: 100%; height: 100%;
					@include s-transition(.1s);
				}
				&:after {
					content:'';
					display: block;
					position: absolute;
					transform : scaleX(0) scaleY(0) rotate(-90deg);
					width: 100%; height: 100%;
					@include s-transition(.1s);
					background-size: 100% 100%;
					background-position: 50% 50%;
					background-repeat: no-repeat;
				}
			}
			&:checked + .s-radiobox:before {
				transform:scaleX(0) scaleY(0) rotate(0deg);
			}
			&:checked + .s-radiobox:after {
				transform:scaleX(1) scaleY(1) rotate(0deg);
			}

			#{s-selector((
				BEM : (
					'&.checkmark--inside',
					'&.checkmark--fill'
				),
				SMACCS : (
					'&.checkmark-inside',
					'&.checkmark-fill'
				)
			))} {
				& + .s-radiobox:after {
					background-size: 60% 60%;
					background-position: 49% 57% !important;
				}
			}

			#{s-selector((
				BEM : '&.checkmark--inside',
				SMACCS : '&.checkmark-inside'
			))} {
				& + .s-radiobox:before {
					transform: scaleX(1) scaleY(1) rotate(0) !important;
				}
			}

		}
		%s-formset-radio-bare {
			@extend %s-formset-checkbox-bare;
			
			#{s-selector((
				BEM : (
					'&.checkmark--inside',
					'&.checkmark--fill'
				),
				SMACCS : (
					'&.checkmark-inside',
					'&.checkmark-fill'
				)
			))} {
				& + .s-radiobox:after {
					background-position: 49% 56% !important;
				}
			}

			& + .s-radiobox:before,
			& + .s-radiobox:after {
				border-radius:50% !important;
			}
		}
	}
}

@mixin s-formset-fieldset(
	$sizes : sugar('settings.components.formset.generate.sizes'),
	$colors : sugar('settings.components.formset.generate.colors')
) {
	// init form
	@include s-formset-init();

	@if $_sugar-test-arguments {
		$sizes : s-test-argument('s-formset-fieldset','sizes',map-keys(sugar('settings.sizes')),$sizes);
		$colors : s-test-argument('s-formset-fieldset','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	@include s-component-context('formset') {		
		
		// get variables
		$form-scope-class : sugar('settings.scope-class');

		.#{$form-scope-class} fieldset,
		.fieldset {
			@extend %s-formset-fieldset-bare;

			@include s-vertical-rhythme() {
				margin-bottom: s-rem(2);
			}
		}

		// generate each sizes
		@each $size in $sizes {
			// input styling
			#{s-selector((
				BEM : (
					'.#{$form-scope-class} fieldset.#{$size}',
					'.fieldset--#{$size}'
				),
				SMACCS : (
					'.#{$form-scope-class} fieldset.#{$size}',
					'.fieldset-#{$size}'
				)
			))} {
				padding : 0 0 0 s-space($size);
				padding-right: 0;
				display: inline-block;

				> [class*="legend"],
				> legend {
					margin-left: - (s-space($size) + s-rem(5px));
					width : unquote('calc(100% + #{s-space($size)})');
					margin-bottom: s-space($size);
				}
			}

			#{s-selector((
				BEM : (
					'.#{$form-scope-class} legend.#{$size}',
					'.legend--#{$size}'
				),
				SMACCS : (
					'.#{$form-scope-class} legend.#{$size}',
					'.legend-#{$size}'
				)
			))} {
				// @include s-translate(0 50%);
				font-size : s-look-and-feel(font-size, $size);
				padding: s-look-and-feel(padding-horizontal, $size) s-look-and-feel(padding-vertical, $size);
			}
		}

		// generate each colors
		@each $color in $colors {
			
			#{s-selector((
				BEM : (
					'.#{$form-scope-class} fieldset.#{$color}',
					'.fieldset--#{$color}'
				),
				SMACCS : (
					'.#{$form-scope-class} fieldset.#{$color}',
					'.fieldset-#{$color}'
				)
			))} {
				border-color: s-color($color, -opacity .1);
				
				#{s-selector((
					BEM : '&.fieldset--hover',
					SMACCS : '&.is-hover'
				))},
				&:hover,
				&.active {
					border-color: s-color($color, -opacity .2);

					> legend,
					> .legend {
						border-color: s-color($color, -opacity .2);
					}
				}

				> legend,
				> .legend {
					color: s-color($color);
					border-color: s-color($color, -opacity .1);
				}
			}
		}
	}
}

@mixin s-formset-radiobox(
	$sizes : sugar('settings.components.formset.generate.sizes'),
	$colors : sugar('settings.components.formset.generate.colors')
) {
	// init form
	@include s-formset-init();
	
	// parse properties
	@if $_sugar-test-arguments {
		$sizes : s-test-argument('s-formset-radiobox','sizes',map-keys(sugar('settings.sizes')),$sizes);
		$colors : s-test-argument('s-formset-radiobox','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	@include s-component-context('formset') {

		// get variables
		$form-scope-class : sugar('settings.scope-class');

		// base
		input[data-s-radiobox] + .s-radiobox:after {
			background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A#{str-replace("#{s-color(success)}","#","%23")};}</style><path d="M432 48L192 288 80 176 0 256l192 192 320-320"/></svg>');
		}
		input[data-s-radiobox].checkmark--fill + .s-radiobox:after {
			background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A#{str-replace("#{s-color(#fff)}","#","%23")};}</style><path d="M432 48L192 288 80 176 0 256l192 192 320-320"/></svg>');
			background-color: s-color(success);
		}
		input[data-s-radiobox][type="checkbox"] {
			@extend %s-formset-checkbox-bare;
		}
		input[data-s-radiobox][type="radio"] {
			@extend %s-formset-radio-bare;
		}

		#{s-selector((
			BEM : (
				'.#{$form-scope-class} label label .s-radiobox',
				'.label .label .s-radiobox'
			),
			SMACCS : (
				'.#{$form-scope-class} label label .s-radiobox',
				'.label .label .s-radiobox'
			)
		))} {
			margin-top:s-rem(1);
		}

		// generate each sizes
		@each $size in $sizes {
			#{s-selector((
				BEM : (
					'input[data-s-radiobox].#{$size}'
				),
				SMACCS : (
					'input[data-s-radiobox].#{$size}'
				)
			))} {
				height: s-look-and-feel(font-size, $size);

				$br : s-look-and-feel(border-radius, $size);
				$fs : s-render-round-even(s-look-and-feel(font-size, $size) * 1.3);
				& + .s-radiobox {
					width: $fs;
					height: $fs;

					&:before,
					&:after {
						border-radius: $br;
					}
				}

				@include s-vertical-rhythme(
					$font-size : $fs,
					$line-height: $fs,
					$margin-bottom : 2,
					$margin-top : 0,
					$border-bottom-width: s-rem(2px),
					$border-top-width : s-rem(2px)
				);

				label + & + .s-radiobox, [class*="label"] + & + .s-radiobox {
					margin-left: s-look-and-feel(padding-vertical, $size);
				}
			}

			// label styling
			#{s-selector((
				BEM : (
					'.#{$form-scope-class} label.#{$size}',
					'.label--#{$size}'
				),
				SMACCS : (
					'.#{$form-scope-class} label.#{$size}',
					'.label-#{$size}'
				)
			))}Â {
				.s-radiobox + & {
					padding-left: s-look-and-feel(padding-vertical, $size) * .5;
					padding-right: s-look-and-feel(padding-vertical, $size);
				}
			}
		}
		@each $color in $colors {

			#{s-selector((
				BEM : (
					'input[data-s-radiobox]'
				),
				SMACCS : (
					'input[data-s-radiobox]'
				)
			))} {
				&.checkmark--#{$color}:not(.checkmark--fill) + .s-radiobox:after {
					background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A#{str-replace("#{s-color($color)}","#","%23")};}</style><path d="M432 48L192 288 80 176 0 256l192 192 320-320"/></svg>');
				}
				&.checkmark--fill.checkmark--#{$color} + .s-radiobox:after {
					background-color : s-color($color);
				}
			}

			#{s-selector((
				BEM : (
					'input[data-s-radiobox].#{$color}'
				),
				SMACCS : (
					'input[data-s-radiobox].#{$color}'
				)
			))} {
				& + .s-radiobox {
					&:before {
						border-color: s-color($color, -opacity .3);
					}
					
				}
				#{s-selector((
					BEM : '&.input--hover',
					SMACCS : '&.is-hover'
				))},
				&:hover {
					& + .s-radiobox {
						&:before {
							border-color: s-color($color, -opacity .6);
						}
					}
				}
				&:checked {
					& + .s-radiobox {
						&:before {
							border-color: s-color($color, -opacity .3);
						}
					}
				}
			}
		}
	}
}

@mixin s-formset(
	$sizes : sugar('settings.components.formset.generate.sizes'),
	$colors : sugar('settings.components.formset.generate.colors')
) {
	// init form
	@include s-formset-init();
	
	// parse properties
	@if $_sugar-test-arguments {
		$sizes : s-test-argument('s-formset','sizes',map-keys(sugar('settings.sizes')),$sizes);
		$colors : s-test-argument('s-formset','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	@include s-component-context('formset') {
		
		// get variables
		$form-scope-class : sugar('settings.scope-class');

		// base
		.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]),
		.input:not([type="checkbox"]):not([type="radio"]),
		.#{$form-scope-class} textarea,
		.#{$form-scope-class} select,
		#{s-selector((
			BEM : '[class*="input-prefix"], [class*="input-postfix"]',
			SMACCS : '[class*="input-prefix"], [class*="input-postfix"]'
		))} {
			@extend %s-formset-input-bare;
		}
		.#{$form-scope-class} textarea {
			height: auto !important;
		}
		.#{$form-scope-class} select,
		select[class*="input"] {
			@extend %s-formset-select-bare;
		}
		[class*="input-reply"] {
			display: none;
			border-style: solid;
			border-left-width: s-rem(5px);

			@include s-vertical-rhythme() {
				margin-bottom: s-rem(2);
			}
			.#{$form-scope-class} label &,
			.label & {
				margin-bottom: 0;
			}
		}

		// disabled
		

		#{s-selector((
			BEM : (
				'.input--disabled'
			),
			SMACCS : (
				'input.is-disabled'
			)
		))},
		#{s-selector((
			BEM : (
				'.#{$form-scope-class} select:disabled',
				'.#{$form-scope-class} textarea:disabled',
				'.#{$form-scope-class} input:disabled',
				'.input:disabled'
			),
			SMACCS : (
				'.#{$form-scope-class} select:disabled',
				'.#{$form-scope-class} textarea:disabled',
				'.#{$form-scope-class} input:disabled',
				'.input:disabled'
			)
		))} {
			opacity : .65;
			cursor: not-allowed;
		}
	
		// placeholder color
		#{s-selector((
			BEM : (
				'.#{$form-scope-class} select',
				'.#{$form-scope-class} textarea',
				'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"])',
				'.input',
				'[class*="input-postfix"]',
				'[class*="input-prefix"]',
				'.form-group'
			),
			SMACCS : (
				'.#{$form-scope-class} select',
				'.#{$form-scope-class} textarea',
				'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"])',
				'.input',
				'[class*="input-postfix"]',
				'[class*="input-prefix"]',
				'.form-group'
			)
		))} {
			color: s-color(text);
			@include s-placeholder() {
				color: s-color(text, -opacity .4);
			}
		}

		// remove margin-top from input that are in a form-group
		.form-group {
			#{s-selector((
				BEM : (
					'select',
					'textarea',
					'input:not([type="checkbox"]):not([type="radio"])',
					'[class*="input-postfix"]',
					'[class*="input-prefix"]',
					'.form-group'
				),
				SMACCS : (
					'select',
					'textarea',
					'input:not([type="checkbox"]):not([type="radio"])',
					'[class*="input-postfix"]',
					'[class*="input-prefix"]',
					'.form-group'
				)
			))} {
				margin-top: 0 !important;
			}
		}

		// generate each sizes
		@each $size in $sizes {
			// input styling
			#{s-selector((
				BEM : (
					'.#{$form-scope-class} select.#{$size}',
					'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]).#{$size}',
					'.input--#{$size}',
					'.input-postfix--#{$size}',
					'.input-prefix--#{$size}'
				),
				SMACCS : (
					'.#{$form-scope-class} select.#{$size}',
					'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]).#{$size}',
					'.input-#{$size}',
					'.input-postfix-#{$size}',
					'.input-prefix-#{$size}'
				)
			))} {
				font-size : s-look-and-feel(font-size, $size);
				// border-radius: s-look-and-feel(border-radius, $size);
				padding : s-look-and-feel(padding-horizontal, $size) s-look-and-feel(padding-vertical, $size);
				display: inline-block;
				height: s-look-and-feel(font-size, $size) + s-look-and-feel(padding-vertical, $size) * 2;

				@include s-vertical-rhythme(
					$font-size : s-look-and-feel(font-size, $size),
					$line-height: s-look-and-feel(font-size, $size),
					$padding-top : s-look-and-feel(padding-horizontal, $size),
					$padding-bottom : s-look-and-feel(padding-horizontal, $size),
					$margin-bottom : 1,
					$margin-top : 0,
					$border-bottom-width: s-rem(1px),
					$border-top-width : s-rem(1px),
					$calculate-height : true
				);
			}

			// textarea styling
			#{s-selector((
				BEM : (
					'.#{$form-scope-class} textarea.#{$size}'
				),
				SMACCS : (
					'.#{$form-scope-class} textarea.#{$size}'
				)
			))} {
				font-size : s-look-and-feel(font-size, $size);
				// border-radius: s-look-and-feel(border-radius, $size);
				padding : s-look-and-feel(padding-horizontal, $size) s-look-and-feel(padding-vertical, $size);
				display: inline-block;
				height: s-look-and-feel(font-size, $size) + s-look-and-feel(padding-vertical, $size) * 2;
				
				$vr : s-vertical-rhythme(
					$font-size : s-look-and-feel(font-size, $size),
					$line-height: s-look-and-feel(font-size, $size) * 2,
					$padding-top : s-look-and-feel(padding-horizontal, $size),
					$padding-bottom : s-look-and-feel(padding-horizontal, $size),
					$margin-bottom : 1,
					$margin-top : 0,
					$border-bottom-width: s-rem(1px),
					$border-top-width : s-rem(1px)
				);
				@include s-vertical-rhythme($vr...);
			}

			#{s-selector((
				BEM : (
					'.input-reply--#{$size}'
				),
				SMACCS : (
					'.input-reply-#{$size}'
				)
			))} {
				padding: s-look-and-feel(padding-horizontal, $size) s-look-and-feel(padding-vertical, $size);
				font-size: s-look-and-feel(font-size, $size);
			}

			// input in label
			.#{$form-scope-class} label,
			.label {
				user-select: none;
				
				@include s-vertical-rhythme() {
					#{s-selector((
						BEM : (
							'select.#{$size}',
							'textarea.#{$size}',
							'input:not([type="checkbox"]):not([type="radio"]).#{$size}',
							'.input--#{$size}',
							'.input-postfix--#{$size}',
							'.input-prefix--#{$size}',
							'.form-group'
						),
						SMACCS : (
							'select.#{$size}',
							'textarea.#{$size}',
							'input:not([type="checkbox"]):not([type="radio"]).#{$size}',
							'.input-#{$size}',
							'.input-postfix-#{$size}',
							'.input-prefix-#{$size}'
							'.form-group'
						)
					))} {
						margin-top: s-rem(1);
						margin-bottom: 0 !important;
						.form-group & {
							margin-top: 0;
						}
					}
				}
			}

			#{s-selector((
				BEM : (
					'.#{$form-scope-class} select.#{$size}',
					'select.input--#{$size}',
					'.input-postfix--#{$size}',
					'.input-prefix--#{$size}'
				),
				SMACCS : (
					'.#{$form-scope-class} select.#{$size}',
					'select.input-#{$size}',
					'.input-postfix-#{$size}',
					'.input-prefix-#{$size}'
				)
			))} {
				$args : (
					font-size : s-look-and-feel(font-size, $size),
					line-height: s-look-and-feel(font-size, $size),
					padding-top : s-look-and-feel(padding-horizontal, $size),
					padding-bottom : s-look-and-feel(padding-horizontal, $size),
					margin-bottom : 1,
					margin-top : 0,
					border-bottom-width: s-rem(1px),
					border-top-width : s-rem(1px),
					calculate-height : true
				);
				@include s-vertical-rhythme($args...);
			}

			// label styling
			#{s-selector((
				BEM : (
					'.#{$form-scope-class} label.#{$size}',
					'.label--#{$size}'
				),
				SMACCS : (
					'.#{$form-scope-class} label.#{$size}',
					'.label-#{$size}'
				)
			))}Â {
				font-size: s-look-and-feel(font-size, $size);
				display: inline-block;
				vertical-align: middle;

				&:not(.s-radiobox) {
					$mb : s-look-and-feel(font-size, $size);
					@if s-strip-units($mb) <= 2 { $mb : 2; }
					@include s-vertical-rhythme(
						$font-size : s-look-and-feel(font-size, $size),
						$line-height: s-look-and-feel(font-size, $size),
						$margin-bottom : $mb,
						$margin-top : 0
					);
					// @error('');

					&:first-child:last-child {
						width: 100%;
					}
				}

				& + label,
				& + [class*="label"] {
					margin-left: s-look-and-feel(padding-vertical, $size);
				}
			}
		}

		// generate each colors
		@each $color in $colors {
			
			// display input-reply when parent has the good class
			#{s-selector((
				BEM : (
					'.#{$color} > .input-reply--#{$color}'
				),
				SMACCS : (
					'.#{$color} > .input-reply-#{$color}'
				)
			))} {
				display: block;
			}

			#{s-selector((
				BEM : (
					'.#{$form-scope-class} select.#{$color}',
					'.#{$form-scope-class} textarea.#{$color}',
					'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]).#{$color}',
					'.input--#{$color}',
					'.input-postfix--#{$color}',
					'.input-prefix--#{$color}'
				),
				SMACCS : (
					'.#{$form-scope-class} select.#{$color}',
					'.#{$form-scope-class} textarea.#{$color}',
					'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]).#{$color}',
					'.input-#{$color}',
					'.input-postfix-#{$color}',
					'.input-prefix-#{$color}'
				)
			))} {
				border-color: s-color($color, -opacity .3);

				&:hover:not(:disabled):not(.input--disabled):not(.is-disabled),
				&:focus:not(:disabled):not(.input--disabled):not(.is-disabled),
				&.active:not(:disabled):not(.input--disabled):not(.is-disabled) {
					border-color: s-color($color, -opacity .6);
					@include s-filter(box-shadow(s-color($color, -opacity .3) 0 5px s-rem(10px)));
				}
				& ~ .input-reply--#{$color} {
					display: block;
				}
			}
			#{s-selector((
				BEM : (
					'.input-reply--#{$color}'
				),
				SMACCS : (
					'.input-reply-#{$color}'
				)
			))} {
				border-color: s-color($color, -opacity .3);
				color: $color;
			}

			#{s-selector((
				BEM : '.input-postfix--#{$color}, .input-prefix--#{$color}',
				SMACCS : '.input-postfix-#{$color}, .input-prefix-#{$color}'
			))} {
				background-color: s-color($color, -opacity .2);
				color : s-color($color, -darken 30%);
			}
			#{s-selector((
				BEM : (
					'.#{$form-scope-class} select.#{$color}',
					'select.input--#{$color}'
				),
				SMACCS : (
					'.#{$form-scope-class} select.#{$color}',
					'select.input-#{$color}'
				)
			))} {
				background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="32" height="24" viewBox="0 0 32 24"><polygon points="0,0 32,0 16,24" style="fill%3A#{str-replace("#{s-color($color)}","#","%23")}"></polygon></svg>');
			}
		}

		// postfix
		[class*="input-postfix"] {
			border-left: none;
		}
		[class*="input-prefix"] {
			border-right: none;
			text-align: right;
		}
		[class*="input-postfix"],
		[class*="input-prefix"] {
			pointer-events: none;
		}
	}
}