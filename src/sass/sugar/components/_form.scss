@include s-component-setup((
	form : (
		scope-class : 'formset',
		colors : default primary secondary success warning error info,
		sizes : default
	)
));

$_s-formset-inited : false;
@mixin s-formset-init() {
	@if not $_s-formset-inited {
		$_s-formset-inited : true !global;
		%s-formset-input-bare {
			display: inline-block;
			border: s-color(default, -opacity .3) 1px solid;
			background: white;
			@include s-font(sugar('settings.typo.font-family'));
			-webkit-appearance: none;
			-moz-appearance: none;
			line-height: 1;
			outline : none;
			width:100%;
			@include s-transition();
		}
		%s-formset-select-bare {
			background-size: 9px 6px;
			background-position: right center;
			background-origin: content-box;
			background-repeat: no-repeat;
		}
		%s-formset-fieldset-bare {
			border-left-width: s-rem(5px);
			border-left-style: solid;
			display:block;
			width: 100%;
			@include s-transition();

			> legend,
			> .legend {
				@include s-transition();
			}
		}
		%s-formset-checkbox-bare {
			position: absolute;
			left : -999999px;

			& + .s-radiobox {
				display: inline-block;
				position: relative;
				cursor: pointer;
				@include s-transition(.1s);
				vertical-align: sub;

				&:before {
					border-width: s-rem(2px);
					border-style: solid;
					content:'';
					display: block;
					position: absolute;
					@include s-transform(-scaleX 1 -scaleY 1 -rotate 90deg);
					width: 100%; height: 100%;
					@include s-transition(.1s);
				}
				&:after {
					content:'';
					display: block;
					position: absolute;
					@include s-transform(-scaleX 0 -scaleY 0 -rotate -90deg);
					width: 100%; height: 100%;
					@include s-transition(.1s);
					background-size: 100% 100%;
					background-position: 50% 50%;
					background-repeat: no-repeat;
				}
			}
			&:checked + .s-radiobox:before {
				@include s-transform(-scaleX 0 -scaleY 0 -rotate 0deg);
			}
			&:checked + .s-radiobox:after {
				@include s-transform(-scaleX 1 -scaleY 1 -rotate 0deg);
			}

			&.checkmark--inside {
				& + .s-radiobox:before {
					transform: scaleX(1) scaleY(1) rotate(0) !important;
				}
				& + .s-radiobox:after {
					background-size: 60% 60%;
				}
			}

		}
		%s-formset-radio-bare {
			@extend %s-formset-checkbox-bare;

			&.checkmark--inside + .s-radiobox:after {
				background-position: 49% 60% !important;
			}

			& + .s-radiobox:before {
				border-radius:50% !important;
			}
		}
	}
}

@mixin s-formset-fieldset(
	$props : ()
) {
	// init form
	@include s-formset-init();

	// parse properties
	$props : s-parse-properties($props, (
		sizes : map-keys(sugar('settings.sizes')),
		colors : list-color
	));

	// get variables
	$sizes : map-get-or($props, sizes, sugar('settings.form.sizes'));
	$colors : map-get-or($props, colors, sugar('settings.form.colors'));

	$form-scope-class : sugar('settings.form.scope-class');

	fieldset {
		@extend %s-formset-fieldset-bare;
	}

	// generate each sizes
	@each $size in $sizes {
		// input styling
		#{s-selector((
			BEM : (
				'.#{$form-scope-class} fieldset.#{$size}',
				'.fieldset--#{$size}'
			),
			SMACCS : (
				'.#{$form-scope-class} fieldset.#{$size}',
				'.fieldset-#{$size}'
			)
		))} {
			padding : s-space($size) 0 0 s-space($size);
			padding-right: 0;
			display: inline-block;

			> [class*="legend"],
			> legend {
				margin-left: - s-space($size);
				width : unquote('calc(100% + #{s-space($size)})');
			}
		}

		#{s-selector((
			BEM : (
				'.#{$form-scope-class} legend.#{$size}',
				'.legend--#{$size}'
			),
			SMACCS : (
				'.#{$form-scope-class} legend.#{$size}',
				'.legend-#{$size}'
			)
		))} {
			@include s-translate(0 50%);
			font-size : s-look-and-feel(font-size, $size);
			padding: s-look-and-feel(padding-horizontal, $size) s-look-and-feel(padding-vertical, $size);
			border-radius: s-look-and-feel(border-radius, $size);
			@include s-corner(-tl 0 -bl 0);
			margin-bottom: s-look-and-feel(padding-horizontal, $size);
		}
	}

	// generate each colors
	@each $color in $colors {
		
		#{s-selector((
			BEM : 'fieldset.#{$color}, .fieldset--#{$color}',
			SMACCS : 'fieldset.#{$color}, .fieldset-#{$color}'
		))} {
			border-color: s-color($color, -opacity .1);
			
			&:hover,
			&.active {
				border-color: s-color($color, -opacity .3);

				> legend,
				> .legend {
					color: s-color($color, -darken 15%);
					background: s-color($color, -opacity .3);
				}
			}

			> legend,
			> .legend {
				color: s-color($color);
				background: s-color($color, -opacity .1);
			}
		}
	}
}

@mixin s-formset-radiobox(
	$props : ()
) {
	// init form
	@include s-formset-init();
	
	// parse properties
	$props : s-parse-properties($props, (
		sizes : map-keys(sugar('settings.sizes')),
		colors : list-color
	));

	// get variables
	$sizes : map-get-or($props, sizes, sugar('settings.form.sizes'));
	$colors : map-get-or($props, colors, sugar('settings.form.colors'));

	$vertical-rhythme-scope-class : sugar('settings.vertical-rhythme.scope-class');
	$typeset : sugar('settings.typeset.scope-class');
	$form-scope-class : sugar('settings.form.scope-class');

	// base
	input[data-s-radiobox] + .s-radiobox:after {
		background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A#{str-replace("#{s-color(success)}","#","%23")};}</style><path d="M432 48L192 288 80 176 0 256l192 192 320-320"/></svg>');
	}
	// input[data-s-radiobox].checkmark--inside:checked + .s-radiobox {
	// 	&:before {
	// 		border-color: s-color(success);
	// 	}
	// }
	input[data-s-radiobox][type="checkbox"] {
		@extend %s-formset-checkbox-bare;
	}
	input[data-s-radiobox][type="radio"] {
		@extend %s-formset-radio-bare;
	}

	// generate each sizes
	@each $size in $sizes {
		#{s-selector((
			BEM : (
				'input[data-s-radiobox].#{$size}'
			),
			SMACCS : (
				'input[data-s-radiobox].#{$size}'
			)
		))} {
			height: s-look-and-feel(font-size, $size);

			$br : s-look-and-feel(border-radius, $size);
			$fs : s-round-px-value-even(s-look-and-feel(font-size, $size) * 1.3);
			& + .s-radiobox {
				width: $fs;
				height: $fs;

				&:before {
					border-radius: $br;
				}
			}

			@include s-vertical-rhythme((
				s-font : $fs,
				line-height: $fs,
				margin-bottom : 2,
				margin-top : 0,
				border-bottom-width: s-rem(2px),
				border-top-width : s-rem(2px)
			));

			label + & + .s-radiobox, [class*="label"] + & + .s-radiobox {
				margin-left: s-look-and-feel(padding-vertical, $size);
			}
		}

		// label styling
		#{s-selector((
			BEM : (
				'.#{$form-scope-class} label.#{$size}',
				'.label--#{$size}'
			),
			SMACCS : (
				'.#{$form-scope-class} label.#{$size}',
				'.label-#{$size}'
			)
		))} {
			.s-radiobox + & {
				padding-left: s-look-and-feel(padding-vertical, $size) * .5;
				padding-right: s-look-and-feel(padding-vertical, $size);
			}
		}
	}
	@each $color in $colors {

		#{s-selector((
			BEM : (
				'input[data-s-radiobox]'
			),
			SMACCS : (
				'input[data-s-radiobox]'
			)
		))} {
			&.checkmark--#{$color} + .s-radiobox:after {
				background-image:url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A#{str-replace("#{s-color($color)}","#","%23")};}</style><path d="M432 48L192 288 80 176 0 256l192 192 320-320"/></svg>');
			}
			// &.checkmark--inside.checkmark--#{$color}:checked + .s-radiobox {
			// 	&:before {
			// 		border-color: s-color($color);
			// 	}
			// }
		}

		#{s-selector((
			BEM : (
				'input[data-s-radiobox].#{$color}'
			),
			SMACCS : (
				'input[data-s-radiobox].#{$color}'
			)
		))} {
			& + .s-radiobox {
				&:before {
					border-color: s-color($color, -opacity .3);
				}
				
			}
			&:hover {
				& + .s-radiobox {
					&:before {
						border-color: s-color($color, -opacity .6);
					}
				}
			}
			&:checked {
				& + .s-radiobox {
					&:before {
						border-color: s-color($color, -opacity .3);
					}
				}
			}
		}
	}
}

@mixin s-formset(
	$props : ()
) {
	// init form
	@include s-formset-init();
	
	// parse properties
	$props : s-parse-properties($props, (
		sizes : map-keys(sugar('settings.sizes')),
		colors : list-color
	));

	// get variables
	$sizes : map-get-or($props, sizes, sugar('settings.form.sizes'));
	$colors : map-get-or($props, colors, sugar('settings.form.colors'));

	$vertical-rhythme-scope-class : sugar('settings.vertical-rhythme.scope-class');
	$typeset : sugar('settings.typeset.scope-class');
	$form-scope-class : sugar('settings.form.scope-class');

	// base
	.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]),
	.input:not([type="checkbox"]):not([type="radio"]),
	.#{$form-scope-class} textarea,
	.textarea,
	.#{$form-scope-class} select,
	.select,
	#{s-selector((
		BEM : '[class*="input-prefix"], [class*="input-postfix"]',
		SMACCS : '[class*="input-prefix"], [class*="input-postfix"]'
	))} {
		@extend %s-formset-input-bare;
	}
	.#{$form-scope-class} textarea,
	.textarea {
		height: auto !important;
	}


	// generate each sizes
	@each $size in $sizes {
		// input styling
		#{s-selector((
			BEM : (
				'.#{$form-scope-class} select.#{$size}',
				'.select--#{$size}',
				'.#{$form-scope-class} textarea.#{$size}',
				'.textarea--#{$size}',
				'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]).#{$size}',
				'.input--#{$size}',
				'.input-postfix--#{$size}',
				'.input-prefix--#{$size}'
			),
			SMACCS : (
				'.#{$form-scope-class} select.#{$size}',
				'.select-#{$size}',
				'.#{$form-scope-class} textarea.#{$size}',
				'.textarea-#{$size}',
				'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]).#{$size}',
				'.input-#{$size}',
				'.input-postfix-#{$size}',
				'.input-prefix-#{$size}'
			)
		))} {
			font-size : s-look-and-feel(font-size, $size);
			border-radius: s-look-and-feel(border-radius, $size);
			padding : s-look-and-feel(padding-vertical, $size) s-look-and-feel(padding-horizontal, $size);
			display: inline-block;
			height: s-look-and-feel(font-size, $size) + s-look-and-feel(padding-vertical, $size) * 2;

			$args : (
				s-font : s-look-and-feel(font-size, $size),
				line-height: s-look-and-feel(font-size, $size),
				padding-top : s-look-and-feel(padding-vertical, $size),
				padding-bottom : s-look-and-feel(padding-vertical, $size),
				margin-bottom : 1,
				margin-top : 0,
				border-bottom-width: s-rem(1px),
				border-top-width : s-rem(1px),
				calculate-height : true
			);
			$rhythme : s-vertical-rhythme($args);
			@include s-vertical-rhythme($args);
			$line-height : map-get($rhythme, line-height) + s-look-and-feel(font-size, $size) / 10 * 6;
			// line-height: $line-height !important;
			// &:not(textarea):not([class*="textarea"]) {
			// 	padding-top:0 !important;
			// 	padding-bottom:0 !important;
			// }
			// &[class*="input-prefix"],
			// &[class*="input-postfix"] {
			// 	line-height: map-get($rhythme, height) !important;
			// }
		}

		// input in label
		.#{$form-scope-class} label,
		.label {
			user-select: none;
			#{s-selector((
				BEM : (
					'> select.#{$size}',
					'> .select--#{$size}',
					'> textarea.#{$size}',
					'> .textarea--#{$size}',
					'> input:not([type="checkbox"]):not([type="radio"]).#{$size}',
					'> .input--#{$size}',
					'> .input-postfix--#{$size}',
					'> .input-prefix--#{$size}',
					'> .form-group'
				),
				SMACCS : (
					'> select.#{$size}',
					'> .select-#{$size}',
					'> textarea.#{$size}',
					'> .textarea-#{$size}',
					'> input:not([type="checkbox"]):not([type="radio"]).#{$size}',
					'> .input-#{$size}',
					'> .input-postfix-#{$size}',
					'> .input-prefix-#{$size}'
					'> .form-group'
				)
			))} {
				.#{$vertical-rhythme-scope-class} & {
					position: relative;
					top: s-rem(1);
				}
			}
		}

		#{s-selector((
			BEM : (
				'.#{$form-scope-class} select.#{$size}',
				'.select--#{$size}',
				'.input-postfix--#{$size}',
				'.input-prefix--#{$size}'
				// '.btn--#{$size}'
			),
			SMACCS : (
				'.#{$form-scope-class} select.#{$size}',
				'.select-#{$size}',
				'.input-postfix-#{$size}',
				'.input-prefix-#{$size}'
			)
		))} {
			$args : (
				s-font : s-look-and-feel(font-size, $size),
				line-height: s-look-and-feel(font-size, $size),
				padding-top : s-look-and-feel(padding-vertical, $size),
				padding-bottom : s-look-and-feel(padding-vertical, $size),
				margin-bottom : 1,
				margin-top : 0,
				border-bottom-width: s-rem(1px),
				border-top-width : s-rem(1px),
				calculate-height : true
			);
			$rhythme : s-vertical-rhythme($args);
			@include s-vertical-rhythme($args);
			$line-height : map-get($rhythme, line-height) + s-look-and-feel(font-size, $size) / 10 * 6;
			// height : $line-height + map-get($rhythme, padding-top) + map-get($rhythme, padding-bottom);
			// line-height: $line-height !important;
			// padding-top:0 !important;
			// padding-bottom:0 !important;
			// &[class*="input-prefix"],
			// &[class*="input-postfix"] {
			// 	line-height: map-get($rhythme, height) !important;
			// }
		}

		// label styling
		#{s-selector((
			BEM : (
				'.#{$form-scope-class} label.#{$size}',
				'.label--#{$size}'
			),
			SMACCS : (
				'.#{$form-scope-class} label.#{$size}',
				'.label-#{$size}'
			)
		))} {
			font-size: s-look-and-feel(font-size, $size);
			display: inline-block;
			vertical-align: middle;

			&:not(.s-radiobox) {
				$mb : s-look-and-feel(font-size, $size);
				@if $mb <= 0 { $mb : 1; }
				@include s-vertical-rhythme((
					s-font : s-look-and-feel(font-size, $size),
					line-height: s-look-and-feel(font-size, $size),
					margin-bottom : $mb,
					margin-top : 0
				));

				&:first-child:last-child {
					width: 100%;
				}
			}

			& + label,
			& + [class*="label"] {
				margin-left: s-look-and-feel(padding-vertical, $size);
			}
		}
	}

	// generate each colors
	@each $color in $colors {
		
		#{s-selector((
			BEM : (
				'.#{$form-scope-class} select.#{$color}',
				'.select--#{$color}',
				'.#{$form-scope-class} textarea.#{$color}',
				'.textarea--#{$color}',
				'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]).#{$color}',
				'.input--#{$color}',
				'.input-postfix--#{$color}',
				'.input-prefix--#{$color}'
			),
			SMACCS : (
				'.#{$form-scope-class} select.#{$color}',
				'.select-#{$color}',
				'.#{$form-scope-class} textarea.#{$color}',
				'.textarea--#{$color}',
				'.#{$form-scope-class} input:not([type="checkbox"]):not([type="radio"]).#{$color}',
				'.input-#{$color}',
				'.input-postfix-#{$color}',
				'.input-prefix-#{$color}'
			)
		))} {
			border-color: s-color($color, -opacity .3);

			&:hover,
			&:focus,
			&.active {
				border-color: s-color($color, -opacity .6);
				@include s-filter(-box-shadow s-color($color, -opacity .3) 0 0 s-rem(10px));
			}
		}
		#{s-selector((
			BEM : '.input-postfix--#{$color}, .input-prefix--#{$color}',
			SMACCS : '.input-postfix-#{$color}, .input-prefix-#{$color}'
		))} {
			background: s-color($color, -opacity .2);
			color : s-color($color, -darken 30%);
		}
		#{s-selector((
			BEM : (
				'.#{$form-scope-class} select.#{$color}',
				'.select--#{$color}'
			),
			SMACCS : (
				'.#{$form-scope-class} select.#{$color}',
				'.select-#{$color}'
			)
		))} {
			@extend %s-formset-select-bare;
			background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="32" height="24" viewBox="0 0 32 24"><polygon points="0,0 32,0 16,24" style="fill%3A#{str-replace("#{s-color($color)}","#","%23")}"></polygon></svg>');
		}
	}

	// postfix
	[class*="input-postfix"] {
		border-left: none;
	}
	[class*="input-prefix"] {
		border-right: none;
		text-align: right;
	}
	[class*="input-postfix"],
	[class*="input-prefix"] {
		pointer-events: none;
	}
}