//
// Shapes helpers
//

//
// Corner
//
@mixin s-corner(
	$radius : null,
	$top : null,
	$right : null,
	$bottom : null,
	$left : null,
	$top-left : null,
	$top-right : null,
	$bottom-left : null,
	$bottom-right : null
) {
	@if $_sugar-test-arguments {
		$radius : s-test-argument('s-corner','radius','number|list-number',$radius);
		$top : s-test-argument('s-corner','top','number|list-number',$top);
		$right : s-test-argument('s-corner','right','number|list-number',$right);
		$bottom : s-test-argument('s-corner','bottom','number|list-number',$bottom);
		$left : s-test-argument('s-corner','left','number|list-number',$left);
		$top-left : s-test-argument('s-corner','top-left','number|list-number',$top-left);
		$top-right : s-test-argument('s-corner','top-right','number|list-number',$top-right);
		$bottom-left : s-test-argument('s-corner','bottom-left','number|list-number',$bottom-left);
		$bottom-right : s-test-argument('s-corner','bottom-right','number|list-number',$bottom-right);
	}

	@if length($radius) == 1 and type-of($radius) == number {
		border-radius: $radius;
		$radius : remove-nth($radius, 1);
	}

	// top
	@if $top {
		border-top-left-radius: $top;
		border-top-right-radius: $top;
	}
	// right
	@if $right {
		border-top-right-radius: $right;
		border-bottom-right-radius: $right;
	}
	// bottom
	@if $bottom {
		border-bottom-left-radius: $bottom;
		border-bottom-right-radius: $bottom;
	}
	// left
	@if $left {
		border-top-left-radius: $left;
		border-bottom-left-radius: $left;
	}
	// top left
	@if $top-left {
		border-top-left-radius: $top-left;
	}
	// top-right
	@if $top-right {
		border-top-right-radius: $top-right;
	}
	// bottom-left
	@if $bottom-left {
		border-bottom-left-radius: $bottom-left;
	}
	// bottom-right
	@if $bottom-right {
		border-bottom-right-radius: $bottom-right;
	}
}
@mixin s-border-radius(
	$radius : null,
	$top : null,
	$right : null,
	$bottom : null,
	$left : null,
	$top-left : null,
	$top-right : null,
	$bottom-left : null,
	$bottom-right : null
) {
	@include s-corner(
		$radius : $radius,
		$top : $top,
		$right : $right,
		$bottom : $bottom,
		$left : $left,
		$top-left : $top-left,
		$top-right : $top-right,
		$bottom-left : $bottom-left,
		$bottom-right : $bottom-right
	);
}


//
// Round
//
@mixin s-round(
	$width : null,
	$height : null,
	$color : null
) {
	@if $_sugar-test-arguments {
		$width : s-test-argument('s-round','width',number,$width);
		$height : s-test-argument('s-round','height',number,$height);
		$color : s-test-argument('s-round','color',color,$color);
	}
	@if $width {
		width : $width;
	}
	@if $height {
		height : $height;
	}
	@if $color {
		background-color : $color;
	}
	border-radius:50%;
	overflow: hidden;
	> img {
		border-radius:50%;
		overflow: hidden;
	}
}


//
// Restangle
//
@mixin s-rect(
	$width,
	$height : null
) {
	@if $_sugar-test-arguments {
		$width : s-test-argument('s-rect','width',number,$width);
		// $height : s-test-argument('s-rect','height',number,$height);
	}
	@if $height == null {
		$height : $width;
	}
	width : $width;
	height : $height;
}


//
// Bubble
//
@mixin s-bubble(
	$side : bottom,
	$align : center,
	$size : 10px,
	$color : s-color(primary),
	$arrow-offset : 10px,
	$border-width : 0,
	$border-color : null
) {	
	@if $_sugar-test-arguments {
		$side : s-test-argument('s-bubble','side',(top,right,bottom,left),$side);
		$align : s-test-argument('s-bubble','align',(left,center,right,top,middle,bottom),$align);
		$size : s-test-argument('s-bubble','size',number,$size);
		$color : s-test-argument('s-bubble','color',color,$color);
		$arrow-offset : s-test-argument('s-bubble','arrow-offset',number,$arrow-offset);
		$border-width : s-test-argument('s-bubble','border-width',number,$border-width);
		$border-color : s-test-argument('s-bubble','border-color',color,$border-color);
	}

	// create the bubble
	@include _arrow($side, $align, $size, $color, $arrow-offset, $border-color, $border-width);

	position: relative;
	background: $color;
	border-style : solid;
	@if $border-width {
		border-width : $border-width;
	}
	@if $border-color {
		border-color : $border-color;
	}
}



//
// Triangle
//
// @mixin s-triangle(
// 	$triangle,
// 	$border : null
// ) {

// 	$triangle : s-parse-properties($triangle, (
// 		width : number,
// 		height : number,
// 		color : color,
// 		direction : top t right r bottom b left l top-left tl top-right tr bottom-left bl bottom-right br,
// 		transform-origin : base center top
// 	), (
// 		direction : d,
// 		transform-origin : to
// 	));
// 	@if type-of($border) != map {
// 		$border : s-parse-properties($border, (
// 			width : number,
// 			color : color
// 		));
// 	}
// 	$triangle : s-handle-nested(triangle, $triangle);
// 	$border : s-handle-nested(triangle-border, $border);

// 	$direction : map-get-or($triangle, direction, top);
// 	$width : map-get-or($triangle, width, 100px);
// 	$height : map-get-or($triangle, height, 100px);
// 	$color : map-get-or($triangle, color, red);
// 	$b-width : map-get-or($border, width);
// 	$b-color : map-get-or($border, color, darken(red,20%));
// 	$transform-origin : map-get-or($triangle, transform-origin, center);

// 	// swap width and height of arrow
// 	@if $direction == right or $direction == left {
// 		$_width : $width;
// 		$width : $height;
// 		$height : $_width;
// 	}

// 	display: inline-block;
// 	border-style: solid;
// 	-webkit-transform:rotate(360deg);
// 	&:before,
// 	&:after {
// 		color: transparent;
// 		content:'';
// 		display: block;
// 		position: absolute;
// 		width:$width; height:$height;
// 		border-style: solid;
// 		top:0; left:0;
// 	}
// 	// top
// 	@if $direction == top or $direction == t {
// 		&:after {
// 			border-width: 0 $width*.5 $height $width*.5;
// 			border-color: transparent transparent $color transparent;
// 		}
// 		@if $b-width {
// 			$angle : s-atan($height / ($width*.5));
// 			$hyp : $height / s-sin($angle);
// 			$centerX : (0 + $width + $width*.5) / 3;
// 			$centerY : (0 + 0 + $height) / 3;
// 			$ratio-width : $b-width * 2;
// 			// @if $transform-origin == base {
// 			// 	$ratio-width : $b-width;
// 			// }
// 			$ratio : 1 / $height * ($height + $ratio-width);
// 			&:before {
// 				@if $transform-origin == base {
// 					transform-origin: $centerX $height;
// 				} @else {
// 					transform-origin: $centerX ($height - $centerY);
// 				}
// 				transform:scale($ratio);
// 				border-width: 0 $width*.5 $height $width*.5;
// 				border-color: transparent transparent $b-color transparent;	
// 			}
// 		}
// 	} @else if $direction == right or $direction == r {
// 		&:after {
// 			border-width: $height*.5 0 $height*.5 $width;
// 			border-color: transparent transparent transparent $color;
// 		}
// 		@if $b-width {
// 			$angle : s-atan($width / ($height*.5));
// 			$hyp : $width / s-sin($angle);
// 			$centerX : (0 + 0 + $width) / 3;
// 			$centerY : (0 + $height + $height*.5) / 3;
// 			$ratio-width : $b-width * 2;
// 			// @if $transform-origin == base {
// 			// 	$ratio-width : $b-width;
// 			// }
// 			$ratio : 1 / $height * ($height + $ratio-width);
// 			&:before {
// 				@if $transform-origin == base {
// 					transform-origin: 0 $centerY;
// 				} @else {
// 					transform-origin: ($width - $centerX) $centerY;
// 				}
// 				transform:scale($ratio);
// 				border-width: $height*.5 0 $height*.5 $width;
// 				border-color: transparent transparent transparent $b-color;
// 			}
// 		}
// 	} @else if $direction == bottom or $direction == b {
// 		&:after {
// 			border-width: $height $width*.5 0 $width*.5;
// 			border-color: $color transparent transparent transparent;
// 		}
// 		@if $b-width {
// 			$angle : s-atan($height / ($width*.5));
// 			$hyp : $height / s-sin($angle);
// 			$centerX : (0 + $width + $width*.5) / 3;
// 			$centerY : (0 + 0 + $height) / 3;
// 			$ratio-width : $b-width * 2;
// 			// @if $transform-origin == base {
// 			// 	$ratio-width : $b-width;
// 			// }
// 			$ratio : 1 / $height * ($height + $ratio-width);
// 			&:before {
// 				@if $transform-origin == base {
// 					transform-origin: $centerX 0;
// 				} @else {
// 					transform-origin: $centerX $centerY;
// 				}
// 				transform:scale($ratio);
// 				border-width: $height $width*.5 0 $width*.5;
// 				border-color: $b-color transparent transparent transparent;	
// 			}
// 		}
// 	} @else if $direction == left or $direction == l {
// 		&:after {
// 			border-width: $height*.5 $width $height*.5 0;
// 			border-color: transparent $color transparent transparent;
// 		}
// 		@if $b-width {
// 			$angle : s-atan($width / ($height*.5));
// 			$hyp : $width / s-sin($angle);
// 			$centerX : (0 + 0 + $width) / 3;
// 			$centerY : (0 + $height + $height*.5) / 3;
// 			$ratio-width : $b-width * 2;
// 			// @if $transform-origin == base {
// 			// 	$ratio-width : $b-width;
// 			// }
// 			$ratio : 1 / $height * ($height + $ratio-width);
// 			&:before {
// 				@if $transform-origin == base {
// 					transform-origin: $width $centerY;
// 				} @else {
// 					transform-origin: ($width - $centerX) $centerY;
// 				}
// 				transform:scale($ratio);
// 				border-width: $height*.5 $width $height*.5 0;
// 				border-color: transparent $b-color transparent transparent;
// 			}
// 		}
// 	} @else if $direction == top-left or $direction == tl {
// 		&:after {
// 			border-width: $height $width 0 0;
// 			border-color: $color transparent transparent transparent;
// 		}
// 		@if $b-width {
// 			$centerX : (0 + $width + $width) / 3;
// 			$centerY : (0 + 0 + $height) / 3;
// 			$ratio-width : $b-width * 2;
// 			// @if $transform-origin == base {
// 			// 	$ratio-width : $b-width;
// 			// }
// 			$ratio : 1 / $height * ($height + $ratio-width);
// 			&:before {
// 				transform-origin: ($width - $centerX) $centerY;
// 				transform:scale($ratio);
// 				border-width: $height $width 0 0;
// 				border-color: $b-color transparent transparent transparent;
// 			}
// 		}
// 	} @else if $direction == top-right or $direction == tr {
// 		&:after {
// 			border-width: 0 $width $height 0;
// 			border-color: transparent $color transparent transparent;
// 		}
// 		@if $b-width {
// 			$centerX : (0 + $width + $width) / 3;
// 			$centerY : (0 + 0 + $height) / 3;
// 			$ratio-width : $b-width * 2;
// 			// @if $transform-origin == base {
// 			// 	$ratio-width : $b-width;
// 			// }
// 			$ratio : 1 / $height * ($height + $ratio-width);
// 			&:before {
// 				transform-origin: $centerX $centerY;
// 				transform:scale($ratio);
// 				border-width: 0 $width $height 0;
// 				border-color: transparent $b-color transparent transparent;
// 			}
// 		}
// 	} @else if $direction == bottom-left or $direction == bl {
// 		&:after {
// 			border-width: $height 0 0 $width;
// 			border-color: transparent transparent transparent $color;
// 		}
// 		@if $b-width {
// 			$centerX : (0 + 0 + $width) / 3;
// 			$centerY : (0 + $height + $height) / 3;
// 			$ratio-width : $b-width * 2;
// 			// @if $transform-origin == base {
// 			// 	$ratio-width : $b-width;
// 			// }
// 			$ratio : 1 / $height * ($height + $ratio-width);
// 			&:before {
// 				transform-origin: $centerX $centerY;
// 				transform:scale($ratio);
// 				border-width: $height 0 0 $width;
// 				border-color: transparent transparent transparent $b-color;
// 			}
// 		}
// 	} @else if $direction == bottom-right or $direction == br {
// 		&:after {
// 			border-width: 0 0 $height $width;
// 			border-color: transparent transparent $color transparent;
// 		}
// 		@if $b-width {
// 			$centerX : (0 + $width + $width) / 3;
// 			$centerY : (0 + $height + $height) / 3;
// 			$ratio-width : $b-width * 2;
// 			// @if $transform-origin == base {
// 			// 	$ratio-width : $b-width;
// 			// }
// 			$ratio : 1 / $height * ($height + $ratio-width);
// 			&:before {
// 				transform-origin: $centerX $centerY;
// 				transform:scale($ratio);
// 				border-width: 0 0 $height $width;
// 				border-color: transparent transparent $b-color transparent;
// 			}
// 		}
// 	}

// 	@include s-handle-nested(triangle, triangle-border) {
// 		@content;
// 	}
// }