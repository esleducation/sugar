/**
 * Return a selector builded with the params passed, depending on the settings.selector.method base setting.
 *
 * @param 			{String} 			$block 						The block part of the selector
 * @param 			{String} 			[$element=null] 			The element part of the selector
 * @param 			{String} 			[$modifier=null] 			The modifier part of the selector
 * @param 			{String} 			[$state=null] 				The state part of the selector
 * @param 			{String} 			[$method=BEM] 				The method used to build the selector (BEM or SMACCS)
 * @return 			{String} 										The generated class selector
 *
 * @example
 * s-selector(my-component, item, null, active, BEM); // => .my-component__item--active
 * s-selector(my-component, item, null, active, SMACCS); // => .my-component-item.is-active
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
@function s-selector(
	$block,
	$element : null,
	$modifier : null,
	$state : null,
	$method : sugar('settings.selector.method')
) {

	// @if type-of($block) == map andd not $element and not $modifier {
	// 	@return _s-selector-legacy($block);
	// }

	$sel : $block;
	@if $element {
		@if $method == BEM {
			$sel : "#{$sel}__#{$element}";
		} @else if $method == SMACCS {
			$sel : "#{$sel}-#{$element}";
		}
	}
	@if $modifier {
		@if $method == BEM {
			$sel : "#{$sel}--#{$modifier}";
		} @else if $method == SMACCS {
			$sel : "#{$sel}-#{$modifier}";
		}
	}
	@if $state {
		@if $method == BEM {
			$sel : "#{$sel}--#{$state}";
		} @else if ($method == SMACCS) {
			$sel : "#{$sel}.is-#{$state}";
		}
	}

	// replace the default keyword
	@if $method == BEM {
		$sel : str-replace($sel,'--default','');
	} @else if $method == SMACCS {
		$sel : str-replace($sel, '.is-default','');
		$sel : str-replace($sel,'is-default','');
		$sel : str-replace($sel,'-default','');
	}
	$sel : str-replace($sel,'.default','');

	// return the selector
	@return unquote(".#{$sel}");
}
//
// @function _s-selector-legacy(
// 	$sel
// ) {
// 	$method : sugar('settings.selector.method');
// 	@if type-of($sel) == 'map' {
// 		$sel : map-get($sel,$method);
// 	}
// 	@if not $sel {
// 		@error("The method #{$method} is not available in the passed selector map : #{inspect($map)}");
// 	}
// 	// join the map if needed
// 	@if type-of($sel) == list {
// 		$sel : _join($sel, ',');
// 	}
// 	// check if need to scope vertical rhythme
// 	// @if $vertical-rhythme-scope {
// 	// 	// split
// 	// 	$sels : _split($sel,',');
// 	// 	$new_sels : ();
// 	// 	@each $s in $sels {
// 	// 		$s : #{s-vertical-rhythme-scope-class()}#{$s};
// 	// 		$new_sels : append($new_sels, $s);
// 	// 	}
// 	// 	$sel : _join($new_sels,',');
// 	// }
// 	// replace the --default in selector
// 	@if $method == BEM {
// 		$sel : str-replace($sel,'--default','');
// 	} @else if $method == SMACCS {
// 		$sel : str-replace($sel,'-default','');
// 	}
// 	$sel : str-replace($sel,'.default','');
// 	// return the selector
// 	@return unquote($sel);
// }
