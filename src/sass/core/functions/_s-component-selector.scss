/**
 * Return the css class selector for the current component setted by the [core/mixins/_s-component.scss] mixin
 * and build with the passed arguments.
 * This function generate the class selector depending of the settings.selector.method setting
 *
 * @param 			{String} 			[$element=null] 		The element name of the class selector
 * @param 			{String} 			[$modifier=null] 		The modifier name of the class selector
 * @param 			{String} 			[$state=null] 			The state name of the class selector
 * @return 			{String} 									The generated class selector
 *
 * @example
 * \@incluse s-component('my-component') {
 * 		// if settings.selector.method === 'BEM'
 * 		s-component-selector('item') // => '.my-component__item'
 * 		s-component-selector(null, 'red') // => '.my-component--red'
 * 		s-component-selector('coco',null,'active') // => '.my-component__coco--active'
 * 		// if setting.selector.method === 'SMACCS'
 * 		s-component-selector('item') // => '.my-component-item'
 * 		s-component-selector(null, 'red') // => '.my-component-red'
 * 		s-component-selector('coco',null,'active') // => '.my-component-coco.is-active'
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
@function s-component-selector(
	$element : null,
	$modifier : null,
	$state : null
) {
	$component : s-component();
	@if not $component {
		@error('To use the function s-component-selector, you need to be in a component by using the s-component mixin...');
	}
	@return s-selector($component, $element, $modifier, $state);
}
