@mixin s-formset-input-addon(
	$colors : sugar('settings.components.formset.generate.colors')
) {
	@include s-formset-input-addon-bare();
	@include s-formset-input-addon-style($colors);
}

@mixin s-formset-input-addon-bare(
) {
	@include s-formset-init();

	// pass in the component context
	@include s-component-context('formset') {

		// base
		.input-addon {
			@extend %s-input-bare;
			pointer-events: none;
			// set input styling
			@include s-input-size();

			@include s-vertical-rhythme {
				margin-bottom: 1rem;
			}
		}
	}
}

@mixin s-formset-input-addon-style(
	$colors : sugar('settings.components.formset.generate.colors')
) {
	// parse properties
	@if $_sugar-test-arguments {
		// $colors : s-test-argument('s-formset','colors',map-keys(sugar('settings.colors')),$colors);
	}

	// pass in the component context
	@include s-component-context('formset') {

		@each $color in $colors {

			#{s-selector((
				BEM : (
					'.input-addon--#{$color}',
					'.color--#{$color} .input-addon'
				),
				SMACCS : (
					'.input-addon-#{$color}',
					'.color-#{$color}Â .input-addon'
				)
			))} {
				@include s-input-color($color);

				& ~ .input-reply--#{$color} {
					display: block;
				}
			}
			#{s-selector((
				BEM : (
					'.input-addon--#{$color}',
					'.color--#{$color} .input-addon'
				),
				SMACCS : (
					'.input-addon-#{$color}',
					'.color-#{$color} .input-addon'
				)
			))} {
				background-color: s-color($color, -opacity .08);
				color : s-color($color, -darken 20%);
			}
		}

	}
}
