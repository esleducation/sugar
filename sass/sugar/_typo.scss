//
// Helpers with typography
//

//
// Font mixin
//

// font-size: x rem;
// line-height : y rem ou ratio;
// margin-top: -y / 2 ou -x * ratio / 2;

@mixin s-font(
	$font,
	$reset : true
) {
	$font : _sugar-parse-properties($font, (
		word-wrap : normal break-word initial inherit,
		word-break : normal break-all keep-all initial inherit,
		font-style : normal italic oblique initial inherit,
		font-variant : normal small-caps initial inherit,
		font-weight : normal bold bolder lighter number initial inherit,
		text-decoration :  none underline overline line-through initial inherit,
		text-align : left right center justify initial inherit,
		text-transform : none capitalize uppercase lowercase initial inherit,
		font-stretch : ultra-condensed extra-condensed condensed semi-condensed normal semi-expanded expanded extra-expanded ultra-expanded initial inherit,
		white-space : normal nowrap pre pre-line pre-wrap initial inherit,
		color : color,
		name : string,
		font-size : number,
		line-height : number,
		margin-top : number,
		margin-bottom : number,
		padding-top : number,
		padding-bottom : number,
		max-width : number,
		letter-spacing : number,
		text-indent : number,
		vertical-rhythme : true
	), (
		name : n,
		color : c,
		font-size : fs,
		font-style : fst,
		font-variant : fv,
		font-weight : fw,
		text-decoration : td,
		text-align : ta,
		text-transform : tt,
		font-stretch : fstr,
		white-space : ws,
		line-height : lh,
		margin-top : mt,
		margin-bottom : mb,
		padding-top : pt,
		padding-bottom : pb,
		max-width : mw,
		letter-spacing : ls,
		text-indent : ti,
		word-break : wb,
		word-wrap : ww,
		vertical-rhythme : vr
	));
	// handle nested
	$font : _sugar-handle-nested(font, $font);

	// get values
	$name : map-get-or($font, name);
	$color : map-get($font, color);
	$size : map-get-or($font, font-size, 1rem);
	$font-style : map-get($font, font-style);
	$font-variant : map-get($font, font-variant);
	$font-weight : map-get($font, font-weight);
	$text-decoration : map-get($font, text-decoration);
	$text-align : map-get($font, text-align);
	$text-transform : map-get($font, text-transform);
	$font-stretch : map-get($font, font-stretch);
	$white-space : map-get($font, white-space);
	$line-height : map-get-or($font, line-height, null);
	$margin-top : map-get-or($font, margin-top, 0);
	$margin-bottom : map-get-or($font, margin-bottom, 2);
	$padding-top : map-get-or($font, padding-top, 0);
	$padding-bottom : map-get-or($font, padding-bottom, 0);
	$max-width : map-get-or($font, max-width, false);
	$letter-spacing : map-get($font, letter-spacing);
	$text-indent : map-get($font, text-indent);
	$word-break : map-get($font, word-break);
	$word-wrap : map-get($font, word-wrap);
	$vertical-rhythme : map-get-or($font, vertical-rhythme, sugar('settings.typo.vertical-rhythme'));

	// get the font object
	$f : map-get(sugar('settings.fonts'), $name);

	// calculate number of line height needed
	@if $line-height == null {
		$line-height : strip-units(ceil(rem(px($size))));
	}

	// set the font
	font-family : $name;

	// color
	@if $color {
		color: $color;
	}

	// vertical rhythme ?
	@if $vertical-rhythme {
		$cap-height : map-get($f, cap-height);
		@include s-set-rhythme(
			-font-size $size
			-line-height $line-height
			-margin-top $margin-top
			-margin-bottom $margin-bottom
			-padding-top $padding-top
			-padding-bottom $padding-bottom
			-cap-height $cap-height);
	} @else {
		font-size: rem($size);
		@if $line-height {
			line-height: $line-height;
		}
		@if $margin-bottom {
			margin-bottom : $margin-bottom;
		}
	}

	// max width
	@if $max-width {
		@if type-of($max-width) == number {
			@include s-set-rhythme-width($max-width);
		} @else {
			@include s-set-rhythme-width();
		}
	}

	// font-style
	@if $font-style {
		font-style : $font-style;
	}
	// font-variant
	@if $font-variant {
		font-variant : $font-variant;
	}
	// font-weight
	@if $font-weight {
		font-weight : $font-weight;
	}
	// text-decoration
	@if $text-decoration {
		text-decoration : $text-decoration;
	}
	// text-align
	@if $text-align {
		text-align : $text-align;
	}
	// text-transform
	@if $text-transform {
		text-transform : $text-transform;
	}
	// font-stretch
	@if $font-stretch {
		font-stretch : $font-stretch;
	}
	// white-space
	@if $white-space {
		white-space : $white-space;
	}
	// letter spacing
	@if $letter-spacing {
		letter-spacing : $letter-spacing;
	}
	// text-indent
	@if $text-indent {
		text-indent : $text-indent;
	}
	// word break
	@if $word-break {
		word-break : $word-break;
	}
	// word wrap
	@if $word-wrap {
		word-wrap : $word-wrap;
	}

	// handle nested
	@include _sugar-handle-nested(font) {
		@content;
	}
}

//
// Font face
//
@mixin s-font-face(
	$font-face
) {
	$font-face : _sugar-parse-properties($font-face, (
		ext : eot eot2 otf woff2 woff ttf svg svgz,
		font-weight : normal bold bolder lighter number initial inherit,
		font-style : normal italic oblique initial inherit,
		name : string,
		url : string
	));
	$name : map-get($font-face, name);
	$url : map-get($font-face, url);
	$ext : map-get-or($font-face, ext, ());
	$font-weight : map-get($font-face, font-weight);
	$font-style : map-get($font-face, font-style);

	// protect
	@if $name == null {
		@error("You need to specify a name for your s-font-face statement...");
	}
	@if $url == null {
		@error("You need to specify an url for your s-font-face statement...");
	}

	// get font format from settings
	$font-format : sugar('settings.typo.font-format');

	// process url
	$split : str-explode($url, '.');
	$e : last-nth($split);
	$split : list-pop($split);
	$path : list-implode($split, '.');

	// add extention in list
	@if index($ext, $e) == null {
		$ext : append($ext, $e);
	}

	// loop on each extensions
	$srcs : ();
	@each $e in $ext {
		// get the format
		$format : map-get($font-format, $e);
		$srcs : append($srcs, url('#{$path}.#{$e}') format('#{$format}'), comma);
	}

	// declare font
	@font-face {
		font-family: "#{$name}";
		src : $srcs;
		@if $font-style {
			font-style : $font-style;
		}
		@if $font-weight {
			font-weight : $font-weight;
		}
	}
}

//
// Set rhythme max-width
//
@mixin s-set-rhythme-width(
	$letters-count : sugar('settings.typo.line-letters-count')
) {
	display: block;
	@if unitless($letters-count) {
		max-width : $letters-count + ex;
	} @else {
		max-width : $letters-count;
	}
}

//
// Set rhythme
//
@mixin s-set-rhythme(
	$rhythme
) {
	$f : _sugar-parse-properties($rhythme, (
		font-size : number,
		line-height : number,
		margin-top : number,
		margin-bottom : number,
		padding-top : number,
		padding-bottom : number,
		cap-height : number
	), (
		font-size : fs,
		line-height : lh,
		margin-top: mt,
		margin-bottom: mb,
		padding-top: pt,
		padding-bottom: pb,
		cap-height: ch
	));

	// get the font-size
	$font-size : map-get($f, font-size);

	// transform in rem if are pixels passed
	@if unit($font-size) != px {
		$font-size : px($font-size);
	}

	// set the font-size in rem
	font-size: rem($font-size);

	// set the baseline
	@include s-set-rhythme-baseline($rhythme);
}

@function s-get-rhythme-values(
	$rhythme
) {
	$rhythme : _sugar-parse-properties($rhythme, (
		font-size : number,
		line-height : number,
		margin-top : number,
		margin-bottom : number,
		padding-top : number,
		padding-bottom : number,
		cap-height : number
	), (
		font-size : fs,
		line-height : lh,
		margin-top: mt,
		margin-bottom: mb,
		padding-top: pt,
		padding-bottom: pb,
		cap-height: ch
	));

	@debug($rhythme);

	$font-size : map-get($rhythme, font-size);
	$line-height : map-get-or($rhythme, line-height, 2);
	$margin-top : map-get-or($rhythme, margin-top, 0);
	$margin-bottom : map-get-or($rhythme, margin-bottom, 2);
	$padding-top : map-get-or($rhythme, padding-top, 0);
	$padding-bottom : map-get-or($rhythme, padding-bottom, 0);
	$cap-height : map-get-or($rhythme, cap-height, 0);
	$root-font-size : sugar('settings.typo.font-size');
	
	// process values
	@if $margin-top > 0 {
		@if unit($margin-top) != rem {
			// transform margin top in rems
			$margin-top : rem($margin-top);
			// round the margin top
			$margin-top : round(strip-units($margin-top));
			// set to rem again
			$margin-top : rem($margin-top);
		}
	}
	@if $margin-bottom > 0 {
		@if unit($margin-bottom) != rem {
			// transform margin bottom in rems
			$margin-bottom : rem($margin-bottom);
			// round the margin bottom
			$margin-bottom : round(strip-units($margin-bottom));
			// set to rem again
			$margin-bottom : rem($margin-bottom);
		}
	}
	@if $padding-top > 0 {
		@if unit($padding-top) != rem {
			// transform margin top in rems
			$padding-top : rem($padding-top);
			// round the margin top
			$padding-top : round(strip-units($padding-top));
			// set to rem again
			$padding-top : rem($padding-top);
		}
	}
	@if $padding-bottom > 0 {
		@if unit($padding-bottom) != rem {
			// transform margin top in rems
			$padding-bottom : rem($padding-bottom);
			// round the margin top
			$padding-bottom : round(strip-units($padding-bottom));
			// set to rem again
			$padding-bottom : rem($padding-bottom);
		}
	}
	@if $line-height > 0 {
		@if unit($line-height) != rem {
			// transform margin top in rems
			$line-height : rem($line-height);
			// round the margin top
			$line-height : round(strip-units($line-height));
			// set to rem again
			$line-height : rem($line-height);
		}
	}

	// transform in rem if are pixels passed
	@if unit($font-size) != px {
		$font-size : px($font-size);
	}

	// manage cap height
	@if $cap-height == null {
		$cap-height : 0;
	}

	// protect
	@if type-of($font-size) == number {
		$rootsize: $root-font-size;
		$baseline-shift: ($font-size / 2 * (($line-height * $rootsize / $font-size) - $cap-height)) / $rootsize + 0.00001;
		$baseline-push: $margin-bottom - (($font-size / 2 * (($line-height * $rootsize / $font-size) - $cap-height)) / $rootsize + 0.00001);

		// if we have a padding top, respect it and
		// push a little bit the content lower to respect
		// vertical rhythme
		@if $padding-top and $padding-top >= 1 {
			@return (
				padding-top : $padding-top,
				margin-top : $margin-top,
				margin-bottom : $margin-bottom,
				padding-bottom : $padding-bottom
			);
		} @else {
			$baseline-shift : $baseline-shift % 1;
			$decimal : $baseline-push % 1;
			@if $decimal < 0.5 and $baseline-push < $margin-bottom {
				$baseline-push : $baseline-push + 1;
			} @else if $decimal >= 0.5 and $baseline-push > $margin-bottom {
				$baseline-push : $baseline-push - 1;
			} @else if $decimal < 0.5 and $baseline-push > $margin-bottom {
				$baseline-push : $baseline-push - 1;
			} @else if $decimal >= 0.5 and $baseline-push < $margin-bottom {
				$baseline-push : $baseline-push + 1;
			}
			@return (
				padding-top : $baseline-shift,
				margin-top : $margin-top,
				margin-bottom : $baseline-push,
				padding-bottom : $padding-bottom
			);
		}
	} @else {
		@warn "#{$font-size} is not a valid scale variable";
	}
	@return null;
}

//
// Set fontsize and baseline at once. Mix of fontsize and baseline mixin.
//
@mixin s-set-rhythme-baseline(
	$rhythme
) {
	@debug($rhythme);
	$rh : _sugar-parse-properties($rhythme, (
		font-size : number,
		line-height : number,
		margin-top : number,
		margin-bottom : number,
		padding-top : number,
		padding-bottom : number,
		cap-height : number
	), (
		font-size : fs,
		line-height : lh,
		margin-top: mt,
		margin-bottom: mb,
		padding-top: pt,
		padding-bottom: pb,
		cap-height: ch
	));

	// get the line-height
	$line-height : map-get-or($rh, line-height, 2);

	// get the rhythme values
	$rhythme-values : s-get-rhythme-values($rhythme);

	// set line-height
	line-height: rem($line-height);

	// set rhythme
	@each $prop, $value in $rhythme-values {
		#{$prop} : $value;
	}
}

//
// Show rhythme
//
@mixin s-show-rhythme(
	$color : #0ff
) {
	// overflow: hidden;
	position: relative;
	&:after {
		pointer-events: none;
		content:'';
		display: block;
		position: absolute;
		top:0; left:0;
		width:100%; height:100%;
		background-image: -webkit-linear-gradient(top,$color 0,rgba(255,255,255,0)1px);
		background-image: -moz-linear-gradient(top,$color 0,rgba(255,255,255,0)1px);
		background-image: -o-linear-gradient(top,$color 0,rgba(255,255,255,0)1px);
		background-image: linear-gradient(to bottom,$color 0,rgba(255,255,255,0)1px);
		background-repeat: repeat-y;
		background-size: 100% 1rem;
	}
}

//
// Columns
//
@mixin s-columns(
	$columns
) {
	$columns : _sugar-parse-properties($columns, (
		fill : balance auto initial inherit,
		rule-style : none hidden dotted dashed solid double groove ridge inset outset initial inherit,
		count : number,
		gap : number,
		width : number,
		span : number,
		rule-color : color,
		rule-width : number,
		rule : true,
	), (
		fill : f,
		rule-style : rstl,
		count : c,
		gap : g,
		span : s,
		rule-color : rc,
		rule-width : rw,
		rule : r
	));
	
	// handle nested
	$columns : _sugar-handle-nested(columns, $columns);

	// get values
	$fill : map-get($columns, fill);
	$rule-style : map-get($columns, rule-style);
	$count : map-get-or($columns, count, 2);
	$gap : map-get($columns, gap);
	$width : map-get($columns, width);
	$span : map-get($columns, span);
	$rule-color : map-get($columns, rule-color);
	$rule-width : map-get($columns, rule-width);
	$rule : map-get($columns, rule);

	@if $count {
		column-count : $count;
	}
	@if $width {
		column-width : $width;
	}
	@if $rule {
		column-rule : $rule;
	} @else {
		@if $rule-style {
			column-rule-style : $rule-style;
		}
		@if $rule-color {
			column-rule-color : $rule-color;
		}
		@if $rule-width {
			column-rule-width : $rule-width;
		}
	}
	@if $gap {
		column-gap : $gap;
	}
	@if $fill {
		column-fill : $fill;
	}
	@if $span {
		column-span : $span;
	}

	// handle nested
	@include _sugar-handle-nested(columns) {
		@content;
	}
}

//
// Truncate
//
@mixin _s-truncate() {
	display: inline-block;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}
%s-truncate {
	@include _s-truncate();
}
@mixin s-truncate() {
	@include _s-truncate();
}

//
// Hide text
//
@mixin _s-text-hide() {
	overflow:hidden;
    text-indent:-9000px;
    display:block;
}
%s-text-hide {
	@include _s-text-hide();
}
@mixin s-text-hide() {
	@include _s-text-hide();
}