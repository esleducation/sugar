//
// Helpers with typography
//

//
// Font mixin
//
@mixin font(
	$what
) {
	// get font size
	$font-size : null;
	@if type-of(nth($what,1)) == number {
		$font-size : nth($what,1);
	}
	@if $font-size {
		// @include baseline($font-size);
	}

	// loop on each declared fonts
	@each $name, $value in sugar('settings.fonts') {
		@if index($what, $name) != null {
			font-family: unquote(map-get($value, declaration));
		}
	}

	// parse properties
	// $props : _sugar_parse_properties($what, margin padding rhythm);

	// rhytme
	// $rhythm : map-get($props, rhythm);
	// @if $rhythm {
	// 	@if type-of($rhythme) == list {

	// 	} @else if $rhythme == true {
	// 		margin-top: 20px;
	// 		margin-bottom: 20px;
	// 	}
	// }
}


// this value may vary for each font
// unitless value relative to 1em
$cap-height: 		0.76;


@mixin baseline($font-size, $scale: 2) {

	$base-line-height : strip-units(sugar('settings.typo.line-height'));
	$base-font-size : strip-units(sugar('settings.typo.font-size'));
	$font-size : strip-units($font-size);

	font-size: 0px + $font-size;
	font-size: $font-size / $base-font-size +rem;
	// because you have to include the font size as a number for the keywor you can still get the line-height 

	line-height: rem($base-line-height / $font-size);
	margin-bottom: 0px + $base-line-height;
	margin-bottom: ($base-line-height / $base-font-size)+rem ;

	// rhythm unit
	// $rhythm: $base-line-height * $font-size / $scale;

	// // number of rhythm units that can fit the font-size
	// $lines: ceil(($font-size + 0.001px) / $rhythm);

	// // calculate the new line-height
	// $line-height: $rhythm * $lines / $font-size;

	// use the results
	// font-size: $font-size;
	// line-height: $line-height;

	// $baseline-distance: ($line-height - $cap-height) / 2;



	// // METHOD 1
	// /////////////////

	// // this method can relatively move down elements you may not want to
	// // position: relative;
	// // top: $baseline-distance + em;



	// // METHOD 2
	// /////////////////

	// // if you use this mixin only on elements that have one direction margins
	// // http://csswizardry.com/2012/06/single-direction-margin-declarations/
	// // you can use this method with no worries. 
	// // this method assumes the direction is down and the margin is $base-line-height
	// padding-top: $baseline-distance + em;
	// margin-bottom: $base-line-height - $baseline-distance + em;
}

//
// Convert helpers
//
@function percent($value) {
	@return convert($value, '%');
}
@function px($value) {
	@return convert($value, px);
}
@function pt($value) {
	@return convert($value, pt);
}
@function rem($value) {
	@return convert($value, rem);
}
@function em($value) {
	@return convert($value, em);
}

//
// Convert some values
//
@function convert($value, $convertUnit){

	// get the unit
	$unit : str-slice(#{$value}, -2);
	@if str-slice(#{$value}, -3) == rem {
		$unit : rem;
	}
	
	// get the default font-size
	$font-size : strip-units(sugar('settings.typo.font-size'));

	// strip unit of value
	$value : strip-units($value);

	@if $unit == px {
		@if $convertUnit == em {
			@return $value / $font-size + 0em;
		} @else if $convertUnit == percent {
			@return percentage($value / $font-size);
		} @else if $convertUnit == rem {
			@return $value / $font-size + 0rem;
		} @else {
			@error("Unit #{$unit} cannot be converted to #{$convertUnit}");
			@return null;
		}
	}
	@else if $unit == em {
		@if $convertUnit == px {
			@return $value * $font-size + 0px;
		} @else if $convertUnit == "%" {
			@return percentage($value);
		} @else {
			@error("Unit #{$unit} cannot be converted to #{$convertUnit}");
			@return null;
		}
	}
	@else if $unit == "%" {
		@if $convertUnit == px {
			@return $value * $font-size / 100 + 0px;
		} @else if $convertUnit == em {
			@return $value / 100 + 0em;
		} @else {
			@error("Unit #{$unit} cannot be converted to #{$convertUnit}");
			@return null;
		}
	}
	@else if $unit == pt {
		@if $convertUnit == px {
			@return $value * 1.3333 + 0px;
		} @else if $convertUnit == em {
			@return $value / 12 + 0em;
		} @else if $convertUnit == "%" {
			@return percentage($value / 12);
		} @else {
			@error("Unit #{$unit} cannot be converted to #{$convertUnit}");
			@return null;
		}
	} @else if $unit == rem {
		@if $convertUnit == px {
			@return $value * $font-size + 0px;
		} @else if $convertUnit == pt {
			@return $value * $font-size * 0.75 + 0pt;
		}
	}
}