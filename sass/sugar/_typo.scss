//
// Helpers with typography
//

//
// Font mixin
//

// font-size: x rem;
// line-height : y rem ou ratio;
// margin-top: -y / 2 ou -x * ratio / 2;

@mixin font(
	$font
) {
	$font : _sugar-parse-properties($font, (
		name : string,
		size : number,
		line-height : number
	));
	$name : map-get-or($font, name);
	$size : map-get-or($font, size, 1rem);
	$line-height : map-get-or($font, line-height, 1);

	// get the font object
	$f : map-get(sugar('settings.fonts'), $name);

	// $font-size-rem : strip-units(rem($size));
	$base-line-height : strip-units(sugar('settings.typo.line-height'));
	
	$base-line-height : 1rem * $base-line-height;
	// $lines : ceil($font-size-rem);
	
	// @debug($lines);

	// $computed-line-height : $lines * $base-line-height;

	// @debug($computed-line-height);

	$dec : $line-height % 1;
	@if $dec > 0 {
		$dec : $dec - .5;
		@if $dec < 0 {
			$dec : $dec * -1;
		}
	}
	// $dec : "#{$line-height}";
	// $split : sl-explode($dec,'.');
	// @if length($split) == 2 {
	// 	$dec : nth($split, length($split));
	// 	$dec : unquote($dec);
	// 	$dec : $dec / 10;
	// 	$dec : $dec - .5;
	// 	@debug($dec);
	// 	@if $dec < 0 {
	// 		$dec : $dec * -1;
	// 	}
	// 	@debug($dec);
	// }

	padding: 0;
	margin: 0;
	// set the font
	font-family : unquote(map-get($f, declaration));
	font-size: rem($size);
	line-height: $line-height * $base-line-height;
	// margin-top : - rem($size) * $line-height / 2;
	margin-bottom: $base-line-height + $base-line-height * $dec * 2;
	

	// parse properties
	// $props : _sugar-parse-properties($what, margin padding rhythm);

	// rhytme
	// $rhythm : map-get($props, rhythm);
	// @if $rhythm {
	// 	@if type-of($rhythme) == list {

	// 	} @else if $rhythme == true {
	// 		margin-top: 20px;
	// 		margin-bottom: 20px;
	// 	}
	// }
}

@mixin font-size($size) {
      font-size: 0px + $size;
      font-size: 0rem + $size / $doc-font-size;
      line-height: ceil($size / $doc-line-height) * ($doc-line-height / $size);
      margin-bottom: 0px + $doc-line-height;
      margin-bottom: ($doc-line-height / $doc-font-size) +rem;
}

//
// Truncate
//
@mixin _truncate() {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}
%truncate {
	@include _truncate();
}
@mixin truncate() {
	@include _truncate();
}

//
// Hide text
//
@mixin _hide-text() {
	overflow:hidden;
    text-indent:-9000px;
    display:block;
}
%hide-text {
	@include _hide-text();
}
@mixin hide-text() {
	@include _hide-text();
}

//
// Convert helpers
//
@function percent($value) {
	@return convert($value, '%');
}
@function px($value) {
	@return convert($value, px);
}
@function pt($value) {
	@return convert($value, pt);
}
@function rem($value) {
	@return convert($value, rem);
}
@function em($value) {
	@return convert($value, em);
}

//
// Convert some values
//
@function convert($value, $convertUnit){

	// get the unit
	$unit : str-slice(#{$value}, -2);
	@if str-slice(#{$value}, -3) == rem {
		$unit : rem;
	}
	
	// get the default font-size
	$font-size : strip-units(sugar('settings.typo.font-size'));

	// strip unit of value
	$value : strip-units($value);

	@if $unit == px {
		@if $convertUnit == em {
			@return $value / $font-size + 0em;
		} @else if $convertUnit == percent {
			@return percentage($value / $font-size);
		} @else if $convertUnit == rem {
			@return $value / $font-size + 0rem;
		} @else {
			@error("Unit #{$unit} cannot be converted to #{$convertUnit}");
			@return null;
		}
	}
	@else if $unit == em {
		@if $convertUnit == px {
			@return $value * $font-size + 0px;
		} @else if $convertUnit == "%" {
			@return percentage($value);
		} @else {
			@error("Unit #{$unit} cannot be converted to #{$convertUnit}");
			@return null;
		}
	}
	@else if $unit == "%" {
		@if $convertUnit == px {
			@return $value * $font-size / 100 + 0px;
		} @else if $convertUnit == em {
			@return $value / 100 + 0em;
		} @else {
			@error("Unit #{$unit} cannot be converted to #{$convertUnit}");
			@return null;
		}
	}
	@else if $unit == pt {
		@if $convertUnit == px {
			@return $value * 1.3333 + 0px;
		} @else if $convertUnit == em {
			@return $value / 12 + 0em;
		} @else if $convertUnit == "%" {
			@return percentage($value / 12);
		} @else {
			@error("Unit #{$unit} cannot be converted to #{$convertUnit}");
			@return null;
		}
	} @else if $unit == rem {
		@if $convertUnit == px {
			@return $value * $font-size + 0px;
		} @else if $convertUnit == pt {
			@return $value * $font-size * 0.75 + 0pt;
		}
	}
}