//
// Shapes helpers
//

//
// Corner
//
@mixin s-corner(
	$radius
) {
	@if length($radius) == 1 and type-of($radius) == number {
		border-radius: $radius;
		$radius : remove-nth($radius, 1);
	}
		
	// parse properties
	$props : _sugar-parse-properties($radius, (
		top : true,
		right : true,
		bottom : true,
		left : true,
		top-left : true,
		top-right : true,
		bottom-left : true,
		bottom-right : true
	), (
		top : 't',
		right : 'r',
		bottom : 'b',
		left : 'l',
		top-left : 'tl',
		top-right : 'tr',
		bottom-left : 'bl',
		bottom-right : 'br'
	));

	// handle nested
	$props : _sugar-handle-nested(corner, $props);

	// top
	$top : map-get-or($props, top);
	@if $top and type-of($top) == number or type-of($top) == list {
		border-top-left-radius: $top;
		border-top-right-radius: $top;
	}
	// right
	$right : map-get-or($props, right);
	@if $right and type-of($right) == number or type-of($right) == list {
		border-top-right-radius: $right;
		border-bottom-right-radius: $right;
	}
	// bottom
	$bottom : map-get-or($props, bottom);
	@if $bottom and type-of($bottom) == number or type-of($bottom) == list {
		border-bottom-left-radius: $bottom;
		border-bottom-right-radius: $bottom;
	}
	// left
	$left : map-get-or($props, left);
	@if $left and type-of($left) == number or type-of($left) == list {
		border-top-left-radius: $left;
		border-bottom-left-radius: $left;
	}
	// top left
	$top-left : map-get-or($props, top-left);
	@if $top-left and type-of($top-left) == number or type-of($top-left) == list {
		border-top-left-radius: $top-left;
	}
	// top-right
	$top-right : map-get-or($props, top-right);
	@if $top-right and type-of($top-right) == number or type-of($top-right) == list {
		border-top-right-radius: $top-right;
	}
	// bottom-left
	$bottom-left : map-get-or($props, bottom-left);
	@if $bottom-left and type-of($bottom-left) == number or type-of($bottom-left) == list {
		border-bottom-left-radius: $bottom-left;
	}
	// bottom-right
	$bottom-right : map-get-or($props, bottom-right);
	@if $bottom-right and type-of($bottom-right) == number or type-of($bottom-right) == list {
		border-bottom-right-radius: $bottom-right;
	}

	// handle nested
	@include _sugar-handle-nested(corner) {
		@content;
	}
}
@mixin s-border-radius($radius) {
	@include s-corner($radius);
}


//
// Round
//
@mixin s-round(
	$props : null,
	$border : null
) {
	@if $props {
		$props : _sugar-parse-properties($props, (
			width : number,
			height : number,
			color : color
		));
		$props : _sugar-handle-nested(round, $props);
	
		// build
		$width : map-get-or($props, width w);
		$height : map-get-or($props, height h, $width);
		$color : map-get-or($props, color c);
		width: $width;
		height: $height;
		@if $color {
			background-color: $color;
		}
	}
	@if $border {
		$border : _sugar-parse-properties($border, (
			width : number,
			color : color,
			style : 'solid|dotted|dashed|double|groove|ridge|inset|outset|initial|inherit'
		), (
			style : 's'
		));

		// handle nested
		$border : _sugar-handle-nested(round-border, $border);
		$width : map-get-or($border, width w);
		$color : map-get-or($border, color c);
		$style : map-get-or($border, style s, solid);
		@if $width and $color {
			border: $style $width $color;
		}
	}
	border-radius:50%;
	overflow: hidden;
	> img {
		border-radius:50%;
		overflow: hidden;
	}

	// handle nested
	@include _sugar-handle-nested(round, round-border) {
		@content;
	}
}


//
// Restangle
//
@mixin s-rect(
	$size
) {
	$size : _sugar-parse-properties($size, (
		width : number,
		height : number
	));
	$size : _sugar-handle-nested(size, $size);
	$width : map-get($size, width);
	$height : map-get($size, height);
	@if type-of($width) != number or type-of($height) != number {
		@error "To create a rectangle, you need to specify a width and an height";
	}
	width : $width;
	height : $height;
	@include _sugar-handle-nested(size) {
		@content;
	}
}


//
// Bubble
//
@mixin s-bubble(
	$base : null,
	$border : null
) {

	$directions : 'top|right|r|bottom|b|left|l|top-left|tl|top-right|tr|bottom-left|bl|bottom-right|br';
	$positions : 'top|right|bottom|left|top-left|top-right|right-top|right-bottom|bottom-left|bottom-right|left-bottom|left-top';
	$base : _sugar-parse-properties($base, (
		position : $positions,
		color : color,
		arrow-width : number,
		arrow-height : number,
		offset : number
	), (
		position : 'p',
		arrow-width : 'aw',
		arrow-height : 'ah',
		offset : 'o'
	));
	$border_map : _sugar-parse-properties($border, (
		width : number,
		color : color
	));
	$base : _sugar-handle-nested(bubble, $base);
	$border_map : _sugar-handle-nested(bubble-border, $border_map);
	$position : map-get-or($base, position, bottom);
	$color : map-get-or($base, color, red);
	$width : map-get-or($base, arrow-width, 20px);
	$height : map-get-or($base, arrow-height, 10px);
	$b-width : map-get-or($border_map, width);
	$b-color : map-get-or($border_map, color, darken(red,10%));
	$offset : map-get-or($base, offset, 0);

	// direction
	$direction : top;
	@if $position == 'right' or $position == 'right-top' or $position == 'right-bottom' {
		$direction : right;
	} @else if $position == 'bottom' or $position == 'bottom-left' or $position == 'bottom-right' {
		$direction : bottom;
	} @else if $position == 'left' or $position == 'left-bottom' or $position == 'left-top' {
		$direction : left;
	}

	// create the bubble
	@include s-triangle($width $height $color $direction -transform-origin base, $border);

	position: relative;
	background: $color;
	width: auto;
	height: auto;
	@if $b-width {
		border: $b-width solid $b-color;
	}

	&:after,
	&:before {
		position: absolute;
		@if $position == top {
			top: - $height;
			left: 50%;
			margin-left: $offset - $width * .5;
			// transform: translateX(-50%) translateY(-100%);
		} @else if $position == top-left {
			top: - $height;
			left: 0;
			// transform: translateY(-100%);
			margin-left: $offset;
		} @else if $position == top-right {
			top: - $height;
			left: 100%;
			// transform: translateY(-100%) translateX(-100%);
			margin-left: $offset * -1;
		} @else if $position == right {
			top: 50%;
			left: 100%;
			// transform: translateY(-50%);
			margin-top: $offset - $width * .5;
		} @else if $position == right-top {
			top: 0;
			left: 100%;
			margin-top: $offset;
		} @else if $position == right-bottom {
			top: 100%;
			left: 100%;
			// transform: translateY(-100%);
			margin-top: $offset * -1 - $width;
		} @else if $position == bottom {
			top: 100%;
			left: 50%;
			// transform: translateX(-50%);
			margin-left: $offset - $width * .5;
		} @else if $position == bottom-left {
			top: 100%;
			left: 0;
			margin-left: $offset;
		} @else if $position == bottom-right {
			top: 100%;
			left: 100%;
			// transform: translateX(-100%);
			margin-left: $offset * -1 - $width;
		} @else if $position == left {
			top: 50%;
			left: - $height;
			// transform: translateX(-100%) translateY(-50%);
			margin-top: $offset - $width * .5;
		} @else if $position == left-top {
			top: 0;
			left: - $height;
			// transform: translateX(-100%);
			margin-top: $offset;
		} @else if $position == left-bottom {
			top: 100%;
			left: - $height;
			// transform: translateX(-100%) translateY(-100%);
			margin-top: $offset * -1 - $width;
		}
	}
	
	@include _sugar-handle-nested(bubble, bubble-border) {
		@content;
	}
}



//
// Triangle
//
@mixin s-triangle(
	$triangle,
	$border : null
) {

	$triangle : _sugar-parse-properties($triangle, (
		width : number,
		height : number,
		color : color,
		direction : 'top|t|right|r|bottom|b|left|l|top-left|tl|top-right|tr|bottom-left|bl|bottom-right|br',
		transform-origin : 'base|center|top'
	), (
		direction : 'd',
		transform-origin : 'to'
	));
	$border : _sugar-parse-properties($border, (
		width : number,
		color : color
	));
	$triangle : _sugar-handle-nested(triangle, $triangle);
	$border : _sugar-handle-nested(triangle-border, $border);

	$direction : map-get-or($triangle, direction, top);
	$width : map-get-or($triangle, width, 100px);
	$height : map-get-or($triangle, height, 100px);
	$color : map-get-or($triangle, color, red);
	$b-width : map-get-or($border, width);
	$b-color : map-get-or($border, color, darken(red,20%));
	$transform-origin : map-get-or($triangle, transform-origin, center);

	// swap width and height of arrow
	@if $direction == right or $direction == left {
		$_width : $width;
		$width : $height;
		$height : $_width;
	}

	display: inline-block;
	width: $width;
	height: $height;
	border-style: solid;
	-webkit-transform:rotate(360deg);
	&:before,
	&:after {
		color: transparent;
		content:'';
		display: block;
		position: absolute;
		width:0; height:0;
		border-style: solid;
		top:0; left:0;
	}
	// top
	@if $direction == top or $direction == t {
		&:after {
			border-width: 0 $width*.5 $height $width*.5;
			border-color: transparent transparent $color transparent;
		}
		@if $b-width {
			$angle : atan($height / ($width*.5));
			$hyp : $height / sin($angle);
			$centerX : (0 + $width + $width*.5) / 3;
			$centerY : (0 + 0 + $height) / 3;
			$ratio-width : $b-width * 2;
			// @if $transform-origin == base {
			// 	$ratio-width : $b-width;
			// }
			$ratio : 1 / $height * ($height + $ratio-width);
			&:before {
				@if $transform-origin == base {
					transform-origin: $centerX $height;
				} @else {
					transform-origin: $centerX ($height - $centerY);
				}
				transform:scale($ratio);
				border-width: 0 $width*.5 $height $width*.5;
				border-color: transparent transparent $b-color transparent;	
			}
		}
	} @else if $direction == right or $direction == r {
		&:after {
			border-width: $height*.5 0 $height*.5 $width;
			border-color: transparent transparent transparent $color;
		}
		@if $b-width {
			$angle : atan($width / ($height*.5));
			$hyp : $width / sin($angle);
			$centerX : (0 + 0 + $width) / 3;
			$centerY : (0 + $height + $height*.5) / 3;
			$ratio-width : $b-width * 2;
			// @if $transform-origin == base {
			// 	$ratio-width : $b-width;
			// }
			$ratio : 1 / $height * ($height + $ratio-width);
			&:before {
				@if $transform-origin == base {
					transform-origin: 0 $centerY;
				} @else {
					transform-origin: ($width - $centerX) $centerY;
				}
				transform:scale($ratio);
				border-width: $height*.5 0 $height*.5 $width;
				border-color: transparent transparent transparent $b-color;
			}
		}
	} @else if $direction == bottom or $direction == b {
		&:after {
			border-width: $height $width*.5 0 $width*.5;
			border-color: $color transparent transparent transparent;
		}
		@if $b-width {
			$angle : atan($height / ($width*.5));
			$hyp : $height / sin($angle);
			$centerX : (0 + $width + $width*.5) / 3;
			$centerY : (0 + 0 + $height) / 3;
			$ratio-width : $b-width * 2;
			// @if $transform-origin == base {
			// 	$ratio-width : $b-width;
			// }
			$ratio : 1 / $width * ($width + $ratio-width);
			&:before {
				@if $transform-origin == base {
					transform-origin: $centerX 0;
				} @else {
					transform-origin: $centerX $centerY;
				}
				transform:scale($ratio);
				border-width: $height $width*.5 0 $width*.5;
				border-color: $b-color transparent transparent transparent;	
			}
		}
	} @else if $direction == left or $direction == l {
		&:after {
			border-width: $height*.5 $width $height*.5 0;
			border-color: transparent $color transparent transparent;
		}
		@if $b-width {
			$angle : atan($width / ($height*.5));
			$hyp : $width / sin($angle);
			$centerX : (0 + 0 + $width) / 3;
			$centerY : (0 + $height + $height*.5) / 3;
			$ratio-width : $b-width * 2;
			// @if $transform-origin == base {
			// 	$ratio-width : $b-width;
			// }
			$ratio : 1 / $height * ($height + $ratio-width);
			&:before {
				@if $transform-origin == base {
					transform-origin: $width $centerY;
				} @else {
					transform-origin: ($width - $centerX) $centerY;
				}
				transform:scale($ratio);
				border-width: $height*.5 $width $height*.5 0;
				border-color: transparent $b-color transparent transparent;
			}
		}
	} @else if $direction == top-left or $direction == tl {
		&:after {
			border-width: $height $width 0 0;
			border-color: $color transparent transparent transparent;
		}
		@if $b-width {
			$centerX : (0 + $width + $width) / 3;
			$centerY : (0 + 0 + $height) / 3;
			$ratio-width : $b-width * 2;
			// @if $transform-origin == base {
			// 	$ratio-width : $b-width;
			// }
			$ratio : 1 / $height * ($height + $ratio-width);
			&:before {
				transform-origin: ($width - $centerX) $centerY;
				transform:scale($ratio);
				border-width: $height $width 0 0;
				border-color: $b-color transparent transparent transparent;
			}
		}
	} @else if $direction == top-right or $direction == tr {
		&:after {
			border-width: 0 $width $height 0;
			border-color: transparent $color transparent transparent;
		}
		@if $b-width {
			$centerX : (0 + $width + $width) / 3;
			$centerY : (0 + 0 + $height) / 3;
			$ratio-width : $b-width * 2;
			// @if $transform-origin == base {
			// 	$ratio-width : $b-width;
			// }
			$ratio : 1 / $height * ($height + $ratio-width);
			&:before {
				transform-origin: $centerX $centerY;
				transform:scale($ratio);
				border-width: 0 $width $height 0;
				border-color: transparent $b-color transparent transparent;
			}
		}
	} @else if $direction == bottom-left or $direction == bl {
		&:after {
			border-width: $height 0 0 $width;
			border-color: transparent transparent transparent $color;
		}
		@if $b-width {
			$centerX : (0 + 0 + $width) / 3;
			$centerY : (0 + $height + $height) / 3;
			$ratio-width : $b-width * 2;
			// @if $transform-origin == base {
			// 	$ratio-width : $b-width;
			// }
			$ratio : 1 / $height * ($height + $ratio-width);
			&:before {
				transform-origin: $centerX $centerY;
				transform:scale($ratio);
				border-width: $height 0 0 $width;
				border-color: transparent transparent transparent $b-color;
			}
		}
	} @else if $direction == bottom-right or $direction == br {
		&:after {
			border-width: 0 0 $height $width;
			border-color: transparent transparent $color transparent;
		}
		@if $b-width {
			$centerX : (0 + $width + $width) / 3;
			$centerY : (0 + $height + $height) / 3;
			$ratio-width : $b-width * 2;
			// @if $transform-origin == base {
			// 	$ratio-width : $b-width;
			// }
			$ratio : 1 / $height * ($height + $ratio-width);
			&:before {
				transform-origin: $centerX $centerY;
				transform:scale($ratio);
				border-width: 0 0 $height $width;
				border-color: transparent transparent $b-color transparent;
			}
		}
	}

	@include _sugar-handle-nested(triangle, triangle-border) {
		@content;
	}
}