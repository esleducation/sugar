//
// Some helpers mixins
//

//
// Position
//
@mixin s-position(
	$position
) {
	$position : _sugar-parse-properties($position, (
		position : fixed relative absolute,
		top : number,
		right : number,
		bottom : number,
		left : number,
		z : number
	), (
		position : p,
		top : t y,
		right : r,
		bottom : b,
		left : l x
	));

	// handle nested
	$position : _sugar-handle-nested(position, $position);

	// get values
	$pos : map-get($position, position);
	$top : map-get($position, top);
	$right : map-get($position, right);
	$bottom : map-get($position, bottom);
	$left : map-get($position, left);
	$z : map-get($position, z);

	@if $pos {
		position : $pos;
	}
	@if $z {
		transform: translateZ($z);
	}
	@if $top {top: $top; }
	@if $right { right: $right; }
	@if $bottom { bottom: $bottom; }
	@if $left { left: $left; }

	// handle nested
	@include _sugar-handle-nested(position) {
		@content;
	}
}

//
// Translate
//
@mixin s-translate(
	$translate
) {
	$translate : _sugar-parse-properties($translate, (
		x : number,
		y : number,
		z : number
	));
	
	// handle nested
	$translate : _sugar-handle-nested(translate, $translate);

	// get values
	$x : map-get($translate, x);
	$y : map-get($translate, y);
	$z : map-get($translate, z);

	// build translate
	$translates : ();
	@if $x {
		$translates : append($translates, translateX($x));
	}
	@if $y {
		$translates : append($translates, translateY($y));
	}
	@if $z {
		$translates : append($translates, translateZ($z));
	}
	transform : $translates;

	// handle nested
	@include _sugar-handle-nested(translate) {
		@content;
	}
}

//
// Transform
//
@mixin s-transform(
	$transform
) {
	// parse properties
	$transform : _sugar-parse-properties($transform, null);

	// handle nested transforms
	$transform : _sugar-handle-nested(transform, $transform);

	// build transform
	$transforms : ();
	@each $name, $value in $transform {
		$values : ();
		@each $val in $value {
			$values : append($values, $val, comma);
		}
		$transforms : append($transforms, unquote("#{$name}(#{$values})"));
	}
	transform : $transforms;

	// handle nested transforms
	@include _sugar-handle-nested(transform) {
		@content;
	}
}

//
// Ratio
//
@mixin s-ratio(
	$ratio
) {
	$ratio : _sugar-parse-properties($ratio, (
		type : before after,
		ratio : number
	));
	$rat : map-get($ratio, ratio);
	$type : map-get-or($ratio, type, before);
	position: relative;
	overflow: hidden;
	&:#{$type} {
		content:'';
		display: block;
		height: 0;
		padding-top: percentage(1 / $rat);
	}
}

//
// Fit
// Make an element 100% width and height
//
@mixin _s-fit() {
	width: 100%;
	height: 100%;
}
%s-fit { @include _s-fit(); }
@mixin s-fit() { @include _s-fit(); }

//
// Size
//
@mixin s-size(
	$size
) {
	$size : _sugar-parse-properties($size, (
		size : cover contain,
		width : number,
		height : number
	), (
		size : s
	));

	// handle nested
	$size : _sugar-handle-nested(size, $size);

	// get values
	$width : map-get($size, width);
	$height : map-get($size, height);
	$s : map-get($size, size);

	// apply values
	@if $s {
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translateX(-50%) translateY(-50%);
		@if $s == cover {
			min-width: 100%;
			min-height: 100%;
		} @else if $s == contain {
			max-width:100%;
			max-height:100%;
		}
	} @else {
		@if $width {
			width : $width;
		}
		@if $height {
			height : $height;
		}
	}

	// handle nested
	@include _sugar-handle-nested(size) {
		@content;
	}
}

//
// Visually hidden
//
@mixin _s-visually-hidden {
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	overflow: hidden;
	clip: rect(0 0 0 0);
	clip: rect(0, 0, 0, 0);
	position: absolute;
}
%s-visually-hidden {
	@include _s-visually-hidden();
}
@mixin s-visually-hidden() {
	@include _s-visually-hidden();
}