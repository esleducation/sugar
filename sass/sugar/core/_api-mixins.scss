//
// Sugar mixin
//
// @mixin sugar(
// 	$what...
// ) {
// 	@if type-of(nth($what,1)) == map {
// 		// setup
// 		@include s-setup(nth($what,1));
// 	} @else if nth($what,1) == classes {
// 		@include s-classes();
// 	}
// }
@mixin s(
	$what...
) {
	@include sugar($what...);
}


//
// Setup
//
@mixin s-setup(
	$settings
) {
	$_sugar-settings : map-extend($_sugar-settings, $settings, true) !global;
}


//
// Component setup
//
@mixin s-component-setup(
	$settings
) {
	// check if we have already some settings for this components
	$keys : map-keys($settings);
	@if length($keys) != 1 {
		@error("A components need to be setting up with a unique key map...");
	}
	$name : nth($keys,1);
	@if map-get($_sugar-settings, $name) {
		$new-settings : map-extend($settings, map-get($_sugar-settings, $name));
		$_sugar-settings : map-set($_sugar-settings, $name, $new-settings) !global;
	} @else {
		$_sugar-settings : map-set($_sugar-settings, $name, $settings) !global;
	}
}


//
// Register helper class
//
@mixin s-register-class(
	$class
) {
	$class : s-parse-properties($class, (
		name : string,
		namespace : string
	), (
		name : n,
		namespace : ns
	));
	$name : map-get($class, name);
	$namespace : map-get($class, namespace);

	// protect
	@if not $name {
		@error('s-register-class need a name');
	}
	@if not $namespace {
		@error('s-register-class need a namespace');
	}

	// register the class
	$split : _split($namespace, '.');
	$_sugar-classes : _set($_sugar-classes, $split, $name) !global;
	%#{$name} {
		@content;
	}
}


//
// Classes
//
@mixin s-classes() {
	// font-awesome
	$fa-icons : sugar('settings.font-awesome.icons');
	@if $fa-icons {
		@each $icon in $fa-icons {
			.fa-#{$icon} {
				@extend %fa;
				@extend %fa-#{$icon} !optional;
			}
		}
	}

	$filters : sugar('settings.filters');
	@each $name, $filter in $filters {
		@include s-register-class(
			-name 'f-#{$name}'
			-namespace 'helper.filter.#{$name}'
		) {
			@include s-filter($filter);
		}
	}

	// transitions
	$transitions : sugar('settings.transition.transitions');
	@each $name, $transition in $transitions {
		@include s-register-class(
			-name 't-#{$name}'
			-namespace 'helper.transition.#{$name}'
		) {
			@include s-transition($transition);
		}
	}

	$spaces : sugar('settings.sizes');
	@each $name, $space in $spaces {
		@include s-register-class(
			-name 'm-b-#{$name}'
			-namespace 'helper.margin.bottom.#{$name}'
		) {
			margin-bottom : s-space($name);
		}
		@include s-register-class(
			-name 'm-t-#{$name}'
			-namespace 'helper.margin.top.#{$name}'
		) {
			margin-top : s-space($name);
		}
		@include s-register-class(
			-name 'm-l-#{$name}'
			-namespace 'helper.margin.left.#{$name}'
		) {
			margin-left : s-space($name);
		}
		@include s-register-class(
			-name 'm-r-#{$name}'
			-namespace 'helper.margin.right.#{$name}'
		) {
			margin-right : s-space($name);
		}
		@include s-register-class(
			-name 'm-s-#{$name}'
			-namespace 'helper.margin.side.#{$name}'
		) {
			margin-left : s-space($name);
			margin-right : s-space($name);
		}

		@include s-register-class(
			-name 'p-b-#{$name}'
			-namespace 'helper.padding.bottom.#{$name}'
		) {
			padding-bottom : s-space($name);
		}
		@include s-register-class(
			-name 'p-t-#{$name}'
			-namespace 'helper.padding.top.#{$name}'
		) {
			padding-top : s-space($name);
		}
		@include s-register-class(
			-name 'p-l-#{$name}'
			-namespace 'helper.padding.left.#{$name}'
		) {
			padding-left : s-space($name);
		}
		@include s-register-class(
			-name 'p-r-#{$name}'
			-namespace 'helper.padding.right.#{$name}'
		) {
			padding-right : s-space($name);
		}
		@include s-register-class(
			-name 'p-s-#{$name}'
			-namespace 'helper.padding.side.#{$name}'
		) {
			padding-left : s-space($name);
			padding-right : s-space($name);
		}
	}

	// colors
	$colors : sugar('settings.colors');
	@each $name, $color in $colors {
		@if $name != classes {
			$modifiers : ();
			@if type-of($color) == map {
				$modifiers : map-get($color, modifiers);
				$color : map-get($color, color);
			}	
			$cls : unquote("c-#{$name}");
			@include s-register-class(
				-name $cls
				-namespace 'helper.color.#{$name}.color'
			) {
				color : $color;
			}
			$cls : unquote("bkg-#{$name}");
			@include s-register-class(
				-name $cls
				-namespace 'helper.color.#{$name}.bkg'
			) {
				background-color : $color;
			}

			// modifiers
			@if $modifiers {
				@each $mod-name, $mod in $modifiers {
					$cls : unquote("c-#{$name}--#{$mod-name}");
					@include s-register-class(
						-name $cls
						-namespace 'helper.color.#{$name}.modifier.#{$mod-name}.color'
					) {
						color : s-color($name, $mod-name);
					}
					$cls : unquote("bkg-#{$name}--#{$mod-name}");
					@include s-register-class(
						-name $cls
						-namespace 'helper.color.#{$name}.modifier.#{$mod-name}.bkg'
					) {
						background-color : s-color($name, $mod-name);
					}
				}
			}
		}
	}

	// classes
	$classes : sugar('settings.classes');
	@if $classes {
		@each $namespace in $classes {
			// get values
			$values : _get($_sugar-classes, _split($namespace,'.'));
			// get values
			@if type-of($values) == map {
				$values : map-deep-values($values);
				// loop to create each classes
				@each $value in $values {
					.#{$value} {
						@extend %#{$value} !optional;
					}
				}
			} @else if type-of($values) == string {
				.#{$values} {
					@extend %#{$values} !optional;
				}
			}
		}
	}

	// animatecss
	%animatecss-animated {
		animation-duration : sugar('settings.animate-css.duration');
		animation-fill-mode : sugar('settings.animate-css.fill-mode');
		animation-timing-function : sugar('settings.animate-css.ease');
	}
	@each $anim in sugar('settings.animate-css.animations') {
		.#{$anim} {
			@extend %animatecss-animated;
			@extend %#{$anim} !optional;
		}
	}
}


//
// Property proxy
//
@mixin s-property-proxy(
	$property,
	$value
) {
	@if $property == color {
		#{$property} : s-color($value);
	} @else if $property == font-family {
		#{$property} : s-font-family($value);
	} @else {
		#{$property} : $value;
	} 
}