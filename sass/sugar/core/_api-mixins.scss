//
// Sugar mixin
//
@mixin sugar(
	$what...
) {
	@if type-of(nth($what,1)) == map {
		// setup
		@include s-setup(nth($what,1));
	} @else if nth($what,1) == classes {
		// classes
		$packages : null;
		@if length($what) == 2 {
			$packages : nth($what,2);
		}
		@include s-classes($packages);
	}
}
@mixin s(
	$what...
) {
	@include sugar($what...);
}


//
// Setup
//
@mixin s-setup(
	$settings
) {
	$_sugar-settings : map-extend($_sugar-settings, $settings, true) !global;
}


//
// Register helper class
//
@mixin s-register-class(
	$class
) {
	$class : s-parse-properties($class, (
		name : string,
		namespace : string
	), (
		name : n,
		namespace : ns
	));
	$name : map-get($class, name);
	$namespace : map-get($class, namespace);

	// protect
	@if not $name {
		@error('s-register-class need a name');
	}
	@if not $namespace {
		@error('s-register-class need a namespace');
	}

	// register the class
	$split : _split($namespace, '.');
	$_sugar-classes : _set($_sugar-classes, $split, $name) !global;
	%#{$name} {
		@content;
	}
}


//
// Classes
//
@mixin s-classes(
	$packages
) {
	// font-awesome
	$fa-icons : sugar('settings.font-awesome.classes');
	@if $fa-icons {
		@each $icon in $fa-icons {
			.fa-#{$icon} {
				@extend %fa;
				@extend %fa-#{$icon} !optional;
			}
		}
	}

	// classes
	$classes : sugar('settings.classes');
	@if $classes {
		@each $namespace in $classes {
			// get values
			$values : _get($_sugar-classes, _split($namespace,'.'));
			// get values
			@if type-of($values) == map {
				$values : map-deep-values($values);
				// loop to create each classes
				@each $value in $values {
					.#{$value} {
						@extend %#{$value} !optional;
					}
				}
			} @else if type-of($values) == string {
				.#{$values} {
					@extend %#{$values} !optional;
				}
			}
		}
	}

	// animatecss
	%animatecss-animated {
		animation-duration : sugar('settings.animate-css.duration');
		animation-fill-mode : sugar('settings.animate-css.fill-mode');
		animation-timing-function : sugar('settings.animate-css.ease');
	}
	@each $anim in $sugar-animatecss {
		.#{$anim} {
			@extend %animatecss-animated;
			@extend %#{$anim} !optional;
		}
	}

	// transitions
	@if $packages == null or index($package, transitions) {
		$transitions : sugar('settings.transitions');
		@each $name, $transition in $transitions {
			@if type-of($transition) == map {
				$t : map-get($transition, transition);
				$classes : map-get($transition, classes);
				@if $classes {
					.t-#{$name} {
						@include s-transition($name);
					}
				}
			}
		}
	}

	// colors
	@if $packages == null or index($package, colors) {
		$colors : sugar('settings.colors');
		$classes-color : sugar('settings.colors.classes.color');
		$classes-color-mod : sugar('settings.colors.classes.color-modifier');
		$classes-bkg : sugar('settings.colors.classes.bkg');
		$classes-bkg-mod : sugar('settings.colors.classes.bkg-modifier');
		@each $name, $color in $colors {
			$modifiers : ();
			@if type-of($color) == map {
				$c : map-get($color, color);
				$modifiers : map-get($color, modifiers);
				$classes : map-get($color, classes);
				@if $classes {
					@if $classes == true or in-list($classes, color c) {
						$cls : str-replace($classes-color, '{color}', "#{$name}");
						#{unquote(".#{$cls}")} {
							color : $c;
						}
					}
					@if $classes == true or in-list($classes, background-color background bkg) {
						$cls : str-replace($classes-bkg, '{color}', "#{$name}");
						#{unquote(".#{$cls}")} {
							background-color : $c;
						}
					}
					// modifiers
					@if $modifiers {
						@each $mod-name, $mod in $modifiers {
							@if $classes == true or in-list($classes, color c) {
								$cls : str-replace($classes-color-mod, '{color}', "#{$name}");
								$cls : str-replace($cls, '{modifier}', $mod-name);
								#{unquote(".#{$cls}")} {
									color : s-color($name, $mod-name);
								}
							}
							@if $classes == true or in-list($classes, background-color background bkg) {
								$cls : str-replace($classes-bkg-mod, '{color}', "#{$name}");
								$cls : str-replace($cls, '{modifier}', $mod-name);
								#{unquote(".#{$cls}")} {
									background-color : s-color($name, $mod-name);
								}
							}
						}
					}
				}
			}
		}
	}

	// filters
	@if $packages == null or index($package, filters) {
		$filters : sugar('settings.filters');
		@each $name, $filter in $filters {
			@if type-of($filter) == map {
				$f : map-get($filter, filter);
				$classes : map-get($filter, classes);
				@if $classes {
					.f-#{$name} {
						@include s-filter($f);
					}
				}
			}
		}
	}

	// sizes
	@if $packages == null or index($package, sizes) {
		$sizes : sugar('settings.sizes');
		@each $name, $size in $sizes {
			@if type-of($size) == map {
				$s : map-get($size, size);
				$classes : map-get($size, classes);
				@if $classes {

					// margins
					@if $classes == true or in-list($classes, margin m margin-bottom m-b) {
						.m-b-#{$name} {
							margin-bottom : s-size($name);
						}
					}
					@if $classes == true or in-list($classes, margin m margin-top m-t) {
						.m-t-#{$name} {
							margin-top : s-size($name);
						}
					}
					@if $classes == true or in-list($classes, margin m margin-left m-l) {
						.m-l-#{$name} {
							margin-left : s-size($name);
						}
					}
					@if $classes == true or in-list($classes, margin m margin-right m-r) {
						.m-r-#{$name} {
							margin-right : s-size($name);
						}
					}
					@if $classes == true or in-list($classes, margin m margin-side m-s) {
						.m-s-#{$name} {
							margin-left : s-size($name);
							margin-right : s-size($name);
						}
					}

					// paddings
					@if $classes == true or in-list($classes, padding p padding-bottom p-b) {
						.p-b-#{$name} {
							padding-bottom : s-size($name);
						}
					}
					@if $classes == true or in-list($classes, padding p padding-top p-t) {
						.p-t-#{$name} {
							padding-top : s-size($name);
						}
					}
					@if $classes == true or in-list($classes, padding p padding-left p-l) {
						.p-l-#{$name} {
							padding-left : s-size($name);
						}
					}
					@if $classes == true or in-list($classes, padding p padding-right p-r) {
						.p-r-#{$name} {
							padding-right : s-size($name);
						}
					}
					@if $classes == true or in-list($classes, padding p padding-side p-s) {
						.p-s-#{$name} {
							padding-left : s-size($name);
							padding-right : s-size($name);
						}
					}
				}
			}
		}
	}
}


//
// Property proxy
//
@mixin s-property-proxy(
	$property,
	$value
) {
	@if $property == color {
		#{$property} : s-color($value);
	} @else {
		#{$property} : $value;
	}
}