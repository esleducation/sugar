//
// Loaders specific
//

@mixin s-loader(
	$loader : ()
) {
	$loader : _sugar-parse-properties($loader, (
		type : bars spinner-1 spinner-2 spinner-3 spinner-circles-1 spinner-circles-2 spinner-circles-3 circles,
		color : color,
		background : color,
		duration : second,
		size : number,
		width : number
	));

	$type : map-get-or($loader, type, spinner-1);
	$color : map-get-or($loader, color, #555);
	$duration : map-get-or($loader, duration, .5s);
	$size : map-get-or($loader, size, s-rem(20px));
	$background : map-get-or($loader, background, white);
	$width : map-get($loader, width);

	@if $type == bars {
		@include _s-loader-bars($color, $duration, $size);
	} @else if $type == spinner-1 {
		@include _s-loader-spinner-1($color, $duration, $size, $width);
	} @else if $type == spinner-2 {
		@include _s-loader-spinner-2($color, $duration, $size, $background, $width);
	} @else if $type == spinner-3 {
		@include _s-loader-spinner-3($color, $duration, $size, $background, $width);
	} @else if $type == spinner-circles-1 {
		@include _s-loader-spinner-circles-1($color, $duration, $size, $width);
	} @else if $type == spinner-circles-2 {
		@include _s-loader-spinner-circles-2($color, $duration, $size, $width);
	} @else if $type == spinner-circles-3 {
		@include _s-loader-spinner-circles-3($color, $duration, $size, $width);
	} @else if $type == circles {
		@include _s-loader-circles($color, $duration, $size);
	}
}

@mixin s-loader-grid(
	$props : (),
	$animation : ()
) {
	$props : _sugar-parse-properties($props, (
		color : color,
		cols : number,
		rows : number,
		size : number,
		gap : number,
		shape : circle rect
	));
	$animation : _sugar-parse-properties($animation, (
		steps : integer,
		spread : number,
		rotate : number,
		spin : number,
		scale : number,
		opacity : number,
		duration : second,
		delay : second
	));

	$offset : 200px;

	$color : map-get-or($props, color, red);
	$cols : map-get-or($props, cols, 5);
	$rows : map-get-or($props, rows, 5);
	$size : map-get-or($props, size, 10px);
	$gap : map-get-or($props, gap, 5px);
	$shape : map-get-or($props, shape, rect);

	$a-steps : map-get-or($animation, steps, 5);
	$a-spread : map-get($animation, spread);
	$a-rotate : map-get($animation, rotate);
	$a-spin : map-get($animation, spin);
	$a-scale : map-get($animation, scale);
	$a-opacity : map-get($animation, opacity);
	$a-duration : map-get-or($animation, duration, 1s);
	$a-delay : map-get-or($animation, delay, 0s);

	width : $size;
	height : $size;
	@if $shape == circle {
		border-radius: 50%;
	}

	// position grid
	$width : $size * ($cols - 1) + $gap * ($cols - 1);
	$height : $size * ($rows - 1) + $gap * ($rows - 1);
	@include s-translate((-$width / 2 - $size - $gap - $offset) (-$height / 2 - $size - $gap - $offset));

	$aname : "grid-#{unique-id()}";

	// calculate box shadows
	$shadows : ();
	@for $i from 0 through $cols - 1 {
		@for $j from 0 through $rows - 1 {
			$x : ($size * $i + $gap * $i) + $size + $gap + $offset;
			$y : ($size * $j + $gap * $j) + $size + $gap + $offset;
			$shadows : append($shadows, $color $x $y 0 0, comma);
		}
	}

	&:before {
		@if $shape == circle {
			border-radius: 50%;
		}
		position: relative;
		z-index:1;
		content:'';
		display: block;
		width: $size;
		height: $size;
		animation : $aname $a-duration ease-in-out 0s infinite;
		// background: transparent;
		box-shadow : $shadows;
		transform-origin: ($offset + $width / 2 + $gap + $size) ($offset + $height / 2 + $gap + $size);
	}

	// calculate percentage of delay
	$p-delay : 1 / $a-duration * $a-delay;
	@debug($p-delay);

	// animation
	@keyframes #{$aname} {
		@for $i from 1 through $a-steps {
			$percentage : percentage((1 - $p-delay) / $a-steps * $i);
			@debug($percentage);
			#{$percentage} {
				// loop on each box shadows
				$shadows : ();
				@for $j from 0 through $cols - 1 {
					@for $k from 0 through $rows - 1 {
						$x : ($size * $j + $gap * $j) + $size + $gap + $offset;
						$y : ($size * $k + $gap * $k) + $size + $gap + $offset;
						$s-spread : 0;
						$blur : 0;
						$c : $color;
						$transparentize : 0;
						@if $a-opacity and $i < $a-steps {
							$transparentize : 1 - $a-opacity;
							$transparentize : $transparentize * 10;
							$t-rand : random($transparentize);
							$transparentize : $t-rand / 10;
							@debug($transparentize);
							$c : transparentize($c, $transparentize);
						}
						@if $a-scale {
							@if $i >= $a-steps {
								$s-spread : 0;
							} @else {
								$s-spread : s-rem(random($a-scale - $size) + 0px);
							}
						}
						@if $a-spread and $i < $a-steps {
							$randX : random($a-spread / 2);
							$randY : random($a-spread / 2);
							@if random(10) < 5 {
								$randX : $randX * -1;
							}
							@if random(10) < 5 {
								$randY : $randY * -1;
							}
							$x : $x + $randX;
							$y : $y + $randY;
						}
						@if $i >= $a-steps {
							$shadows : append($shadows, $c $x $y 0 0, comma);
						} @else {
							$shadows : append($shadows, $c $x $y $blur $s-spread, comma);
						}
					}
				}
				@if $a-spin and $i < $a-steps {
					transform : rotateZ($a-spin / $a-steps * $i);
				} @else {
					transform : rotateZ(0);
				}
				// apply shadows
				box-shadow: $shadows;
			}
		}
	}

}

@mixin _s-loader-spinner-3(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$background : white,
	$width : null
) {
	@if s-is($width, percent) {
		$width : 100 - $width;
	}

	@if $width == null {
		$width : 75%;
	}

	$aname : "spinner-3-#{unique-id()}";
	& {
		font-size:$size / 11;
		text-indent:-9999em;
		width:11em;
		height:11em;
		border-radius:50%;
		background: $color;
		background: linear-gradient(to right, transparentize($color,0) 10%, transparentize($color,1) 42%);
		position: relative;
		animation:$aname $duration infinite linear;
		transform: translateZ(0);
	}
	&:before {
		width:50%;
		height:50%;
		background: $color;
		border-radius: 100% 0 0 0;
		position:absolute;
		top:0;
		left:0;
		content:'';
	}
	
	@if not s-is($width, percent) {
		$width : percentage(1 / $size * $width);
	}
	&:after {
		background:$background;
		width: $width;
		height: $width;
		border-radius:50%;
		content:'';
		margin:auto;
		position: absolute;
		top: 0; left: 0; bottom: 0; right: 0;
	}
	@keyframes #{$aname} {
		0% {
			transform:rotate(0deg);
		}
		100% {
			transform:rotate(360deg);
		}
	}
}

@mixin _s-loader-spinner-circles-1(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$width : null
) {
	@if $width == null {
		$width : 0.2em;
	}

	$aname : "spinner-circles-1-#{unique-id()}";
	& {
		font-size:$size / 6;
		width:1em;
		height:1em;
		border-radius:50%;
		position:relative;
		text-indent:-9999em;
		animation:$aname $duration infinite linear;
		transform: translateZ(0);
	}
	@keyframes #{$aname} {
		0%,100% {
			box-shadow:0 -3em 0 0.2em $color,
			2em -2em 0 0em $color,
			3em 0 0 -1em $color,
			2em 2em 0 -1em $color,
			0 3em 0 -1em $color,
			-2em 2em 0 -1em $color,
			-3em 0 0 -1em $color,
			-2em -2em 0 0 $color;
		}
		12.5% {
			box-shadow:0 -3em 0 0 $color,
			2em -2em 0 $width $color,
			3em 0 0 0 $color,
			2em 2em 0 -1em $color,
			0 3em 0 -1em $color,
			-2em 2em 0 -1em $color,
			-3em 0 0 -1em $color,
			-2em -2em 0 -1em $color;
		}
		25% {
			box-shadow:0 -3em 0 -0.5em $color,
			2em -2em 0 0 $color,
			3em 0 0 $width $color,
			2em 2em 0 0 $color,
			0 3em 0 -1em $color,
			-2em 2em 0 -1em $color,
			-3em 0 0 -1em $color,
			-2em -2em 0 -1em $color;
		}
		37.5% {
			box-shadow:0 -3em 0 -1em $color,
			2em -2em 0 -1em $color,
			3em 0em 0 0 $color,
			2em 2em 0 $width $color,
			0 3em 0 0em $color,
			-2em 2em 0 -1em $color,
			-3em 0em 0 -1em $color,
			-2em -2em 0 -1em $color;
		}
		50% {
			box-shadow:0 -3em 0 -1em $color,
			2em -2em 0 -1em $color,
			3em 0 0 -1em $color,
			2em 2em 0 0em $color,
			0 3em 0 $width $color,
			-2em 2em 0 0 $color,
			-3em 0em 0 -1em $color,
			-2em -2em 0 -1em $color;
		}
		62.5% {
			box-shadow:0 -3em 0 -1em $color,
			2em -2em 0 -1em $color,
			3em 0 0 -1em $color,
			2em 2em 0 -1em $color,
			0 3em 0 0 $color,
			-2em 2em 0 $width $color,
			-3em 0 0 0 $color,
			-2em -2em 0 -1em $color;
		}
		75% {
			box-shadow:0em -3em 0 -1em $color,
			2em -2em 0 -1em $color,
			3em 0em 0 -1em $color,
			2em 2em 0 -1em $color,
			0 3em 0 -1em $color,
			-2em 2em 0 0 $color,
			-3em 0em 0 $width $color,
			-2em -2em 0 0 $color;
		}
		87.5% {
			box-shadow:0em -3em 0 0 $color,
			2em -2em 0 -1em $color,
			3em 0 0 -1em $color,
			2em 2em 0 -1em $color,
			0 3em 0 -1em $color,
			-2em 2em 0 0 $color,
			-3em 0em 0 0 $color,
			-2em -2em 0 $width $color;
		}
	}
}

@mixin _s-loader-spinner-circles-2(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$width : null
) {
	@if $width == null {
		$width : 1em;
	}

	$aname : "spinner-circles-2-#{unique-id()}";
	& {
		font-size:$size / 5.2;
		width:$width;
		height:$width;
		border-radius:50%;
		position:relative;
		text-indent:-9999em;
		animation:$aname $duration infinite ease;
		transform: translateZ(0);
	}
	@keyframes #{$aname} {
		0%,100% {
		box-shadow:0em -2.6em 0em 0em transparentize($color,0),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.5),
			-1.8em -1.8em 0 0em transparentize($color,.3);
		}
		12.5% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.3),
			1.8em -1.8em 0 0em transparentize($color,0),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.5);
		}
		25% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.5),
			1.8em -1.8em 0 0em transparentize($color,.3),
			2.5em 0em 0 0em transparentize($color,0),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		37.5% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.5),
			2.5em 0em 0 0em transparentize($color,.3),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		50% {

		box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.5),
			1.75em 1.75em 0 0em transparentize($color,.3),
			0em 2.5em 0 0em transparentize($color,0),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		62.5% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.5),
			0em 2.5em 0 0em transparentize($color,.3),
			-1.8em 1.8em 0 0em transparentize($color,0),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		75% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.5),
			-1.8em 1.8em 0 0em transparentize($color,.3),
			-2.6em 0em 0 0em transparentize($color,0),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		87.5% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.5),
			-2.6em 0em 0 0em transparentize($color,.3),
			-1.8em -1.8em 0 0em transparentize($color,0);
		}
	}
}

@mixin _s-loader-spinner-circles-3(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$width : null
) {

	@if $width == null {
		$width : 1em;
	}
	// $width : $width;

	$em : -1 / $size * $width + 0em;

	// $em : -$width;

	$diff : $em / 4;

	@debug($em);

	$scale : 2;

	$aname : "spinner-circles-3-#{unique-id()}";
	& {
		font-size:$size / 1.6;
		text-indent:-9999em;
		overflow: hidden;
		width:$width;
		height:$width;
		border-radius:50%;
		position:relative;
		transform: translateZ(0);
		animation:$aname $duration infinite ease;
	}
	@keyframes #{$aname} {
		0% {
		transform:rotate(0deg);
		box-shadow:
		0 * $scale -0.83em 0 $em $color,
		0 * $scale -0.83em 0 $em - 4 * $diff $color,
		0 * $scale -0.83em 0 $em - 3 * $diff $color,
		0 * $scale -0.83em 0 $em - 2 * $diff $color,
		0 * $scale -0.83em 0 $em - 1 * $diff $color;
		}
		5%, 95% {
			box-shadow:
			0 * $scale -0.83em 0 $em $color,
			0 * $scale -0.83em 0 $em - 4 * $diff $color,
			0 * $scale -0.83em 0 $em - 3 * $diff $color,
			0 * $scale -0.83em 0 $em - 2 * $diff $color,
			0 * $scale -0.83em 0 $em - 1 * $diff $color;
		}
		10%,
		59% {
			box-shadow:
			0 * $scale -0.83em 0 $em $color,
			-0.087em * $scale -0.825em * $scale 0 $em - 4 * $diff $color,
			-0.173em * $scale -0.812em * $scale 0 $em - 3 * $diff $color,
			-0.256em * $scale -0.789em * $scale 0 $em - 2 * $diff $color,
			-0.297em * $scale -0.775em * $scale 0 $em - 1 * $diff $color;
		}
		20% {
			box-shadow:
			0 * $scale -0.83em 0 $em $color,
			-0.338em * $scale -0.758em * $scale 0 $em - 4 * $diff $color,
			-0.555em * $scale -0.617em * $scale 0 $em - 3 * $diff $color,
			-0.671em * $scale -0.488em * $scale 0 $em - 2 * $diff $color,
			-0.749em * $scale -0.34em * $scale 0 $em - 1 * $diff $color;
		}
		38% {
			box-shadow:
			0 -0.83em 0 $em $color,
			-0.377em * $scale -0.74em * $scale 0 $em - 4 * $diff $color,
			-0.645em * $scale -0.522em * $scale 0 $em - 3 * $diff $color,
			-0.775em * $scale -0.297em * $scale 0 $em - 2 * $diff $color,
			-0.82em * $scale -0.09em * $scale 0 $em - 1 * $diff $color;
		}
		100% {
			transform:rotate(360deg);
			box-shadow:
			0 -0.83em 0 $em $color,
			0 -0.83em 0 $em - 4 * $diff $color,
			0 -0.83em 0 $em - 3 * $diff $color,
			0 -0.83em 0 $em - 2 * $diff $color,
			0 -0.83em 0 $em - 1 * $diff $color;
		}
	}
}

@mixin _s-loader-circles(
	$color,
	$duration : 1s,
	$size : s-rem(20px)
) {
	$aname : "circles-#{unique-id()}";
	&:before,&:after,& {
		border-radius:50%;
		width:2.5em;
		height:2.5em;
		animation-fill-mode: both;
		animation:$aname $duration infinite ease-in-out;
	}
	& {
		font-size:$size / 10;
		position:relative;
		text-indent:-9999em;
		transform: translateZ(0);
		animation-delay:-0.16s;
	}
	&:before {
		left:-3.5em;
		animation-delay:-0.32s;
	}
	&:after {
		left:3.5em;
	}
	&:before,&:after {
		content:'';
		position:absolute;
		top:0;
	}
	@keyframes #{$aname} {
		0%,80%,100% {
			box-shadow:0 2.5em 0 -1.3em $color;
		}
		40% {
			box-shadow:0 2.5em 0 0 $color;
		}
	}
}

@mixin _s-loader-spinner-2(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$background : white,
	$width : null
) {
	@if $width == null {
		$width : 1em;
	}

	$aname : "spinner-2-#{unique-id()}";
	&,&:before,&:after {
		border-radius:50%;
	}
	&:before,&:after {
		position:absolute;
		content:'';
	}
	&:before {
		width:5.2em;
		height:10.2em;
		background: $background;
		border-radius: 10.2em 0 0 10.2em;
		top:-0.1em;
		left:-0.1em;
		transform-origin:5.2em 5.1em;
		animation:$aname $duration infinite ease $duration / 4 * 3;
	}
	& {
		font-size:$size / 10;
		text-indent:-99999em;
		position:relative;
		width:10em;
		height:10em;
		box-shadow: inset 0 0 0 $width $color;
		transform: translateZ(0);
	}
	&:after {
		width:5.2em;
		height:10.2em;
		background: $background;
		border-radius: 0 10.2em 10.2em 0;
		top:-0.1em;
		left:5.1em;
		transform-origin:0px 5.1em;
		animation:$aname $duration infinite ease;
	}

	@keyframes #{$aname} {
		0% {
			transform:rotate(0deg);
		}
		100% {
			transform:rotate(360deg);
		}
	}
}

@mixin _s-loader-spinner-1(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$width : 1.1em
) {
	$aname : "spinner-1-#{unique-id()}";
	& {
		font-size:$size / 10;
		position:relative;
		text-indent:-9999em;
		border-top:$width solid transparentize($color,.8);
		border-right:$width solid transparentize($color,.8);
		border-bottom:$width solid transparentize($color,.8);
		border-left:$width solid transparentize($color,0);
		transform: translateZ(0);
		animation:$aname $duration infinite linear;
	}
	&,&:after {
		border-radius:50%;
		width:10em;
		height:10em;
	}
	@keyframes #{$aname} {
		0% {
			transform:rotate(0deg);
		}
		100% {
			transform:rotate(360deg);
		}
	}
}

@mixin _s-loader-bars(
	$color,
	$duration : 1s,
	$size : s-rem(20px)
) {
	$aname : "bars-#{unique-id()}";
	&,&:before,&:after {
		background:$color;
		animation:$aname $duration infinite ease-in-out;
		width:1em;
		height:4em;
	}
	&:before,&:after {
		position:absolute;
		top:0;
		content:'';
	}

	&:before {
		left:-1.5em;
		animation-delay:-0.32s;
	}
	& {
		text-indent:-9999em;
		position:relative;
		font-size:$size / 4;
		transform: translateZ(0);
		animation-delay:-0.16s;
	}
	&:after {
		left:1.5em;
	}

	@keyframes #{$aname} {
		0%,80%,100% {
			box-shadow:0 0 $color;
			height:4em;
		}
		40% {
			box-shadow:0 -2em $color;
			height:5em;
		}
	}
}