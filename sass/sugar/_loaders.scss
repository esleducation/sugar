//
// Loaders specific
//

@mixin s-loader(
	$loader : ()
) {
	$loader : _sugar-parse-properties($loader, (
		type : bars spinner-1 spinner-2 spinner-3 spinner-circles-1 spinner-circles-2 spinner-circles-3 circles,
		color : color,
		background : color,
		duration : second,
		size : number,
		width : number
	));

	$type : map-get-or($loader, type, spinner-1);
	$color : map-get-or($loader, color, #555);
	$duration : map-get-or($loader, duration, .5s);
	$size : map-get-or($loader, size, s-rem(20px));
	$background : map-get-or($loader, background, white);
	$width : map-get($loader, width);

	@if $type == bars {
		@include _s-loader-bars($color, $duration, $size);
	} @else if $type == spinner-1 {
		@include _s-loader-spinner-1($color, $duration, $size, $width);
	} @else if $type == spinner-2 {
		@include _s-loader-spinner-2($color, $duration, $size, $background, $width);
	} @else if $type == spinner-3 {
		@include _s-loader-spinner-3($color, $duration, $size, $background, $width);
	} @else if $type == spinner-circles-1 {
		@include _s-loader-spinner-circles-1($color, $duration, $size, $width);
	} @else if $type == spinner-circles-2 {
		@include _s-loader-spinner-circles-2($color, $duration, $size, $width);
	} @else if $type == spinner-circles-3 {
		@include _s-loader-spinner-circles-3($color, $duration, $size, $width);
	} @else if $type == circles {
		@include _s-loader-circles($color, $duration, $size);
	}
}

@mixin s-loader-grid(
	$props : (),
	$animation : ()
) {
	$props : _sugar-parse-properties($props, (
		shape : circle rect,
		color : color,
		colors : list,
		cols : number,
		rows : number,
		size : number,
		gap : number,
		offset : number,
		rotate : degree
	));
	$animation : _sugar-parse-properties($animation, (
		shape : circle rect,
		steps : integer,
		spread : number,
		rotate : number,
		spin : number,
		scale : number,
		opacity : number,
		duration : second,
		delay : second,
		ease : string
	));

	$color : map-get-or($props, color, red);
	$colors : map-get($props, colors);
	$cols : map-get-or($props, cols, 5);
	$rows : map-get-or($props, rows, 5);
	$size : map-get-or($props, size, 10px);
	$gap : map-get-or($props, gap, 5px);
	$shape : map-get-or($props, shape, rect);
	$offset : map-get-or($props, offset, 200px);
	$rotate : map-get-or($props, rotate, 0);

	$a-steps : map-get-or($animation, steps, 5);
	$a-spread : map-get($animation, spread);
	$a-rotate : map-get($animation, rotate);
	$a-spin : map-get($animation, spin);
	$a-scale : map-get($animation, scale);
	$a-opacity : map-get($animation, opacity);
	$a-duration : map-get-or($animation, duration, 1s);
	$a-delay : map-get-or($animation, delay, 0s);
	$a-shape : map-get($animation, shape);
	$a-ease : map-get-or($animation, ease, ease-in-out);
	
	// manage duration :
	$a-duration : $a-duration + $a-delay;

	width : $size;
	height : $size;
	@if $shape == circle {
		border-radius: 50%;
	}

	// position grid
	$width : $size * $cols + $gap * ($cols - 1);
	$height : $size * $rows + $gap * ($rows - 1);

	// @include s-translate((-$width / 2 - $size - $gap - $offset) (-$height / 2 - $size - $gap - $offset));
	@include s-transform(
		-translateX (-$width / 2 - $size - $gap - $offset)
		-translateY (-$height / 2 - $size - $gap - $offset)
		-rotate $rotate);
	transform-origin: ($offset + $width / 2 + $gap + $size) ($offset + $height / 2 + $gap + $size);

	$a-name : unquote("grid-#{unique-id()}");

	// calculate box shadows
	$shadows : ();
	$color-idx : 1;
	@for $i from 0 through $cols - 1 {
		@for $j from 0 through $rows - 1 {
			$x : ($size * $i + $gap * $i) + $size + $gap + $offset;
			$y : ($size * $j + $gap * $j) + $size + $gap + $offset;
			$c : $color;
			@if $colors and length($colors) == $cols * $rows {
				$c : nth($colors, $color-idx);
				$color-idx : $color-idx + 1;
			} @else if length($colors) == 2 {
				@if $j % 2 == 0 {
					$color-idx : $color-idx - 1;
				}
				$c : nth($colors, $color-idx % 2 + 1);
			}
			$shadows : append($shadows, $c $x $y 0 0, comma);
		}
	}

	&:before {
		@if $shape == circle {
			border-radius: 50%;
		}
		position: relative;
		z-index:1;
		content:'';
		display: block;
		width: $size;
		height: $size;
		animation : $a-name $a-duration $a-ease 0s infinite;
		box-shadow : $shadows;
		transform-origin: ($offset + $width / 2 + $gap + $size) ($offset + $height / 2 + $gap + $size);
	}

	// calculate percentage of delay
	$p-delay : 1 / $a-duration * $a-delay;
	// animation
	@keyframes #{$a-name} {
		@for $i from 1 through $a-steps {
			$percentage : percentage((1 - $p-delay) / $a-steps * $i);
			#{$percentage} {
				// loop on each box shadows
				$shadows : ();
				$color-idx : 1;
				@for $j from 0 through $cols - 1 {
					@for $k from 0 through $rows - 1 {
						$x : ($size * $j + $gap * $j) + $size + $gap + $offset;
						$y : ($size * $k + $gap * $k) + $size + $gap + $offset;
						$s-spread : 0;
						$blur : 0;
						$c : $color;
						@if $colors and length($colors) == $cols * $rows {
							$c : nth($colors, $color-idx);
							$color-idx : $color-idx + 1;
						} @else if length($colors) == 2 {
							@if $j % 2 != 0 {
								$color-idx : $color-idx - 1;
							}
							$c : nth($colors, $color-idx % 2 + 1);
						}
						$transparentize : 0;
						@if $a-opacity and $i < $a-steps {
							$transparentize : 1 - $a-opacity;
							$transparentize : $transparentize * 10;
							$t-rand : random($transparentize);
							$transparentize : $t-rand / 10;
							$c : transparentize($c, $transparentize);
						}
						@if $a-scale {
							@if $i >= $a-steps {
								$s-spread : 0;
							} @else {
								$s-spread : s-rem(random($a-scale - $size) + 0px);
							}
						}
						@if $a-spread and $i < $a-steps {
							$randX : random($a-spread / 2);
							$randY : random($a-spread / 2);
							@if random(10) < 5 {
								$randX : $randX * -1;
							}
							@if random(10) < 5 {
								$randY : $randY * -1;
							}
							$x : $x + $randX;
							$y : $y + $randY;
						}
						@if $i >= $a-steps {
							$shadows : append($shadows, $c $x $y 0 0, comma);
						} @else {
							$shadows : append($shadows, $c $x $y $blur $s-spread, comma);
						}
					}
				}
				@if $a-spin and $i < $a-steps {

					$randX : random($a-spin / 2);
					@if random(10) < 5 {
						$randX : $randX * -1;
					}
					transform : rotateZ($randX + 0deg);
				} @else {
					transform : rotateZ(0);
				}
				@if $i < $a-steps - 1 {
					@if $a-shape == circle {
						@include s-corner(50%);
					} @else if $a-shape == rect {
						@include s-corner(0);
					}
				}
				// apply shadows
				box-shadow: $shadows;
			}
		}
	}
}

@mixin s-loader-spinner(
	$spinner : (),
	$animation : ()
) {	
	$spinner : _sugar-parse-properties($spinner, (
		type : elastic linear fade-in fade-out fade-in-out,
		size : number,
		width : number,
		color : color,
		bgcolor : color
	));
	$animation : _sugar-parse-properties($animation, (
		duration : second,
		delay : second,
		ease : string,
		length : number
	));
	

	$type : map-get-or($spinner, type, linear);
	$size : map-get-or($spinner, size, 1em);
	$width : map-get-or($spinner, width, 0.3em);
	$color : map-get-or($spinner, color, red);
	$bgcolor : map-get-or($spinner, bgcolor, inherit);
	
	$a-duration : map-get-or($animation, duration, 1s);
	$a-delay : map-get-or($animation, delay, 0s);
	$a-ease : map-get-or($animation, ease, ease);
	$a-length : map-get-or($animation, length, 3/4);

	// manage duration :
	$a-duration : $a-duration + $a-delay;

	$a-name : unquote("spinner-#{unique-id()}");
	$p-step : 1 / $a-duration * $a-delay;

	@if $type == linear {
		& {
			font-size:$size;
			position:relative;
			text-indent:-9999em;
			border-top:$width solid transparentize($color,.8);
			border-right:$width solid transparentize($color,.8);
			border-bottom:$width solid transparentize($color,.8);
			border-left:$width solid transparentize($color,0);
			transform: translateZ(0);
			animation: $a-name $a-duration $a-ease 0s infinite;
		}
		&,&:after {
			border-radius:50%;
			width:1em;
			height:1em;
		}
		$percentage : percentage((1 - $p-step));
		@keyframes #{$a-name} {
			0% {
				transform:rotate(0deg);
			}
			#{$percentage} {
				transform:rotate(360deg);
			}
		}
	} @else if $type == elastic {
		background: inherit;
		&,&:before,&:after {
			border-radius:50%;
		}
		&:before,&:after {
			position:absolute;
			content:'';
		}
		&:before {
			width:5.2em;
			height:10.2em;
			background: $bgcolor;
			border-radius: 10.2em 0 0 10.2em;
			top:-0.1em;
			left:-0.1em;
			transform-origin:5.2em 5.1em;
			animation:$a-name $a-duration infinite $a-ease $a-duration * $a-length;
		}
		& {
			font-size:$size / 10;
			text-indent:-99999em;
			position:relative;
			width:10em;
			height:10em;
			box-shadow: inset 0 0 0 $width $color;
			transform: translateZ(0);
		}
		&:after {
			width:5.2em;
			height:10.2em;
			background: $bgcolor;
			border-radius: 0 10.2em 10.2em 0;
			top:-0.1em;
			left:5.1em;
			transform-origin:0px 5.1em;
			animation:$a-name $a-duration infinite ease;
		}
		@keyframes #{$a-name} {
			0% {
				transform:rotate(0deg);
			}
			100% {
				transform:rotate(360deg);
			}
		}
	} @else if $type == fade-out {
		& {
			font-size:$size;
			text-indent:-9999em;
			width:1em;
			height:1em;
			border-radius:50%;
			background: $color;
			background: linear-gradient(to right, transparentize($color,0) 10%, transparentize($color,1) 42%);
			position: relative;
			animation: $a-name $a-duration $a-ease 0s infinite;
			transform: translateZ(0);
		}
		&:before {
			width:50%;
			height:50%;
			background: $color;
			border-radius: 100% 0 0 0;
			position:absolute;
			top:0;
			left:0;
			content:'';
		}
		$width : $size - $width * 2;
		&:after {
			background:$bgcolor;
			width: $width;
			height: $width;
			border-radius:50%;
			content:'';
			margin:auto;
			position: absolute;
			top: 0; left: 0; bottom: 0; right: 0;
		}
		@keyframes #{$a-name} {
			0% {
				transform:rotate(0deg);
			}
			100% {
				transform:rotate(360deg);
			}
		}
	} @else if $type == fade-in {
		& {
			font-size:$size;
			text-indent:-9999em;
			width:1em;
			height:1em;
			border-radius:50%;
			background: $color;
			background: linear-gradient(to left, transparentize($color,1) 52%, transparentize($color,0) 90%);
			position: relative;
			animation: $a-name $a-duration $a-ease 0s infinite;
			transform: translateZ(0);
		}
		&:before {
			width:50%;
			height:50%;
			background: $color;
			border-radius: 0 0 0 100%;
			position:absolute;
			bottom:0;
			left:0;
			content:'';
		}
		$width : $size - $width * 2;
		&:after {
			background:$bgcolor;
			width: $width;
			height: $width;
			border-radius:50%;
			content:'';
			margin:auto;
			position: absolute;
			top: 0; left: 0; bottom: 0; right: 0;
		}
		@keyframes #{$a-name} {
			0% {
				transform:rotate(0deg);
			}
			100% {
				transform:rotate(360deg);
			}
		}
	} @else if $type == fade-in-out {
		font-size: $size;
		width: 1em;
		height: 1em;
		border-radius: 50%;
		//overflow: hidden;
		&:before {
			content: "";
			position: absolute;
			width: 100%;
			height: 100%;
			border-radius: 50%;
			background: linear-gradient($color, transparentize($color,1) 60%);
			animation: $a-name $a-duration infinite linear;
		}
		$width : $size - $width * 2;
		&:after {
			background:$bgcolor;
			width: $width;
			height: $width;
			border-radius:50%;
			content:'';
			margin:auto;
			position: absolute;
			top: 0; left: 0; bottom: 0; right: 0;
		}
		@keyframes #{$a-name} {
			to {
				transform: rotate(360deg);
			}
		}
	}
}

@mixin _s-loader-spinner-3(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$background : white,
	$width : null
) {
	@if s-is($width, percent) {
		$width : 100 - $width;
	}

	@if $width == null {
		$width : 75%;
	}

	$a-name : unquote("spinner-3-#{unique-id()}");
	& {
		font-size:$size / 11;
		text-indent:-9999em;
		width:11em;
		height:11em;
		border-radius:50%;
		background: $color;
		background: linear-gradient(to right, transparentize($color,0) 10%, transparentize($color,1) 42%);
		position: relative;
		animation:$a-name $duration infinite linear;
		transform: translateZ(0);
	}
	&:before {
		width:50%;
		height:50%;
		background: $color;
		border-radius: 100% 0 0 0;
		position:absolute;
		top:0;
		left:0;
		content:'';
	}
	
	@if not s-is($width, percent) {
		$width : percentage(1 / $size * $width);
	}
	&:after {
		background:$background;
		width: $width;
		height: $width;
		border-radius:50%;
		content:'';
		margin:auto;
		position: absolute;
		top: 0; left: 0; bottom: 0; right: 0;
	}
	@keyframes #{$a-name} {
		0% {
			transform:rotate(0deg);
		}
		100% {
			transform:rotate(360deg);
		}
	}
}

@mixin s-loader-circle(
	$props : (),
	$animation : ()
) {
	$props : _sugar-parse-properties($props, (
		color : color,
		size : number,
		radius : number,
		count : integer
	));
	$animation : _sugar-parse-properties($animation, (
		shape : circle rect,
		spread : number,
		rotate : number,
		spin : number,
		scale : number,
		opacity : number,
		near : integer,
		ease : string,
		duration : second,
		delay : second
	));
	$color : map-get-or($props, color, red);
	$colors : map-get($props, colors);
	$size : map-get-or($props, size, 10px);
	$radius : map-get-or($props, radius, 30px);
	$count : map-get-or($props, count, 8);
	// $count : $count - 1;

	$a-name : unquote("circle-#{unique-id()}");
	$a-spread : map-get-or($animation, spread, null);
	$a-rotate : map-get-or($animation, rotate, null);
	$a-scale : map-get-or($animation, scale, null);
	$a-opacity : map-get-or($animation, opacity, null);
	$a-near : map-get-or($animation, near, round($count / 2));
	$a-ease : map-get-or($animation, ease, ease-in-out);
	$a-duration : map-get-or($animation, duration, 1s);
	$a-delay : map-get-or($animation, delay, 0s);

	// manage duration
	$a-duration : $a-duration + $a-delay;

	$base-shadows : ();
	@for $i from 0 through $count {
		$x : $radius * s-cos(360deg / $count * $i);
		$y : $radius * s-sin(360deg / $count * $i);
		$c : $color;
		@if $colors {
			$c : nth($colors, $i + 1);
		}
		@if $a-opacity {
			$c : transparentize($c, 1 - $a-opacity);
		}
		$base-shadows : append($base-shadows, $c $x $y 0 0, comma);	
	}

	$spread-map : ();
	// calculate percentage of delay
	$p-delay : 0;
	$p-step : 1 / $count;
	@if $a-delay > 0 {
		$p-delay : 1 / $a-duration * $a-delay;
		$p-step : (1 - $p-delay) / ($count + 1);
	}
	// animation
	@keyframes #{$a-name} {
		@for $step-idx from 0 through $count {
			$p : percentage($step-idx * $p-step);
			@if $a-delay > 0 {
				$p : percentage($step-idx * $p-step) + percentage($p-step);
			}
			#{$p} {
				$shadows : ();
				@for $count-idx from 0 through $count {
					$x : $radius * s-cos(360deg / $count * $count-idx);
					$y : $radius * s-sin(360deg / $count * $count-idx);
					
					$diff : abs($step-idx - $count-idx);
					@if $step-idx + $a-near > $count and $count-idx - $a-near < 0 {
						$diff : abs($count-idx - ($step-idx - $count));
					} @else if $step-idx - $a-near < 0 and $count-idx + $a-near > $count {
						$diff : abs($step-idx + ($count - $count-idx));
					}

					$c : $color;
					@if $colors {
						$c : nth($colors, $count-idx + 1);
					}
					$opacity : 1;
					@if $a-opacity {
						@if $diff < $a-near {
							$opacity : 1 / $a-near * $diff;
						}
						@if 1 - $opacity < $a-opacity {
							$opacity : 1 - $a-opacity
						}
						$transparentize : $opacity;
						$c : transparentize($c, $transparentize);
					}
					$scale : $size;
					@if $a-scale {
						@if $diff == 0 {
							$scale : $a-scale;
						} @else if $diff <= $a-near {
							$s : $a-scale - $size;
							$scale : $size + $s - $s / $a-near * $diff;
						}
					}
					@if $a-spread and $diff < $a-near {
						$randX : random(round($a-spread / 2));
						$randY : random(round($a-spread / 2));
						@if random(10) < 5 {
							$randX : $randX * -1;
						}
						@if random(10) < 5 {
							$randY : $randY * -1;
						}
						@if $step-idx == 0 {
							$s : (
								x : $randX,
								y : $randY
							);
							$spread-map : map-set($spread-map, $count-idx, $s);
						}
						@if $step-idx == $count {
							$map : map-get($spread-map, $count-idx);
							@if $map {
								$randX : map-get($map, x);
								$randY : map-get($map, y);
							} @else {
								$randX : 0;
								$randY : 0;
							}
						}
						$x : $x + $randX;
						$y : $y + $randY;
					}
					@if $count-idx < $count {
						$shadows : append($shadows, $x $y 0 ($scale - $size) $c, comma);
					}
				}
				box-shadow : $shadows;
			}
		}
		@if $a-delay > 0 and percentage($count * $p-step) + percentage($p-step) < 100 {
			#{percentage($count * $p-step) + percentage($p-step) * 2} {
				box-shadow: $base-shadows;
			}
		}
	}
	&:after {
		border-radius:50%;
		width : $size;
		height : $size;
		display : block;
		content : '';
		box-shadow: $base-shadows;
		animation : $a-name $a-duration $a-ease 0s infinite;
	}
	// @include s-translate(-50% -50%);
	// transform: rotate(- 360deg / $count / 2);
	@include s-transform(-translateX -50% -translateY -50% -rotate -90deg);
}

@mixin _s-loader-spinner-circles-1(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$width : null
) {
	@if $width == null {
		$width : 0.2em;
	}

	$a-name : unquote("spinner-circles-1-#{unique-id()}");
	& {
		font-size:$size / 6;
		width:1em;
		height:1em;
		border-radius:50%;
		position:relative;
		text-indent:-9999em;
		animation:$a-name $duration infinite linear;
		transform: translateZ(0);
	}
	@keyframes #{$a-name} {
		0%,100% {
			box-shadow:0 -3em 0 0.2em $color,
			2em -2em 0 0em $color,
			3em 0 0 -1em $color,
			2em 2em 0 -1em $color,
			0 3em 0 -1em $color,
			-2em 2em 0 -1em $color,
			-3em 0 0 -1em $color,
			-2em -2em 0 0 $color;
		}
		12.5% {
			box-shadow:0 -3em 0 0 $color,
			2em -2em 0 $width $color,
			3em 0 0 0 $color,
			2em 2em 0 -1em $color,
			0 3em 0 -1em $color,
			-2em 2em 0 -1em $color,
			-3em 0 0 -1em $color,
			-2em -2em 0 -1em $color;
		}
		25% {
			box-shadow:0 -3em 0 -0.5em $color,
			2em -2em 0 0 $color,
			3em 0 0 $width $color,
			2em 2em 0 0 $color,
			0 3em 0 -1em $color,
			-2em 2em 0 -1em $color,
			-3em 0 0 -1em $color,
			-2em -2em 0 -1em $color;
		}
		37.5% {
			box-shadow:0 -3em 0 -1em $color,
			2em -2em 0 -1em $color,
			3em 0em 0 0 $color,
			2em 2em 0 $width $color,
			0 3em 0 0em $color,
			-2em 2em 0 -1em $color,
			-3em 0em 0 -1em $color,
			-2em -2em 0 -1em $color;
		}
		50% {
			box-shadow:0 -3em 0 -1em $color,
			2em -2em 0 -1em $color,
			3em 0 0 -1em $color,
			2em 2em 0 0em $color,
			0 3em 0 $width $color,
			-2em 2em 0 0 $color,
			-3em 0em 0 -1em $color,
			-2em -2em 0 -1em $color;
		}
		62.5% {
			box-shadow:0 -3em 0 -1em $color,
			2em -2em 0 -1em $color,
			3em 0 0 -1em $color,
			2em 2em 0 -1em $color,
			0 3em 0 0 $color,
			-2em 2em 0 $width $color,
			-3em 0 0 0 $color,
			-2em -2em 0 -1em $color;
		}
		75% {
			box-shadow:0em -3em 0 -1em $color,
			2em -2em 0 -1em $color,
			3em 0em 0 -1em $color,
			2em 2em 0 -1em $color,
			0 3em 0 -1em $color,
			-2em 2em 0 0 $color,
			-3em 0em 0 $width $color,
			-2em -2em 0 0 $color;
		}
		87.5% {
			box-shadow:0em -3em 0 0 $color,
			2em -2em 0 -1em $color,
			3em 0 0 -1em $color,
			2em 2em 0 -1em $color,
			0 3em 0 -1em $color,
			-2em 2em 0 0 $color,
			-3em 0em 0 0 $color,
			-2em -2em 0 $width $color;
		}
	}
}

@mixin _s-loader-spinner-circles-2(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$width : null
) {
	@if $width == null {
		$width : 1em;
	}

	$a-name : unquote("spinner-circles-2-#{unique-id()}");
	& {
		font-size:$size / 5.2;
		width:$width;
		height:$width;
		border-radius:50%;
		position:relative;
		text-indent:-9999em;
		animation:$a-name $duration infinite ease;
		transform: translateZ(0);
	}
	@keyframes #{$a-name} {
		0%,100% {
		box-shadow:0em -2.6em 0em 0em transparentize($color,0),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.5),
			-1.8em -1.8em 0 0em transparentize($color,.3);
		}
		12.5% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.3),
			1.8em -1.8em 0 0em transparentize($color,0),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.5);
		}
		25% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.5),
			1.8em -1.8em 0 0em transparentize($color,.3),
			2.5em 0em 0 0em transparentize($color,0),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		37.5% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.5),
			2.5em 0em 0 0em transparentize($color,.3),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		50% {

		box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.5),
			1.75em 1.75em 0 0em transparentize($color,.3),
			0em 2.5em 0 0em transparentize($color,0),
			-1.8em 1.8em 0 0em transparentize($color,.8),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		62.5% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.5),
			0em 2.5em 0 0em transparentize($color,.3),
			-1.8em 1.8em 0 0em transparentize($color,0),
			-2.6em 0em 0 0em transparentize($color,.8),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		75% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.5),
			-1.8em 1.8em 0 0em transparentize($color,.3),
			-2.6em 0em 0 0em transparentize($color,0),
			-1.8em -1.8em 0 0em transparentize($color,.8);
		}
		87.5% {
			box-shadow:0em -2.6em 0em 0em transparentize($color,.8),
			1.8em -1.8em 0 0em transparentize($color,.8),
			2.5em 0em 0 0em transparentize($color,.8),
			1.75em 1.75em 0 0em transparentize($color,.8),
			0em 2.5em 0 0em transparentize($color,.8),
			-1.8em 1.8em 0 0em transparentize($color,.5),
			-2.6em 0em 0 0em transparentize($color,.3),
			-1.8em -1.8em 0 0em transparentize($color,0);
		}
	}
}

@mixin _s-loader-spinner-circles-3(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$width : null
) {

	@if $width == null {
		$width : 1em;
	}
	// $width : $width;

	$em : -1 / $size * $width + 0em;

	// $em : -$width;

	$diff : $em / 4;

	$scale : 2;

	$a-name : unquote("spinner-circles-3-#{unique-id()}");
	& {
		font-size:$size / 1.6;
		text-indent:-9999em;
		overflow: hidden;
		width:$width;
		height:$width;
		border-radius:50%;
		position:relative;
		transform: translateZ(0);
		animation:$a-name $duration infinite ease;
	}
	@keyframes #{$a-name} {
		0% {
		transform:rotate(0deg);
		box-shadow:
		0 * $scale -0.83em 0 $em $color,
		0 * $scale -0.83em 0 $em - 4 * $diff $color,
		0 * $scale -0.83em 0 $em - 3 * $diff $color,
		0 * $scale -0.83em 0 $em - 2 * $diff $color,
		0 * $scale -0.83em 0 $em - 1 * $diff $color;
		}
		5%, 95% {
			box-shadow:
			0 * $scale -0.83em 0 $em $color,
			0 * $scale -0.83em 0 $em - 4 * $diff $color,
			0 * $scale -0.83em 0 $em - 3 * $diff $color,
			0 * $scale -0.83em 0 $em - 2 * $diff $color,
			0 * $scale -0.83em 0 $em - 1 * $diff $color;
		}
		10%,
		59% {
			box-shadow:
			0 * $scale -0.83em 0 $em $color,
			-0.087em * $scale -0.825em * $scale 0 $em - 4 * $diff $color,
			-0.173em * $scale -0.812em * $scale 0 $em - 3 * $diff $color,
			-0.256em * $scale -0.789em * $scale 0 $em - 2 * $diff $color,
			-0.297em * $scale -0.775em * $scale 0 $em - 1 * $diff $color;
		}
		20% {
			box-shadow:
			0 * $scale -0.83em 0 $em $color,
			-0.338em * $scale -0.758em * $scale 0 $em - 4 * $diff $color,
			-0.555em * $scale -0.617em * $scale 0 $em - 3 * $diff $color,
			-0.671em * $scale -0.488em * $scale 0 $em - 2 * $diff $color,
			-0.749em * $scale -0.34em * $scale 0 $em - 1 * $diff $color;
		}
		38% {
			box-shadow:
			0 -0.83em 0 $em $color,
			-0.377em * $scale -0.74em * $scale 0 $em - 4 * $diff $color,
			-0.645em * $scale -0.522em * $scale 0 $em - 3 * $diff $color,
			-0.775em * $scale -0.297em * $scale 0 $em - 2 * $diff $color,
			-0.82em * $scale -0.09em * $scale 0 $em - 1 * $diff $color;
		}
		100% {
			transform:rotate(360deg);
			box-shadow:
			0 -0.83em 0 $em $color,
			0 -0.83em 0 $em - 4 * $diff $color,
			0 -0.83em 0 $em - 3 * $diff $color,
			0 -0.83em 0 $em - 2 * $diff $color,
			0 -0.83em 0 $em - 1 * $diff $color;
		}
	}
}

@mixin _s-loader-circles(
	$color,
	$duration : 1s,
	$size : s-rem(20px)
) {
	$a-name : unquote("circles-#{unique-id()}");
	&:before,&:after,& {
		border-radius:50%;
		width:2.5em;
		height:2.5em;
		animation-fill-mode: both;
		animation:$a-name $duration infinite ease-in-out;
	}
	& {
		font-size:$size / 10;
		position:relative;
		text-indent:-9999em;
		transform: translateZ(0);
		animation-delay:-0.16s;
	}
	&:before {
		left:-3.5em;
		animation-delay:-0.32s;
	}
	&:after {
		left:3.5em;
	}
	&:before,&:after {
		content:'';
		position:absolute;
		top:0;
	}
	@keyframes #{$a-name} {
		0%,80%,100% {
			box-shadow:0 2.5em 0 -1.3em $color;
		}
		40% {
			box-shadow:0 2.5em 0 0 $color;
		}
	}
}

@mixin _s-loader-spinner-2(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$background : white,
	$width : null
) {
	@if $width == null {
		$width : 1em;
	}

	$a-name : unquote("spinner-2-#{unique-id()}");
	&,&:before,&:after {
		border-radius:50%;
	}
	&:before,&:after {
		position:absolute;
		content:'';
	}
	&:before {
		width:5.2em;
		height:10.2em;
		background: $background;
		border-radius: 10.2em 0 0 10.2em;
		top:-0.1em;
		left:-0.1em;
		transform-origin:5.2em 5.1em;
		animation:$a-name $duration infinite ease $duration / 4 * 3;
	}
	& {
		font-size:$size / 10;
		text-indent:-99999em;
		position:relative;
		width:10em;
		height:10em;
		box-shadow: inset 0 0 0 $width $color;
		transform: translateZ(0);
	}
	&:after {
		width:5.2em;
		height:10.2em;
		background: $background;
		border-radius: 0 10.2em 10.2em 0;
		top:-0.1em;
		left:5.1em;
		transform-origin:0px 5.1em;
		animation:$a-name $duration infinite ease;
	}

	@keyframes #{$a-name} {
		0% {
			transform:rotate(0deg);
		}
		100% {
			transform:rotate(360deg);
		}
	}
}

@mixin _s-loader-spinner-1(
	$color,
	$duration : 1s,
	$size : s-rem(20px),
	$width : 1.1em
) {
	$a-name : unquote("spinner-1-#{unique-id()}");
	& {
		font-size:$size / 10;
		position:relative;
		text-indent:-9999em;
		border-top:$width solid transparentize($color,.8);
		border-right:$width solid transparentize($color,.8);
		border-bottom:$width solid transparentize($color,.8);
		border-left:$width solid transparentize($color,0);
		transform: translateZ(0);
		animation:$a-name $duration infinite linear;
	}
	&,&:after {
		border-radius:50%;
		width:10em;
		height:10em;
	}
	@keyframes #{$a-name} {
		0% {
			transform:rotate(0deg);
		}
		100% {
			transform:rotate(360deg);
		}
	}
}

@mixin s-loader-gradient(
	$props : (),
	$animation : ()
) {
	$props : _sugar-parse-properties($props, (
		width : number,
		height : number,
		colors : list
	));
	$animation : _sugar-parse-properties($animation, (
		type : translate laser radial,
		duration : second,
		delay : second,
		count : integer,
		spread : number
	));
	$width : map-get-or($props, width, 5em);
	$height: map-get-or($props, height, 1em);
	$colors : map-get-or($props, colors, (orange, red));
	
	$color1 : nth($colors,1);
	$color2 : nth($colors,2);

	$a-count : map-get-or($animation, count, 2);
	$a-type : map-get-or($animation, type, laser);
	$a-duration : map-get-or($animation, duration, 2s);
	$a-delay : map-get-or($animation, delay, 0s);
	$a-spread : map-get-or($animation, spread, 0);

	width : $width;
	height : $height;

	
	transform-origin: $width / 2 $height / 2;

	$a-name : unquote("gradient-#{unique-id()}");
	@if $a-type == laser {
		opacity:0;
		$t-delay : 1 / $a-duration * $a-delay;
		@keyframes #{$a-name}-opacity {
			0% { opacity:0; }
			50% { opacity:1; }
			100% { opacity:0; }
		}
		@keyframes #{$a-name} {
			0% {
				background-size:0 100%;
			}
			100% {
				background-size:100% 100%;
			}
		}
		background: linear-gradient(to right, unquote(_join($colors,',')));
		background-repeat : no-repeat;
		animation: $a-name $a-duration cubic-bezier(1,.01,0,1) 0s infinite, #{$a-name}-opacity $a-duration - $a-delay ease-out infinite;
	} @else if $a-type == radial {
	
		$a-name : unquote("gradient-#{unique-id()}");
		// @keyframes #{$a-name}-opacity {
		// 	0% { opacity:0; }
		// 	50% { opacity:1; }
		// 	100% { opacity:0; }
		// }
		$step : percentage(1 / $a-count);
		$current : 0%;
		@keyframes #{$a-name} {
			@for $i from 0 through $a-count {
				@if $current < 100 {
					#{$current} {
						transform:scale(0,0);
						opacity:0;
						@if $a-spread > 0 {
							$randX : random(round($a-spread));
							@if random(10) < 5 {
								$randX : $randX * -1;
							}
							$randY : random(round($a-spread));
							@if random(10) < 5 {
								$randY : $randY * -1;
							}
							top : 0;
							left : 0;
						}
					}
					#{$current + $step / 2 - 0.001%} {
						transform:scale(0.5,0.5);
						opacity:1;
						@if $a-spread > 0 {
							$randX : random(round($a-spread));
							@if random(10) < 5 {
								$randX : $randX * -1;
							}
							$randY : random(round($a-spread));
							@if random(10) < 5 {
								$randY : $randY * -1;
							}
							top : $randY + unquote(unit($a-spread));
							left : $randX + unquote(unit($a-spread));
						}
					}
					#{$current + $step - 0.001%} {
						transform:scale(1,1);
						opacity:0;
						@if $a-spread > 0 {
							$randX : random(round($a-spread));
							@if random(10) < 5 {
								$randX : $randX * -1;
							}
							$randY : random(round($a-spread));
							@if random(10) < 5 {
								$randY : $randY * -1;
							}
							top : $randY + unquote(unit($a-spread));
							left : $randX + unquote(unit($a-spread));
						}
					}
					#{$current + $step} {
						transform:scale(0,0);
					}
				}
				$current : $current + $step + 0.001%;
			}
		}
		
		position: relative;
		&:before,
		&:after {
			content:'';
			display: block;
			width:$width;
			height:$height;
			position: absolute;
			top:0; left:0;
			@include s-translate(-50% -50%);
			opacity:0;
		}
		// cubic-bezier(1,.01,0,1)
		&:before {
			background: radial-gradient(transparent 30%, $color1 50%, transparent 70%);
			animation: #{$a-name} $a-duration linear 0s infinite;
		}
		@if $color2 {
			&:after {
				background: radial-gradient(transparent 30%, $color2 50%, transparent 70%);
				animation: #{$a-name} $a-duration linear $a-duration / $a-count / 2 infinite;
			}
		}
	}
}

@mixin s-loader-radial(
	$props : (),
	$animation : ()
) {
	$props : _sugar-parse-properties($props, (
		width : number,
		height : number,
		color : color,
		colors : list
	));
	$animation : _sugar-parse-properties($animation, (
		type : translate laser radial,
		duration : second,
		delay : second,
		count : integer,
		spread : number
	));
	$width : map-get-or($props, width, 5em);
	$height: map-get-or($props, height, 1em);
	$color : map-get-or($props, color, red);
	$colors : map-get($props, colors);

	$a-count : map-get-or($animation, count, 2);
	$a-type : map-get-or($animation, type, laser);
	$a-duration : map-get-or($animation, duration, 2s);
	$a-delay : map-get-or($animation, delay, 0s);
	$a-spread : map-get-or($animation, spread, 0);

	// manage duration
	$a-duration : $a-duration + $a-delay;

	width : $width;
	height : $height;
	transform-origin: $width / 2 $height / 2;

	// calculate percentage of delay
	$p-delay : 1;
	@if $a-delay > 0 {
		$p-delay : 1 - 1 / $a-duration * $a-delay;
	}

	$a-name : unquote("radial-#{unique-id()}");
	$step : percentage($p-delay / $a-count);
	$current : 0%;
	$current-idx : 1;
	@keyframes #{$a-name}-b {
		@for $i from 0 through $a-count - 1 {
			@if $current < 100 {
				#{$current} {
					transform:scale(0,0);
					opacity:0;
					top : 0;
					left : 0;
					@if $colors and length($colors) == $a-count * 2 {
						$c : nth($colors, $current-idx);
						background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
					}
				}
				#{$current + $step / 2 - 0.001%} {
					transform:scale(0.5,0.5);
					opacity:1;
					@if $colors and length($colors) == $a-count * 2 {
						$c : nth($colors, $current-idx);
						background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
					}
				}
				#{$current + $step - 0.001%} {
					transform:scale(1,1);
					opacity:0;
					@if $a-spread > 0 {
						$randX : random(round($a-spread));
						@if random(10) < 5 {
							$randX : $randX * -1;
						}
						$randY : random(round($a-spread));
						@if random(10) < 5 {
							$randY : $randY * -1;
						}
						top : $randY + unquote(unit($a-spread));
						left : $randX + unquote(unit($a-spread));
					}
					@if $colors and length($colors) == $a-count * 2 {
						$c : nth($colors, $current-idx);
						background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
					}
				}
				#{$current + $step} {
					transform:scale(0,0);
					top: 0;
					left: 0;
				}
			}
			$current : $current + $step;
			$current-idx : $current-idx + 2;
		}
	}
	$current : 0%;
	$current-idx : 2;
	@keyframes #{$a-name}-a {
		@for $i from 0 through $a-count - 1 {
			@if $current < 100 {
				#{$current} {
					transform:scale(0,0);
					opacity:0;
					top : 0;
					left : 0;
					@if $colors and length($colors) == $a-count * 2 {
						$c : nth($colors, $current-idx);
						background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
					}
				}
				#{$current + $step / 2 - 0.001%} {
					transform:scale(0.5,0.5);
					opacity:1;
					@if $colors and length($colors) == $a-count * 2 {
						$c : nth($colors, $current-idx);
						background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
					}
				}
				#{$current + $step - 0.001%} {
					transform:scale(1,1);
					opacity:0;
					@if $a-spread > 0 {
						$randX : random(round($a-spread));
						@if random(10) < 5 {
							$randX : $randX * -1;
						}
						$randY : random(round($a-spread));
						@if random(10) < 5 {
							$randY : $randY * -1;
						}
						top : $randY + unquote(unit($a-spread));
						left : $randX + unquote(unit($a-spread));
					}
					@if $colors and length($colors) == $a-count * 2 {
						$c : nth($colors, $current-idx);
						background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
					}
				}
				#{$current + $step} {
					transform:scale(0,0);
					top: 0;
					left: 0;
				}
			}
			$current : $current + $step;
			$current-idx : $current-idx + 2;
		}
	}
	
	position: relative;
	&:before,
	&:after {
		content:'';
		display: block;
		width:$width;
		height:$height;
		position: absolute;
		top:0; left:0;
		@include s-translate(-50% -50%);
		opacity:0;
	}
	// cubic-bezier(1,.01,0,1)
	$c : $color;
	@if $colors and length($colors) == 2 {
		$c : nth($colors, 1);
	}
	&:before {
		background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
		animation: #{$a-name}-b $a-duration linear 0s infinite;
	}
	@if $colors and length($colors) == 2 {
		$c : nth($colors, 2);
	}
	&:after {
		background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
		animation: #{$a-name}-a $a-duration linear ($a-duration - $a-delay) / $a-count / 2 infinite;
	}
}

@mixin s-loader-bars(
	$props : (),
	$animation : ()
) {
	$props : _sugar-parse-properties($props, (
		shape : circle rect,
		color : color,
		colors : list,
		width : number,
		height : number,
		count : integer,
		gap : number
	));
	$animation : _sugar-parse-properties($animation, (
		direction : up down both,
		opacity : number,
		duration : second,
		delay : second,
		near : integer,
		ease : string,
		spread : number,
		continuous : true
	));

	$shape : map-get-or($props, shape, rect);
	$color : map-get-or($props, color, red);
	$colors : map-get($props, colors);
	$count : map-get-or($props, count, 5);
	$width : map-get-or($props, width, 0.5em);
	$height : map-get-or($props, height, 2em);
	$gap : map-get-or($props, gap, 0.5em);
	
	$a-opacity : map-get($animation, opacity);
	$a-duration : map-get-or($animation, duration, 1s);
	$a-delay : map-get-or($animation, delay, 0s);
	$a-near : map-get-or($animation, near, 1);
	$a-ease : map-get-or($animation, ease, ease-in-out);
	$a-spread : map-get-or($animation, spread, null);
	$a-direction : map-get-or($animation, direction, both);
	$a-continuous : map-get-or($animation, continuous, true);

	// manage duration
	$a-duration : $a-duration + $a-delay;
	@if $a-delay > 0 {
		$a-continuous : false;
	}

	// manage direction
	@if not $a-spread or $a-spread <= 0 {
		$a-direction : up;
	}

	$offset : $width;

	// position grid
	$_width : $width * ($count - 1) + $gap * ($count - 1);

	$a-name : unquote("bars-#{unique-id()}");

	// calculate box shadows
	$shadows : ();
	
	@if $a-direction == both or $a-direction == up {
		@for $i from 0 through $count - 1 {
			$x : ($width * $i + $gap * $i) + $width + $gap + $offset;
			$y : $height / 2 + $offset;
			$c : $color;
			@if $colors {
				$c : nth($colors, $i + 1);
			}
			@if $a-opacity {
				$c : transparentize($color, 1 - $a-opacity);
			}
			$shadows : append($shadows, $c $x $y 0 0, comma);
		}
	}
	@if $a-direction == both or $a-direction == down {
		@for $i from 0 through $count - 1 {
			$x : ($width * $i + $gap * $i) + $width + $gap + $offset;
			$y : $height / 2 + $offset;
			$c : $color;
			@if $colors {
				$c : nth($colors, $i + 1);
			}
			@if $a-opacity {
				$c : transparentize($color, 1 - $a-opacity);
			}
			$shadows : append($shadows, $c $x $y 0 0, comma);
		}
	}
	$base-shadows : $shadows;

	&:before {
		@if $shape == circle {
			border-radius: 50%;
		}
		width: $width;
		height: $height;
		content: '';
		display: block;
		animation : $a-name $a-duration $a-ease 0s infinite;
		box-shadow : $shadows;
		@include s-translate((-$_width / 2 - $width - $gap - $offset) (-$height / 2 - $offset));
		transform-origin: ($offset + $_width / 2 + $gap + $width) ($offset + $height / 2);
	}

	// calculate percentage of delay
	$p-delay : 0;
	$p-step : 1 / $count;
	@if $a-delay > 0 {
		$p-delay : 1 / $a-duration * $a-delay;
		$p-step : (1 - $p-delay) / ($count + 1);
	}
	// animation
	$step : 1 / $count;
	@keyframes #{$a-name} {
		@for $j from 0 through $count {
			$p : percentage($j * $p-step);
			@if $a-delay > 0 {
				$p : percentage($j * $p-step) + percentage($p-step);
			}
			#{$p} {
				// loop on each box shadows
				$shadows : ();

				@if $a-direction == both or $a-direction == up {
					@for $i from 0 through $count - 1 {
						$x : ($width * $i + $gap * $i) + $width + $gap + $offset;
						$y : $height / 2 + $offset;
						
						$diff : abs($j - $i);

						@if $a-continuous {
							@if $j + $a-near > $count and $i - $a-near < 0 {
								$diff : abs($i - ($j - $count));
							} @else if $j - $a-near < 0 and $i + $a-near > $count {
								$diff : abs($j + ($count - $i));
							}
						}

						@if $a-spread {
							@if $diff < $a-near {
								$y : $y - ($a-spread - ($a-spread / $a-near * $diff));
							} @else if $i == $j {
								$y : $y - $a-spread;
							}
						}
						
						$c : $color;
						@if $colors {
							$c : nth($colors, $i + 1);
						}
						$opacity : 1;
						@if $a-opacity {
							@if $diff < $a-near {
								$opacity : 1 / $a-near * $diff;
							}
							@if 1 - $opacity < $a-opacity {
								$opacity : 1 - $a-opacity
							}
							$transparentize : $opacity;
							$c : transparentize($c, $transparentize);
						}
						$shadows : append($shadows, $c $x $y 0 0, comma);
					}
				}

				@if $a-direction == both or $a-direction == down {
					@for $i from 0 through $count - 1 {
						$x : ($width * $i + $gap * $i) + $width + $gap + $offset;
						$y : $height / 2 + $offset;
						
						$diff : abs($j - $i);
						@if $a-continuous {
							@if $j + $a-near > $count and $i - $a-near < 0 {
								$diff : abs($i - ($j - $count));
							} @else if $j - $a-near < 0 and $i + $a-near > $count {
								$diff : abs($j + ($count - $i));
							}
						}

						@if $diff < $a-near {
							$y : $y + ($a-spread - ($a-spread / $a-near * $diff));
						} @else if $i == $j {
							$y : $y + $a-spread;
						}
						$c : $color;
						@if $colors {
							$c : nth($colors, $i + 1);
						}
						$opacity : 1;
						@if $a-opacity {
							@if $diff < $a-near {
								$opacity : 1 / $a-near * $diff;
							}
							@if 1 - $opacity < $a-opacity {
								$opacity : 1 - $a-opacity
							}
							$transparentize : $a-opacity;
							$c : transparentize($c, $transparentize);
						}
						$shadows : append($shadows, $c $x $y 0 0, comma);
					}
				}

				// apply shadows
				box-shadow: $shadows;
			}
		}
		@if $a-delay > 0 and percentage($count * $p-step) + percentage($p-step) < 100 {
			#{percentage($count * $p-step) + percentage($p-step) * 2} {
				box-shadow: $base-shadows;
			}
		}
	}
}

@mixin s-loader-couch-potato(
	$props : (),
	$animation : ()
) {
	$props : _sugar-parse-properties($props, (
		size : number,
		color : color
	));

	$animation : _sugar-parse-properties($animation, (
		duration : second,
		delay : second,
		ease : string
	));

	$size : map-get-or($props, size, 1em);
	$color : map-get-or($props, color, red);

	$a-duration : map-get-or($animation, duration, 1s);
	$a-delay : map-get-or($animation, delay, 0s);
	$a-ease : map-get-or($animation, ease, ease-in-out);

	$a-duration : $a-duration + $a-delay;

	$a-name : unquote("couch-potato-#{unique-id()}");

	&:before {
		display: block;
		width : $size;
		height: $size;
		content:'';
		@include s-translate(-50% -50%);
		background: $color;
		animation: $a-name $a-duration $a-ease 0s infinite;
	}
	
	$p-delay : 0;
	@if $a-delay > 0 {
		$p-delay : 1 / $a-duration * $a-delay;
	}
	@keyframes #{$a-name} {
		0% {
			border-radius:0;
			@include s-transform(-rotate 0deg);
		}
		#{50% - percentage($p-delay)} {
			border-radius:50%;
			@include s-transform(-rotate 360deg);
		}
		#{100% - percentage($p-delay)} {
			border-radius:0;
			@include s-transform(-rotate 720deg);
		}
	}
}