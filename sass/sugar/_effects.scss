//
// Effects specific
//

//
// Shade
//
@mixin s-long-shadow(
	$shade
) {
	$shade : _sugar-parse-properties($shade, (
		color : color,
		type : text box,
		angle : degree,
		depth : number,
		fade : true,
		blur : number,
		blur-ratio : number
	), (
		color : c,
		type : t,
		angle : a,
		depth : d,
		fade : f,
		blur : b,
		blur-ratio : br
	));

	$shade : _sugar-handle-nested(shade, $shade);

	$color : map-get($shade, color);
	$type : map-get-or($shade, type, text);
	$angle : map-get-or($shade, angle, 135);
	$depth : map-get-or($shade, depth, 20);
	$fade : map-get-or($shade, fade, false);
	$blur : map-get-or($shade, blur, 0);
	$blur-ratio : map-get-or($shade, blur-ratio, 0);

	$angle: ($angle - 90);             
	$x: 1.5 * cos($angle) + 0px;  
	$y: 1.5 * sin($angle) + 0px;  
	$darken: (lightness($color)/$depth)/2;
	$opacify: 0; 
	$shadow: ();  
	          
	$darken:0;  
	
	@if $fade == true {
	  $opacify: (opacity($color)/$depth);
	  transform: translateX(0);
	}
	
	@for $i from 1 through $depth {
		$b : $blur;
		@if $blur-ratio > 0 {
			$b : $blur + $i * $blur-ratio;
		}
		$shadow: $shadow, $i*$x $i*$y rem($b) hsla(hue($color) , saturation($color), (lightness($color) - ($i * $darken)), 1 - ($i * $opacify));     
	}       
	#{$type}-shadow: $shadow;

	@include _sugar-handle-nested(shade) {
		@content;
	}
}