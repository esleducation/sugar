@charset "UTF-8";
/* STYLE.SCSS
---------------------------------------*/
/**
 * Here we start to pull everything together into one big stylesheet.
 *
 * SETUP           Settings, tools, mixins, etc.
 * GENERIC         normalize.css, reset, shared styles, etc.
 * BASE            Basic HTML elements.
 * OBJECTS         Objects, abstractions, design patterns.
 * BLOCKS          Components and modules.
 * TRUMPS          Helpers, overrides, ‘trump-cards’.
 */
/* SETUP
---------------------------------------*/
/**
 * Settings, variables and tools.
 */
/* SETUP
Load compass and all files of level : 01_setup folder (variables, colors vars, griddle conf vars, ...)
---------------------------------------*/
/**
 * Parse and return the Map respresentation of a border property
 * The $border argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.
 *
 * @param 		{List} 			$border 			The border property to parse
 * @return 		{Map} 								The Map represenration of the border
 *
 * @example
 * s-border(1px solid white);
 * // return
 * // (
 * // 	width : 1px,
 * // 	color : white,
 * // 	style : solid
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the Map representation of a columns properties
 * @param  		{Interger} 			[$count=null] 			The number of columns
 * @param 		{Number} 			[$gap=null] 			The gap width between each columns
 * @param 		{String} 			[$fill=null] 			The fill property (balance,auto,initial,inherit)
 * @param 		{Number} 			[$width=null] 			The width of the columns
 * @param 		{Integer}{String} 	[$span=null] 			The column-span property (1,all,initial,inherit)
 * @param 		{List} 				[$rule=null] 			The column-rule property
 * @param 		{String} 			[$rule-style=null]  	The column-rule-style property
 * @param 		{Color} 			[$rule-color=null] 		The column-rule-color property
 * @param 		{Number} 			[$rule-width=null] 		The column-rule-width property
 * @return 		{Map} 										The map representation or the columns properties
 *
 * @example
 * s-columns(2, 20px);
 * // return
 * // (
 * // 	column-count : 2,
 * // 	column-gap : 20px
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Parse and return the Map respresentation of a margin property
 * The $margin argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.
 *
 * @param 			{List}{Number} 			$margin 			The margin property to parse
 * @return 			{Map} 										The map representation
 *
 * @example
 * s-margin(10px); // => ( top:10px, right:10px, bottom:10px, left:10px )
 * s-margin(10px 20px); // => ( top:10px, right:20px, bottom:10px, left:20px )
 * s-margin(5px 10px 15px 20px); // => ( top:5px, right:10px, bottom:15px, left:20px )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the representation of a position styling like position:absolute; top:0; left:100%; etc...
 * This function gives you some shortcuts to align your element top, bottom, middle, center, etc...
 *
 * @param 		{String} 			[$position=absolute] 			The position css property
 * @param 		{String} 			[$vertical-align=top] 			The vertical alignement wanted (top,middle,bottom)
 * @param 		{String} 			[$align=left] 					The horizontal alignement wanted (left,center,right)
 * @param 		{Number} 			[$top=null] 					The top property wanted
 * @param 		{Number} 			[$right=null] 					The right property wanted
 * @param 		{Number} 			[$bottom=null] 					The bottom property wanted
 * @param 		{Number} 			[$left=null] 					The left property wanted
 * @return 		{Map} 												The map representation of the position wanted
 *
 * @example
 * s-position(absolute, top, right);
 * s-position(absolute, middle, center);
 * s-position(relative, bottom, right);
 * s-position(absolute, bottom, center);
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the Map properties representation for the rhythme width
 * The rhythme width is the width of an element that target a certain number of letters by line
 *
 * @param 			{Integer} 			[$letters-count=settings.typo.line-letters-count] 		The number of letters to target by line
 * @return 			{Map} 																		The Map properties representation
 *
 * @example
 * s-rhythme-width(50);
 * // return
 * // (
 * // 	display : block,
 * // 	max-width : 50ex
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the Map properties representation of a translate x,y and z
 *
 * @param 			{Number} 			[$x=0] 			The x translate value
 * @param 			{Number} 			[$y=0] 			The y translate value
 * @param 			{Number} 			[$z=0] 			The z translate value
 * @return 			{Map} 								The translate Map representation
 *
 * @example
 * s-translate(10px,20px);
 * // return
 * // (
 * // 	transform: translateX(10px) translateY(20px) translateZ(0)
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the settings.vertical-rhythme.scope-class value
 *
 * @return 			{String} 			The settings.vertical-rhythme.scope-class value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Helper mixin to set a background image
 *
 * @param 			{String} 				[$repeat=null] 				The background-repeat property
 * @param 			{String} 				[$size=null] 				The background-size property
 * @param 			{String} 				[$attachment=null] 			The background-attachment property
 * @param 			{String} 				[$blend-mode=null] 			The background-blend-mode property
 * @param 			{String} 				[$clip=null] 				The background-clip property
 * @param 			{String} 				[$url=null] 				The background-image url property
 * @param 			{Number} 				[$width=null] 				The background-size width property
 * @param 			{Number} 				[$height=null] 				The background-size height property
 * @param 			{Number} 				[$top=null] 				The background-position top property
 * @param 			{Number} 				[$left=null] 				The background-position left property
 * @param 			{String} 				[$suffix2x=@2x] 			The suffix to add the the url if the 2x resolution if wanted
 * @param 			{String} 				[$suffix3x=@3x] 			The suffix to add the the url if the 3x resolution if wanted
 * @param 			{String} 				[$suffix4x=@4x] 			The suffix to add the the url if the 4x resolution if wanted
 * @param 			{List} 					[$resolution=null] 			The resolution wanted like 2x, 3x and 4x
 * @param 			{List} 					[$position=null] 			The background-position property
 *
 * @example
 * .my-cool-element {
 * 		\@include s-background(
 * 			$url : 'img/my-cool-image.jpg',
 * 			$size : cover,
 * 			resolution : 2x 3x 4x
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Center block
 */
/* # CLEARFIX
	More infos to come..

	https://github.com/stubbornella/oocss/blob/master/oocss/src/components/utils/_clearfix-me.scss

	clearfix   used project wide to clear floats and create a new formatting context

	usage      @include clearfix-me(<empty|overflow|facebook|micro|stubborn>)

	$clearfix-method sets default method
*/
.clearfix-overflow {
  overflow: hidden;
}

.clearfix-facebook {
  display: table-cell;
  vertical-align: top;
  width: 10000px !important;
}

.clearfix-float {
  float: left;
  width: 100%;
}

.clearfix, .tabs, .clearfix-micro {
  zoom: 1;
}

.clearfix:before, .tabs:before, .clearfix-micro:before, .clearfix:after, .tabs:after, .clearfix-micro:after {
  content: " ";
  display: table;
}

.clearfix:after, .tabs:after, .clearfix-micro:after {
  clear: both;
}

@keyframes s-DOMNodeInserted {
  from {
    opacity: .99;
  }
  to {
    opacity: 1;
  }
}

/**
 * Get a registered color by name or wrap a new color into a s-color call
 * to manipulate it with ease.
 * Supported actions :
 * - hue {Deg}
 * - lighten {Percent}
 * - darken {Percent}
 * - saturate {Percent}
 * - desaturate {Percent}
 * - grayscale {Boolean}
 * - complement {Boolean}
 * - invert {Boolean}
 * - opacity {Percent}
 * - mix {Color}
 *
 * @param 		{String}{Color} 		$color 				The color name or the color value to manipulate
 * @param 		{String}{List} 			[$modifier=null] 	The color modifier to apply. Can be a registered modifier name or a modifier list
 * @return 		{Color} 									The actual color value
 *
 * @example 	 	scss
 * // default color (settings.colors.default)
 * $myColor : s-color(default);
 * // primary color (settings.colors.primary)
 * $primary : s-color(primary);
 * // manipulate
 * $primary-dark : s-color(primary, -darken 10%);
 * // registered modifier
 * $primary-light : s-color(primary, light);
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the color in a modifier list
 * @param 			{List} 			$modifiers 		The modifiers list
 * @return 			{String} 						The color name
 *
 * @example
 * $my-color : s-color-modifier(outline primary); // => primary
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the css class selector for the current component setted by the [core/mixins/_s-component.scss] mixin
 * and build with the passed arguments.
 * This function generate the class selector depending of the settings.selector.method setting or the selector method setted by the [s-selector-method mixin](../mixins/_s-selector-method.scss)
 *
 * @param 			{String} 			[$element=null] 		The element name of the class selector | '&' if target the same element like `&s-component-selector("&", ) {}`
 * @param 			{String} 			[$modifier=null] 		The modifier name of the class selector
 * @param 			{String} 			[$state=null] 			The state name of the class selector
 * @param 			{String} 			[$modifierName=null] 	The modifier name that will be used for webcomponent method like [$modifierName="$modifier"]
 * @param 			{String} 			[$method=null] 			The method wanted to generate the selector. [See here](../_selector-methods.scss)
 * @return 			{String} 									The generated class selector
 *
 * @example
 * \@incluse s-component('my-component') {
 * 		// if settings.selector.method === 'BEM'
 * 		s-component-selector('item') // => '.my-component__item'
 * 		s-component-selector(null, 'red') // => '.my-component--red'
 * 		s-component-selector('coco',null,'active') // => '.my-component__coco--active'
 * 		// if setting.selector.method === 'SMACCS'
 * 		s-component-selector('item') // => '.my-component-item'
 * 		s-component-selector(null, 'red') // => '.my-component-red'
 * 		s-component-selector('coco',null,'active') // => '.my-component-coco.is-active'
 * }
 *
 * // if target the same element with & :
 * \@include s-component('my-component') {
 * 		s-component-selector(, red, , "color") {
 * 			&s-component-selector("&", , "active") {
 * 				// something here...
 * 			}
 * 		}
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the name of the top level component setted with the [../mixins/_s-component.scss] mixin
 *
 * @param 			{String} 			[$default=null] 		The name to return if no top component name exist
 * @return 			{String} 									The component name
 *
 * @example
 * s-component('hello') // => 'hello'
 * \@include s-component('my-component') {
 * 		s-component('hello') // => 'my-component'
 * 		\@include s-component('another-component') {
 * 			s-component('hello') // => 'my-component'
 * 		}
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>;
 */
/**
 * Convert a passed value to the wanted unit
 * The conversion between some units that depends on a font-size will take the settings.typo.font-size value as reference.
 *
 * Available conversions
 * - from px
 * 	- to em
 * 	- to rem
 * 	- to pt
 * 	- to %
 *
 * - from em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from pt
 * 	- to em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from rem
 * 	- to em
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * @param 			{Number} 		$value 			The value to convert
 * @param 			{String} 		$unit 			The unit in which to convert the value
 * @return 			{Number} 						The converted value
 *
 * @example
 * // if the settings.typo.font-size === 16px
 * s-convert(24px, rem) // 1.5rem
 * s-convert(3rem, pt) // 36pt
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Transform a dash notation value into a map
 * Dash notation value is : -key1 value1 -key2 value2
 *
 * @param 			{List} 			$dash 			The dash list notation to transform
 * @return 			{Map} 							The map generated
 *
 * @example
 * $dash : -hello world -coco universe
 * s-dash-to-map($dash);
 * // (
 * // 	hello : world,
 * // 	coco : universe
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to em
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The em converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to the closest even value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest even converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Take a filter as parameter and parse it to return the {Map} corresponding
 * The $filter parameter can be either a registered filter name or a filter formated like `filterName(filterValue)`
 *
 * @param 			{List}<String> 			$filter 			The registered filter name or the filter string to transform into map
 * @return 			{Map} 										The corresponding filter map properties
 *
 * @example
 * // register a filter
 * \@include s-setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * s-filter-map(myCoolFilter);
 * // {
 * // 	box-shadow : #000 0 0 10px,
 * // 	blur : 30px
 * // }
 *
 * // custom filter
 * s-filter-map(blur(10px));
 * // {
 * // 	blur : 10px
 * // }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return a list with all the filters that are passed as argument
 * This will use the [./_s-filter-map.scss] function to parse the filters
 *
 * @param 	 	{List}<String> 			$filters 			The registered filter(s) name(s) or the filter(s) string(s) to transform into list
 * @return 		{List} 										The converted filters list to use as css property
 *
 * @example
 * // register a filter
 * \@include s-setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * .my-cool-elememt {
 * 		filter : s-filter(myCoolFilter);
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px);
 * }
 *
 * // custom filter
 * .my-cool-element {
 * 		filter : s-filter(myCoolFilter invert(100%));
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px) invert(100%);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the font-family string or a registered font
 *
 * @param 			{String} 		$name 		The name of the registered font
 * @return 			{String} 					The corresponding font-family property to set in your css
 *
 * @example
 * // register a font
 * \@include s-setup((
 * 		fonts : (
 * 			myCoolFont : (
 * 				font-family : 'Helvetica Neue',
 * 				font-weight : 'bold',
 * 				// etc...
 * 			),
 * 			// other fonts...
 * 		)
 * ));
 *
 * // apply the font
 * .my-cool-element {
 * 		font-family : s-font-family(myCoolFont);
 * 		// font-family : 'Helvetica Neue';
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the font {Map} that correspond to the passed arguments
 *
 * @param 		{String} 			[$family=null] 			The font family wanted (can be a registered font name)
 * @param 		{Color} 			[$color=null] 			The color wanted (can be a registered color name)
 * @param 		{Number} 			[$size=null] 			The font-size wanted
 * @param 		{String} 			[$style=null] 			The font-style wanted
 * @param 		{String} 			[$variant=null] 		The font-variant wanted
 * @param 		{String}{Number} 	[$weight=null] 			The font-weight wanted
 * @param 		{String} 			[$decoration=null] 		The text-decoration wanted
 * @param 		{String} 			[$align=null] 			The text-align wanted
 * @param 		{String} 			[$transform=null] 		The text-transform wanted
 * @param 		{String} 			[$stretch=null] 		The font-stretch wanted
 * @param 		{String} 			[$white-space=null] 	The white-space wanted
 * @param 		{Number} 			[$height=null] 			The line-height wanted
 * @param 		{Number} 			[$spacing=null] 		The letter-spacing wanted
 * @param 		{Number} 			[$indent=null] 			The text-indent wanted
 * @param 		{String} 			[$break=null] 			The line-break wanted
 * @param 		{String} 			[$wrap=null] 			The word-wrap wanted
 * @return 		{Map} 										The corresponding font map
 *
 * @example
 * s-font(
 * 		$family : 'Helvetica Neue',
 * 		$size : 12px,
 * 		$wrap : norwap
 * );
 * // (
 * 		font-family : 'Helvetica Neue',
 * 		font-size : 12px,
 * 		word-wrap : nowrap
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the specified or calculated value of the given stack and size
 * depending on the settings.sizes ratios stack
 *
 * @param 		{Map} 			$stack 			The stack from which to interpolate the value
 * @param 		{String} 		$size 			The size wanted (has to exist in the settings.sizes stack)
 * @return 		{Number} 						The $stack.$size value or the interpolated one depending on the settings.sizes ratios
 *
 * @example
 *
 * // settings.sizes
 * \@include s-setup((
 * 		sizes : (
 * 			small : 0.5,
 * 			default : 1, // default is ALWAYS 1
 * 			big : 1.5
 * 		)
 * ));
 *
 * $myStack : (
 * 		default : 3rem,
 * 		big : 6rem
 * )
 *
 * s-interpolate($myStack, big) // 6rem cause specified in the $myStack value
 * s-interpolate($myStack, small) // 1.5rem => calculated like : 3rem * 0.5 = 1.5rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Check if the passed value is of a certain type
 *
 * Here's the available types that you can check
 * - mixed => mean anything
 * - null
 * - url
 * - px
 * - pt
 * - rem
 * - em
 * - percent | %
 * - vw
 * - vh
 * - ex
 * - ch
 * - cm
 * - mm
 * - in
 * - pc
 * - s | second
 * - boolean | bool
 * - function
 * - number
 * - int | integer
 * - string
 * - color
 * - list
 * - map
 * - deg | degree
 * - list-{type} => check if is a list of the specified type
 * - map-{type} => check if is a map of the specified type
 *
 * @param 			{Mixed} 			$value 			The value to check
 * @param 			{String} 			$type 			The type to check
 * @return 			{Boolean} 							true if match the type, false if not
 *
 * @example
 * s-is(hello, string) // => true
 * s-is('hello', string) // => true
 * s-is(#fff, color) // => true
 * s-is(hello #fff, list-color) // => false
 * s-is(#fff #ddd, list-color) // => true
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Alias to the [./_s-look-and-feel.scss] function
 *
 * Return a settings.look-and-feel stack value
 *
 * @param 		{String} 		$name					The look and feel value name
 * @param 		{String} 		[$size=default] 		The size wanted.
 * @return 		{Number} 								The look and feel value in em
 *
 * @example
 * .my-cool-element {
 * 		padding : s-lnf(padding-horizontal) s-lnf(padding-vertical);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return a settings.look-and-feel stack value
 *
 * @param 		{String} 		$name					The look and feel value name
 * @param 		{String} 		[$size=default] 		The size wanted.
 * @return 		{Number} 								The look and feel value in em
 *
 * @example
 * .my-cool-element {
 * 		padding : s-look-and-feel(padding-horizontal) s-look-and-feel(padding-vertical);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to the closest odd value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest odd converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Parse a given string/list properties and return the Map corresponding to the Map description
 *
 * @param 				{List} 				$properties 			The properties to parse
 * @param 				{Map} 				$descriptor 			The descriptor map to use to parse the properties
 * @return 				{Map} 										The properties in map format
 *
 * @example
 * s-parse-properties(10px hello -delay 20s, (
 *  	myNumber : Number,
 *  	myOtherNumber : Number,
 *  	myString : String,
 *  	myCoolVar : String,
 *  	delay : second
 * ));
 * // => (
 * //  	myNumber : 10px,
 * // 	myString : hello,
 * // 	delay : 20s
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to %
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The % converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to pt
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The pt converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to px
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The px converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Convert the passed value to rem
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The rem converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the passed values in the same unit but that has been even rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typo.font-size == 16px
 * s-render-round-even(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round even the px value : 84px
 * // 3. transform to passed unit value : 84px / 16px = 5.25rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the passed values in the same unit but that has been odd rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typo.font-size == 16px
 * s-render-round-odd(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round odd the px value : 83px
 * // 3. transform to passed unit value : 84px / 16px = 5.1875rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the passed values in the same unit but that has been rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typo.font-size == 16px
 * s-render-round(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round even the px value : 83px
 * // 3. transform to passed unit value : 84px / 16px = 5.1875rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Search and replace tokens like colors #primary in a passed string, list or map
 * Supported tokens types :
 * 1. Colors : colorName
 *
 * @example
 * s-replace-tokens(12px #primary hello #secondary); // > 12px #ddd hello #fff;
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return a selector builded with the params passed, depending on the settings.selector.method base setting.
 *
 * @param 			{String} 			$block 						The block part of the selector
 * @param 			{String} 			[$element=null] 			The element part of the selector
 * @param 			{String} 			[$modifier=null] 			The modifier part of the selector
 * @param 			{String} 			[$state=null] 				The state part of the selector
 * @param 			{String} 			[$modifierName=null] 		The modifier name that will be used for webcomponent method like [$modifierName="$modifier"]
 * @param 			{String} 			[$method=BEM] 				The method used to build the selector (BEM or SMACCS)
 * @return 			{String} 										The generated class selector
 *
 * @example
 * s-selector(my-component, item, null, active, null, BEM); // => .my-component__item--active
 * s-selector(my-component, item, null, active, null, SMACCS); // => .my-component-item.is-active
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the selector method define at the top level with the the [../mixins/_s-selector-method.scss] mixin
 *
 * @param 			{String} 			[$default=settings.selector.method] 		The selector method to return if no top selector method exist
 * @return 			{String} 														The selector method
 *
 * @example
 * s-selector-method() // => settings.selector.method
 * s-selector-method(BEM) // => BEM
 * \@include s-selector-method(SMACCS) {
 * 		s-selector-method(BEM) // => SMACCS
 * 		\@include s-selector-method(WEBCOMPONENT) {
 * 			s-selector-method() // => SMACCS
 * 		}
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>;
 */
/**
 * Get a settings from the global settings stack
 *
 * @param 				{String} 			$path 						The setting path wanted separated by dots
 * @param 				{String} 			[$context=s-context()] 		The context name to get the setting
 * @return 				{Mixed} 										The setting value¨
 *
 * @example
 * $font-size : s-setting('typo.font-size');
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return a value interpolated from the settings.spaces stack
 *
 * @param 			{String} 			$size 			The space size wanted. Must exist in the settings.sizes stack
 * @return 			{Number} 							The actual space value
 *
 * @example
 * .my-cool-section {
 * 		padding : s-pace(big);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return a number without any units
 *
 * @param 			{Number} 		$number 		The number to process
 * @return 			{Number} 						The number without units
 *
 * @example
 * s-strip-units(12px); // => 12
 * s-strip-units(30rem); // => 30
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Test an argument passed to a function or a mixin to ensure his type, value, etc...
 * If the argument does not pass the test, an error will be thrown, unless the $check-only argument is true
 *
 * @param 				{String} 				$method 				The function/mixin name (debug purpose)
 * @param 				{String} 				$argument 				The argument name to test (debug purpose)
 * @param 				{List}{String} 			$type-or-values 		If string, the type(s) that the argument must match, if list, the possible values that the argument can take
 * @param 				{Mixed} 				$value 					The actual argument value
 * @param 				{Boolean} 				[$check-only=false]		If this is true, will not thrown any error
 * @return 				{Mixed} 										The value if ok, false if not
 *
 * @example
 * \@mixin my-cool-mixin($argument1, $argument2) {
 *        $argument1 : s-test-argument(my-cool-mixin, argument1, string, $argument1);
 *        $argument2 : s-test-argument(my-cool-mixin, argument2, (hello,world,12), $argument2);
 * }
 * \@mixin my-cool-mixin(hello, world); // ok
 * \@mixin my-cool-mixin(hello, universe); // throw an error
 * \@mixin my-cool-mixin(12, world); // throw an error
 *
 * @author 				Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Take a transition as parameter and parse it to return the {Map} corresponding
 * The $transition parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transition argument will be parsed with the [./_s-parse-properties.scss] function.
 *
 * @param 			{List} 				$transition 			The registered transition name or the transition string to transform into map
 * @return 			{Map} 										The corresponding transition map properties
 *
 * @example
 * // register a transition
 * \@include s-setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * s-transition-map(fast);
 * // {
 * // 	property : all,
 * // 	duration : .2s,
 * // 	ease : ease-in-out
 * // }
 *
 * // custom transition
 * s-transition-map(fast -delay .5s);
 * // {
 * // 	property : all,
 * // 	duration : .2s,
 * // 	ease : ease-in-out,
 * // 	delay : .5s
 * // }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Take a transition as parameter and parse it to return the {List} corresponding
 * The $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transitions argument will be parsed with the [./_s-parse-properties.scss] function.
 *
 * @param 			{List} 				$transitions 			The registered transition(s) name(s) or the transition(s) strings(s) to transform into list
 * @return 			{List} 										The corresponding transition list properties
 *
 * @example
 * // register a transition
 * \@include s-setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out 0s,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * .my-cool-element {
 * 		transition : s-transition(fast);
 * 		// transition : all .2s ease-in-out 0s;
 * }
 *
 * // custom transition
 * .my-cool-element {
 *  	transition : s-transition(fast -delay .5s, fast width ease-in);
 *  	// transition : all .2s ease-in-out .5s, width .2s ease-in 0s;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the unit context if has been set by the [../mixins/_s-unit-context.scss] mixin
 *
 * @return 		{String} 				The unit context setted
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Return the generated vertical rhythme properties map calculated depending on the passed arguments
 *
 * @param 			{Number} 				[$font-size=settings.typo.font-size] 			The font size wanted
 * @param 			{String} 				[$font-family=settings.typo.font-family] 		The font family to use
 * @param 			{Number} 				[$line-height=null] 							The line height to use
 * @param 			{Number} 				[$margin-top=0] 								The targeted margin-top
 * @param 			{Number} 				[$margin-bottom=0] 								The targeted margin-bottom
 * @param 			{Number} 				[$padding-top=0] 								The targeted padding-top
 * @param 			{Number} 				[$padding-bottom=0] 							The targeted padding-bottom
 * @param 			{List} 					[$margin=null] 									The targeted margin property
 * @param 			{List} 					[$padding=null] 								The targeted padding property
 * @param 			{List} 					[$border-top=null] 								The targeted border-top property
 * @param 			{List} 					[$border-bottom=null] 							The targeted border-bottom property
 * @param 			{Number} 				[$border-top-width=0] 							The targeted border-top-width property
 * @param 			{Number} 				[$border-bottom-width=0] 						The targeted border-bottom-width property
 * @param 			{Number} 				[$border=null] 									The targeted border property
 * @param 			{Number} 				[$cap-height=null] 								The font cap-height used to calculate the vertical ryhthme
 * @param 			{Boolean}{String} 		[$calculate-height=false] 						If true|min-height|max-height|height, will return the corresponding absolute height value in the map
 *
 * @TODO example
 *
 * @see 			https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b#.lck2lgbni
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generic sugar function can return multiple settings types like:
 * - any settings : s('settings.{path}')
 * - look and feel : s('look-and-feel.{property}', $size)
 *  	- s('lnf.{property}', $size)
 * - space : s('space.{size}')
 * - color : s('color.{name}', $modifier)
 * - transition : s('transition.{name}')
 * - filter : s('filter.{name}')
 *
 * @example
 * $my-color : s('color.primary');
 * $my-transition : s('transition.fast');
 * $my-font-size : s('settings.typo.font.size')
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out the animation property calculated with the passed arguments
 * This mixin support all the standard css animation properties like name, duration, delay, ease, direction and fill-mode.
 * The $animations argument will be parsed with the [../functions/_s-parse-properties.scss] function.
 * If you specify multiple animations at a time, this mixin will take care
 * of the delay calculation for each animations and make them play one after another
 *
 * @param 			{List} 				$animations 			The animations wanted like : coco .2s ease-in-out reverse
 *
 * @example
 * .my-cool-element {
 * 		@include s-animation(my-animation 1s ease-in-out, another-animation 4s);
 * 		// animation : my-animation 1s 0s ease-in-out 1 normal forwards, another-animation 4s 1s ease-in-out 1 normal forwards;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out all wanted registered classes like padding helpers, margin helpers, font helpers, etc...
 * Available namespaces
 * - `sugar.filter.{name}` : .fi-{name}
 * - `sugar.transition.{name}` : .tr-{name}
 * - `sugar.font.family.{name}` : .f-{name}
 * - `sugar.margin.bottom.{size}` : .m-b-{size}
 * - `sugar.margin.top.{size}` : .m-t-{size}
 * - `sugar.margin.left.{size}` : .m-l-{size}
 * - `sugar.margin.right.{size}` : .m-r-{size}
 * - `sugar.margin.side.{size}` : .m-s-{size}
 * - `sugar.padding.all.{size}` : .p-{size}
 * - `sugar.padding.top.{size}` : .p-t-{size}
 * - `sugar.padding.bottom.{size}` : .p-b-{size}
 * - `sugar.padding.left.{size}` : .p-l-{size}
 * - `sugar.padding.right.{size}` : .p-r-{size}
 * - `sugar.padding.side.{size}` : .p-s-{size}
 * - `sugar.size.{size}` : .s-{size}
 * - `sugar.size.rel.{size}` : .s-{size}-rel
 * - `sugar.padding.no.top` : .no-p-t
 * - `sugar.padding.no.bottom` : .no-p-b
 * - `sugar.padding.no.left` : .no-p-l
 * - `sugar.padding.no.right` : .no-p-r
 * - `sugar.padding.no.side` : .no-p-s
 * - `sugar.margin.no.top` : .no-m-t
 * - `sugar.margin.no.bottom` : .no-m-b
 * - `sugar.margin.no.left` : .no-m-l
 * - `sugar.margin.no.right` : .no-m-r
 * - `sugar.margin.no.side` : .no-m-s
 * - `sugar.color.{name}.color` .c-{name}
 * - `sugar.color.{name}.bkg` : .bkg-{name}
 * - `sugar.color.{name}.modifier.{mod-name}.color` : .c-{name}--{mod-name}
 * - `sugar.color.{name}.modifier.{mod-name}.bkg` : .bkg-{name}--{mod-name}
 * - `sugar.pull.left` : .pull-left
 * - `sugar.pull.right` : .pull-right
 * - `sugar.position.relative` : .relative
 * - `sugar.position.absolute` : .absolute
 * - `sugar.clear.left` : .clear-left
 * - `sugar.clear.right` : .clear-right
 * - `sugar.clear.both` : .clear
 * - `sugar.display.show` : .show
 * - `sugar.display.show-inline` : .show-inline
 * - `sugar.display.hidden` : .hidden
 * - `sugar.display.hide` : .hide
 * - `sugar.display.visible` : .visible
 * - `sugar.display.invisible` : .invisible
 * - `sugar.display.visually-hidden` : .visually-hidden
 * - `sugar.text.hidden` : .t-hidden
 * - `sugar.text.truncate` : .t-truncate
 * - `sugar.text.align.left` : .t-left
 * - `sugar.text.align.right` : .t-right
 * - `sugar.text.align.center` : .t-center
 * - `sugar.text.align.justify` : .t-justify
 * - `sugar.text.transform.lowercase` : .t-lowercase
 * - `sugar.text.transform.uppercase` : .t-uppercase
 * - `sugar.text.transform.capitalize` : .t-capitalize
 * - `sugar.font.weight.bold` : .f-bold
 * - `sugar.font.weight.lighter` : .f-lighter
 * - `sugar.font.weight.bolder` : .f-bolder
 * - `sugar.font.weight.normal` : .f-normal
 * - `sugar.font.style.italic` : .f-italic
 * - `sugar.font.style.oblique` : .f-oblique
 * - `sugar.font.variant.small-caps` : .f-small-caps
 * - `sugar.block.align.center` : .block-center
 * - `sugar.clearfix.default` : .clearfix
 * - `sugar.clearfix.float` : .clearfix-float
 * - `sugar.clearfix.micro` : .clearfix-micro
 * - `sugar.clearfix.overflow` : .clearfix-overflow
 * - `sugar.clearfix.facebook` : .clearfix-facebook
 * - `sugar.no-transitions` : .no-transitions
 * - `sugar.clear-transitions` : .clear-transitions
 * - `sugar.no-animations` : .no-animations
 * - `sugar.clear-animations` : .clear-animations
 * - `sugar.no-transmations` : .no-transmations
 * - `sugar.clear-transmations` : .clear-transmations
 *
 * @param 			{List}<string> 			$namespaces 		The classes namespaces wanted
 *
 * @example
 * \@include s-classes(); // will print out all the classes
 * \@include s-classes('sugar.font'); // will print all the font classes
 * \@include s-classes('sugar.clearfix' 'sugar.pull'); // the clearfixes and the pull classes
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out the scoped color schema css
 *
 * @param 		{String} 			$name 			The color schema name
 *
 * @example
 * \@include s-color-schema(light) {
 * 		h1, h2 {
 * 			color : white;
 * 		}
 * }
 * // will print
 * .cs-light h1,
 * .cs-light h2 {
 * 		color : white;
 * }
 *
 * h1, h2 {
 * 		\@include s-color-schema(light) {
 * 			color : white;
 * 		}
 * }
 * // will print
 * .cs-light h1, h1.cs-light,
 * .cs-light h2, h2.cs-light {
 * 		color : white;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set the name of the component that will be handled inside the mixin
 *
 * @param 			{String} 			[$name=null] 			The name of the component to set
 * @param 			{String}{Map} 		[$context=null] 		A context name or map to use inside the mixin
 *
 * @example
 * \@include s-component('my-component') {
 * 		s-component('hello') // => 'my-component'
 * 		\@include s-component('another-component') {
 * 			s-component('hello') // => 'my-component'
 * 		}
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>;
 */
/**
 * Register a context with a name to use it later
 *
 * @param 			{String} 		$name 			The context name
 * @param 			{Map} 			$settings 		The settings to override for this context
 *
 * @example
 * \@include s-context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // using your context
 * \@include s-context(my-cool-context) {
 * 		s-look-and-feel(padding-vertical); // => 0.6em
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set a context to be used inside the mixin
 *
 * @param 			{String}{Map} 			$name-or-map 		The name of a registered context or a map
 *
 * @example
 * // register a context
 * \@include s-context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // registered context
 * \@include s-context(my-cool-context) {
 * 		// your code here...
 * }
 *
 * // inline context
 * \@include s-context((
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : .3em
 * 			)
 * 		)
 * )) {
 * 		// your code here...
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out a list with all the filters that are passed as argument
 * This will use the [../functions/_s-filter-map.scss] function to parse the filters
 *
 * @param 	 	{List}<String> 			$filters 			The registered filter(s) name(s) or the filter(s) string(s) to transform into list
 *
 * @example
 * // register a filter
 * \@include s-setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * .my-cool-elememt {
 * 		\@include s-filter(myCoolFilter);
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px);
 * }
 *
 * // custom filter
 * .my-cool-element {
 * 		\@include s-filter(myCoolFilter invert(100%));
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px) invert(100%);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Helper to print a font-face
 *
 * @param 			{String} 		$font-family 			The font-family
 * @param 			{String} 		$src 					The source url (only 1 extension)
 * @param 			{List} 			[$extensions=woff2] 	The extensions list that you have available
 * @param 			{String} 		[$font-weight=normal] 	The font-weight property
 * @param 			{String} 		[$font-style=normal] 	The font-style property
 *
 * @example
 * // if you have these extensions files : .woff .eot .woff2
 * \@include s-font-face(
 * 		$name : my-cool-font,
 * 		$src : '/fonts/my-font.eot',
 * 		$extensions : eot woff woff2
 * )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print all the fonts properties that correspond to the passed arguments
 *
 * @param 		{String} 			[$family=null] 			The font family wanted (can be a registered font name)
 * @param 		{Color} 			[$color=null] 			The color wanted (can be a registered color name)
 * @param 		{Number} 			[$size=null] 			The font-size wanted
 * @param 		{String} 			[$style=null] 			The font-style wanted
 * @param 		{String} 			[$variant=null] 		The font-variant wanted
 * @param 		{String}{Number} 	[$weight=null] 			The font-weight wanted
 * @param 		{String} 			[$decoration=null] 		The text-decoration wanted
 * @param 		{String} 			[$align=null] 			The text-align wanted
 * @param 		{String} 			[$transform=null] 		The text-transform wanted
 * @param 		{String} 			[$stretch=null] 		The font-stretch wanted
 * @param 		{String} 			[$white-space=null] 	The white-space wanted
 * @param 		{Number} 			[$height=null] 			The line-height wanted
 * @param 		{Number} 			[$spacing=null] 		The letter-spacing wanted
 * @param 		{Number} 			[$indent=null] 			The text-indent wanted
 * @param 		{String} 			[$break=null] 			The line-break wanted
 * @param 		{String} 			[$wrap=null] 			The word-wrap wanted
 * @return 		{Map} 										The corresponding font map
 *
 * @example
 * .my-cool-elememt {
 * 		\@include s-font(
 * 			$family : 'Helvetica Neue',
 * 		 	$size : 12px,
 * 		  	$wrap : norwap
 *      );
 *      // print
 * 		font-family : 'Helvetica Neue',
 * 		font-size : 12px,
 * 		word-wrap : nowrap
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Init the sugar toolkit.
 * This has to be called **AFTER** all the [./_s-setup.scss] mixin call
 * and **BEFORE** all the others sugar mixins and functions calls
 *
 * @example
 * \@include s-init();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Register all the dynamic helper classes that depends on the settings, etc...
 * This is used internaly
 *
 * @example
 * \@include s-init-classes();
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Register a helper class under a certain namespace
 *
 * @param 			{String} 		$classname 		The classname that will be printed out
 * @param 			{String} 		$namespace 		The dots separated namespace under which the class will live
 *
 * @example
 * \@include s-register-class(my-cool-class, 'my.cool.namespace') {
 * 		background : pink;
 * }
 * \@include s-register-class(another-cool-class, 'my.another.namespace') {
 * 		background : red;
 * }
 *
 * // print out my helpers classes
 * \@include s-classes('my');
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set the selector method that will be handled inside the mixin
 * [See here](../_selector-methods.scss) for available selector methods
 *
 * @param 			{String} 			[$method=null] 			The selector method to set
 *
 * @example
 * \@include s-selector-method(SMACCS) {
 * 		s-selector-method(BEM) // => SMACCS
 * 		\@include s-selector-method(WEBCOMPONENT) {
 * 			s-selector-method() // => 'SMACCS'
 * 		}
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>;
 */
/**
 * Setup sugar toolkit by overriding the default [settings](../_settings.scss)
 * This has to be called **BEFORE** the [s-init mixin](./_s-init.scss)
 *
 * @param 			{Map} 			$settings 		The settings to override
 *
 * @example
 * \@include s-setup((
 * 		typo : (
 * 			font-size : 12px
 * 		),
 * 		sizes : (
 * 			small : 0.5,
 * 			big : 1.5
 * 		)
 * ));
 * // this mixin can be called as many times as you need
 * // this allows you to separate your configs setup into multiple
 * // files...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Display the vertical rhythme
 *
 * @param 			{Color} 		The color wanted
 *
 * @example
 * body {
 * 		@include s-show-vertical-rhythme();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Take a transition as parameter and print the corresponding transition property
 * The $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transitions argument will be parsed with the [./_s-parse-properties.scss] function.
 *
 * @param 			{List} 				$transitions 			The registered transition(s) name(s) or the transition(s) strings(s) to transform into list
 * @return 			{List} 										The corresponding transition list properties
 *
 * @example
 * // register a transition
 * \@include s-setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out 0s,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * .my-cool-element {
 * 		\@include s-transition(fast>);
 * 		// transition : all .2s ease-in-out 0s;
 * }
 *
 * // custom transition
 * .my-cool-element {
 * 		\@include s-transition(fast -delay .5s, fase width ease-in);
 *  	// transition : all .2s ease-in-out .5s, width .2s ease-in 0s;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Set the unit context to use inside the mixin.
 * This mean that if you set a unit context, then get a number setting through the [s-setting function](../functions/_s-setting.scss),
 * The value that will be returned will be converted into the unit context if possible
 *
 * @param 			{String} 			$unit 			The unit wanted
 *
 * @example
 * // if settings.typo.font-size == 16px
 * s-setting('typo.font-size'); // => 16px
 * \@incluse s-unit-context(rem) {
 * 		s-setting('typo.font-size'); // => 1rem
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Print out the vertical rhythme properties map calculated depending on the passed arguments
 *
 * @param 			{Number} 				[$font-size=settings.typo.font-size] 			The font size wanted
 * @param 			{String} 				[$font-family=settings.typo.font-family] 		The font family to use
 * @param 			{Number} 				[$line-height=null] 							The line height to use
 * @param 			{Number} 				[$margin-top=0] 								The targeted margin-top
 * @param 			{Number} 				[$margin-bottom=0] 								The targeted margin-bottom
 * @param 			{Number} 				[$padding-top=0] 								The targeted padding-top
 * @param 			{Number} 				[$padding-bottom=0] 							The targeted padding-bottom
 * @param 			{List} 					[$margin=null] 									The targeted margin property
 * @param 			{List} 					[$padding=null] 								The targeted padding property
 * @param 			{List} 					[$border-top=null] 								The targeted border-top property
 * @param 			{List} 					[$border-bottom=null] 							The targeted border-bottom property
 * @param 			{Number} 				[$border-top-width=0] 							The targeted border-top-width property
 * @param 			{Number} 				[$border-bottom-width=0] 						The targeted border-bottom-width property
 * @param 			{Number} 				[$border=null] 									The targeted border property
 * @param 			{Number} 				[$cap-height=null] 								The font cap-height used to calculate the vertical ryhthme
 * @param 			{Boolean}{String} 		[$calculate-height=false] 						If true|min-height|max-height|height, will return the corresponding absolute height value in the map
 *
 * @TODO example
 *
 * @see 			https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b#.lck2lgbni
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * This file is responsible to register the static helper classes like pull-right, clear, etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
.pull-left {
  float: left;
}

.pull-right {
  float: right;
}

.relative {
  position: relative;
}

.absolute {
  position: absolute;
}

.clear-left {
  clear: left;
}

.clear-right {
  clear: right;
}

.clear {
  clear: both;
}

.show {
  display: block;
}

.show-inline {
  display: inline-block;
}

.hidden {
  display: none;
}

.hide {
  display: none;
}

.visible {
  visibility: visible;
}

.invisible {
  visibility: hidden;
}

.visually-hidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

.t-hidden {
  overflow: hidden;
  text-indent: -9000px;
  display: block;
}

.t-truncate {
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.t-truncate > * {
  text-overflow: ellipsis;
  overflow: hidden;
}

.t-left {
  text-align: left;
}

.t-right {
  text-align: right;
}

.t-center {
  text-align: center;
}

.t-justify {
  text-align: justify;
}

.t-lowercase {
  text-transform: lowercase;
}

.t-uppercase {
  text-transform: uppercase;
}

.t-capitalize {
  text-transform: capitalize;
}

.f-bold {
  font-weight: bold;
}

.f-lighter {
  font-weight: lighter;
}

.f-bolder {
  font-weight: bolder;
}

.f-normal {
  font-weight: normal;
  font-style: normal;
}

.f-italic {
  font-style: italic;
}

.f-oblique {
  font-weight: oblique;
}

.f-small-caps {
  font-variant: small-caps;
}

.block-center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.no-transitions, .no-transitions:before, .no-transitions:after {
  transition: none !important;
}

.clear-transitions, .clear-transitions:before, .clear-transitions:after, .clear-transitions *, .clear-transitions *:before, .clear-transitions *:after {
  transition: none !important;
}

.no-animations, .no-animations:before, .no-animations:after {
  animation: none !important;
}

.clear-animations, .clear-animations:before, .clear-animations:after, .clear-animations *, .clear-animations *:before, .clear-animations *:after {
  animation: none !important;
}

.no-transmations, .no-transmations:before, .no-transmations:after {
  transition: none !important;
  animation: none !important;
}

.clear-transmations, .clear-transmations:before, .clear-transmations:after, .clear-transmations *, .clear-transmations *:before, .clear-transmations *:after {
  transition: none !important;
  animation: none !important;
}

/**
 * This file contains all the default settings that can be overrided by the [s-setup mixin](./mixins/_s-setup.scss).
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Create an arrow bubble effect
 *
 * @param 		{String} 			[$side=bottom] 				The side (top,right,bottom,left)
 * @param 		{String} 			[$align=center] 			The alignement (left,center,right,top,middle,bottom)
 * @param 		{Number} 			[$size=10px] 				The size of the arrow
 * @param 		{Color} 			[$color=s-color(primary)] 	The color of the bubble
 * @param 		{Number} 			[$arrow-offset=10px] 		The arrow offset from the side of the bubble
 * @param 		{Number} 			[$border-width=0] 			The border width of the bubble
 * @param 		{Color} 			[$border-color=null] 		The border color of the bubble
 *
 * @example
 * .my-cool-bubble {
 * 		\@include s-bubble(
 * 			$color : s-color(secondary)
 * 		);
 * 		color : white;
 * }
 *
 * @see 			https://codepen.io/kirkas/pen/otqyJ
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a drop shadow depending on the depth specified
 *
 * @param 		{Integer} 			$depth 							The depth wanted (1,2,3,4,etc...)
 * @param 		{Color} 			[$color=rgba(0,0,0,.2)] 		The drop shadow color
 *
 * @example
 * .my-cool-element {
 * 		\@include s-depth(2);
 * }
 *
 * @author 	 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Create a poping dot effect to catch user attention on a particular item
 * This mixin affect the :before and :after pseudo selector of the item
 *
 * @param 		{String} 		[$vertical-align=top] 			Where to put the dot verticaly (top,middle,bottom)
 * @param 		{String} 		[$align=left] 					Where to put the dot horizontaly (left,center,right)
 * @param 		{Number} 		[$size=20px] 					The size of the dot
 * @param 		{Color} 		[$color=primary] 				The color of the dot
 * @param 		{Number} 		[$offset-top=0] 				The offset top
 * @param 		{Number} 		[$offset-right=0] 				The offset right
 * @param 		{Number} 		[$offset-bottom=0] 				The offset bottom
 * @param 		{Number} 		[$offset-left=0] 				The offset left
 *
 * @example
 * .my-cool-element {
 * 		\@include s-hey(
 * 			$align : right,
 * 			$color : secondary,
 * 			$size : 10px,
 * 			$offset-top : -10px,
 * 			$offset-right : -10px
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a full animated, single element, bars loader
 *
 * @param 			{String} 			[$shape=rect] 				The shape of the bars (rect,circle)
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$width=.5em] 				The width of each bars
 * @param 			{Number} 			[$height=2em] 				The height of each bars
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$gap=.5em] 				The gap between each bars
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 * @param 			{Number} 			[$a-offset=null] 			The offset to move the animated bar
 * @param 			{String} 			[$a-direction=both] 		The direction in which to move the bars (up,down,both)
 * @param 			{Boolean} 			[$a-continuous=true] 		If true, the first bars will be animated at same time at the last ones
 *
 * @example
 * .my-cool-loader {
 * 		\@include s-loader-bars(
 * 			$color : primary,
 * 			$a-offset : .5em
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a full animated, single element, circle loader
 *
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$size=.33em] 				The size of each dot
 * @param 			{Number} 			[$radius=1em] 				The distance of each dot from the center of the loader
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 *
 * @TODO finish documentation
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a full animated, single element, couch-potato style loader
 *
 * @param 		{Number} 		[$size=1em] 				The size of the loader
 * @param 		{Color} 		[$color=primary] 			The color of the loader
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 * @param 		{Degree}		[$a-rotate=360deg] 			The animation rotation
 * @param 		{Number} 		[$a-scale=.7] 				The animation scale
 *
 * @example
 * .my-cool-loader {
 * 		\@include s-loader-couch-potato();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a full animated, single element, flip ball style loader
 *
 * @param 		{String} 		[$shape=circle] 			The shape of the loader (circle,rect)
 * @param 		{Number} 		[$size=1em] 				The size of the loader
 * @param 		{Color} 		[$color=primary] 			The color of the loader. Can be a list of colors
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 *
 * @example
 * .my-cool-loader {
 * 		\@include s-loader-flip-ball();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Generate a long shadow effect like [this](https://www.google.ch/search?q=long+shadow&espv=2&biw=2560&bih=1316&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjjne6x49LPAhVBHRQKHat8AW8Q_AUIBigB)
 *
 * @param 		{Color} 		[$color=rgba(0,0,0,.3)] 			The shadow color
 * @param 		{String} 		[$type=text] 						The shadow type (text,box)
 * @param 		{Degree} 		[$angle=135deg] 					The shadow angle
 * @param 		{Integer} 		[$depth=20] 						The shadow depth
 * @param 		{Boolean} 		[$fade=false] 						If true, the shadow will fade itself
 * @param 		{Number} 		[$blur=0] 							The blur amount of the shadow
 * @param 		{Number} 		[$blur-ratio=0] 					The ratio to blur each depth more
 *
 * @example
 * .my-cool-title {
 * 		\@include s-long-shadow(
 * 			$depth : 10
 * 		);
 * }
 * .my-cool-box {
 * 		\@include s-long-shadow(
 * 			$type : box
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Create side lines around an item
 *
 * @param 			{String} 		[$style=solid] 			The line style, same possible values as the border-style property
 * @param 			{String} 		[$side=both] 			The side where to put lines (left,right,both)
 * @param 			{Number} 		[$height=1px] 			The lines height
 * @param 			{Number} 		[$width=50%] 			The width of the lines
 * @param 			{Color} 		[$color=text]			The color of the lines
 * @param 			{Number} 		[$padding=0] 			The padding between the lines and the content
 * @param 			{Number} 		[$offset-top=null] 		The line offset top
 *
 * @example
 * h1 {
 * 		\@include s-side-lined(
 * 			$padding : 20px,
 * 			$side : right,
 * 			$width : 100%
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Load all components
 */
.btn, .btn--block {
  display: inline-block;
  border: none;
  cursor: pointer;
  outline-width: 0;
  -webkit-appearance: none;
  line-height: 0;
  text-decoration: none;
  font-size: 1em;
  user-select: none;
}

.btn:not(button):not(input), .btn--block:not(button):not(input) {
  line-height: 1;
}

.btn > *, .btn--block > * {
  vertical-align: middle;
}

button {
  line-height: 1;
}

/**
 * Load all components
 */
@keyframes s-ripple {
  0% {
    opacity: 1;
    transform: translateX(-50%) translateY(-50%) scale(0, 0);
  }
  100% {
    opacity: 0;
    transform: translateX(-50%) translateY(-50%) scale(1, 1);
  }
}

/* # GRIDLE vars
Define the gridle configuration vars

For the documentation check : http://gridle.org/
*/
/* GENERIC
---------------------------------------*/
/**
 * These are far reaching styles that affect and underpin every element on the
 * page, e.g. `* {}`.
 */
/* GENERIC
Load all files of level : 03_generics folder (import gridle and fonts, icons, general proprietes like box-sizing, ...)
Icons file is generated by grunt! So check /assets-src/fonts/icons.html for full list of icons. For the intern doc: 03_generic/_generics.scss and
---------------------------------------*/
html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after {
  content: '';
  content: none;
}

q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.s-settings:after {
  content: '{"unit": "rem", "reset": true, "border-box": true, "sizes": {"smaller": 0.6, "small": 0.8, "default": 1, "medium": 1.5, "big": 2, "bigger": 3}, "typo": {"font-family": "helvetica-neue", "font-size": "14px", "font-sizes": null, "line-letters-count": 55, "font-format": {"eot": "embedded-opentype", "woff2": "woff2", "woff": "woff", "ttf": "truetype", "otf": "opentype", "svg": "svg", "svgz": "svgz"}}, "look-and-feel": {"border-radius": {"default": "0em"}, "padding-vertical": {"default": "1.6em"}, "padding-horizontal": {"default": "1.2em"}, "font-size": {"default": "1em", "smaller": "0.6em", "small": "0.8em", "medium": "1.5em", "big": "2em", "bigger": "3em"}, "disabled-opacity": {"default": 0.5}}, "spaces": {"default": "20px"}, "colors": {"default": "#f8f8f9", "text": "#333", "link": {"color": "primary"}, "primary": {"color": "#f2bc2b"}, "secondary": {"color": "#777"}, "success": {"color": "#5cb85c"}, "warning": {"color": "#f0ad4e"}, "error": {"color": "#d9534f"}, "info": {"color": "#2199e8"}, "lightgrey": {"color": "#f8f8f9", "modifiers": {"dark": "#eaeaed", "light": "white"}}}, "vertical-rhythme": {"enabled": true, "scope-class": "vr", "no-vertical-rhythme-class": "no-vr"}, "selector": {"method": "BEM"}, "BEM": {"standelone-modifier": false, "element-separator": "__", "modifier-separator": "--"}, "modular-scale": {"base": "1rem", "ratio": 1.618034, "range": null, "fluid": false}, "fonts": {"default": {"font-family": ["Helvetica Neue", "Helvetica", "Verdana", "Arial", "sans-serif"], "font-weight": "normal", "cap-height": 0.65}, "code": {"font-family": ["Menlo", "Monaco", "Consolas", "Courier New", "monospace"], "font-weight": "normal", "cap-height": 0.65}, "helvetica-neue": {"font-family": "Helvetica Neue"}}, "filters": {"shadow": "box-shadow(#text 0 0 32px)", "shadowed-text": "text-shadow(rgba(0, 0, 0, 0.3) 1px 1px 2px)"}, "transitions": {"default": ["all", "0.2s", "ease-in-out", "0s"], "fast": ["all", "0.1s", "ease-in-out", "0s"], "slow": ["all", "0.4s", "ease-in-out", "0s"]}}';
  display: none;
}

html {
  box-sizing: border-box;
}

*, *:before, *:after {
  box-sizing: inherit;
}

html {
  font-size: 14Px;
  font-family: "Helvetica Neue";
}

body {
  color: #333;
}

/**
 * @category Typography
 */
.t-format h1,
.h1, .t-format h2,
.h2, .t-format h3,
.h3, .t-format h4,
.h4, .t-format h5,
.h5 {
  line-height: 1.4;
}

.vr .t-format h1, .t-format .vr h1, .vr
.h1, .vr .t-format h2, .t-format .vr h2, .vr
.h2, .vr .t-format h3, .t-format .vr h3, .vr
.h3, .vr .t-format h4, .t-format .vr h4, .vr
.h4, .vr .t-format h5, .t-format .vr h5, .vr
.h5, .t-format h1.vr,
.vr.h1, .t-format h2.vr,
.vr.h2, .t-format h3.vr,
.vr.h3, .t-format h4.vr,
.vr.h4, .t-format h5.vr,
.vr.h5, .t-format h1[class*="m-b"],
[class*="m-b"].h1, .t-format h2[class*="m-b"],
[class*="m-b"].h2, .t-format h3[class*="m-b"],
[class*="m-b"].h3, .t-format h4[class*="m-b"],
[class*="m-b"].h4, .t-format h5[class*="m-b"],
[class*="m-b"].h5 {
  line-height: 1;
}

.t-format h1 a,
.h1 a, .t-format h2 a,
.h2 a, .t-format h3 a,
.h3 a, .t-format h4 a,
.h4 a, .t-format h5 a,
.h5 a {
  color: inherit;
}

.t-format h1 .btn,
.h1 .btn, .t-format h2 .btn,
.h2 .btn, .t-format h3 .btn,
.h3 .btn, .t-format h4 .btn,
.h4 .btn, .t-format h5 .btn,
.h5 .btn {
  color: white;
}

.t-format h1,
.h1, .t-format h2,
.h2, .t-format h3,
.h3, .t-format h4,
.h4, .t-format h5,
.h5 {
  font-family: "Helvetica Neue";
}

.t-format h1,
.h1 {
  font-size: 36px;
}

.t-format h1.vr:not(.no-vr),
.vr .t-format h1:not(.no-vr),
.h1.vr:not(.no-vr),
.vr
.h1:not(.no-vr) {
  margin-bottom: 20px;
}

.t-format h2,
.h2 {
  font-size: 30px;
}

.t-format h2.vr:not(.no-vr),
.vr .t-format h2:not(.no-vr),
.h2.vr:not(.no-vr),
.vr
.h2:not(.no-vr) {
  margin-bottom: 20px;
}

.t-format h3,
.h3 {
  font-size: 24px;
}

.t-format h3.vr:not(.no-vr),
.vr .t-format h3:not(.no-vr),
.h3.vr:not(.no-vr),
.vr
.h3:not(.no-vr) {
  margin-bottom: 20px;
}

.t-format h4,
.h4 {
  font-size: 18px;
}

.t-format h4.vr:not(.no-vr),
.vr .t-format h4:not(.no-vr),
.h4.vr:not(.no-vr),
.vr
.h4:not(.no-vr) {
  margin-bottom: 20px;
}

.t-format h4 .h__circle,
.h4 .h__circle {
  font-size: 0.90em;
}

.t-format h5,
.h5 {
  font-size: 14px;
}

.t-format h5.vr:not(.no-vr),
.vr .t-format h5:not(.no-vr),
.h5.vr:not(.no-vr),
.vr
.h5:not(.no-vr) {
  margin-bottom: 20px;
}

.t-format p,
p.p {
  line-height: 1.7;
  padding: 0;
}

.t-format p.vr:not(.no-vr),
.vr .t-format p:not(.no-vr),
p.p.vr:not(.no-vr),
.vr
p.p:not(.no-vr) {
  margin-bottom: 20px;
}

.t-format p.p--lead,
p.p.p--lead {
  font-size: 22px;
}

@media screen and (max-width: 1023px) {
  .t-format h1,
  .h1 {
    font-size: 34px;
  }
  .t-format h1.vr:not(.no-vr),
  .vr .t-format h1:not(.no-vr),
  .h1.vr:not(.no-vr),
  .vr
  .h1:not(.no-vr) {
    font-size: 2.42857143rem;
    line-height: 3rem;
    padding-top: 0.54999rem;
    padding-bottom: 0rem;
    margin-bottom: 0.54999rem;
  }
  .t-format h2,
  .h2 {
    font-size: 28px;
  }
  .t-format h2.vr:not(.no-vr),
  .vr .t-format h2:not(.no-vr),
  .h2.vr:not(.no-vr),
  .vr
  .h2:not(.no-vr) {
    font-size: 2rem;
    line-height: 2rem;
    padding-top: 0.09999rem;
    padding-bottom: 0rem;
    margin-bottom: 1.09999rem;
  }
  .t-format h3,
  .h3 {
    font-size: 25px;
  }
  .t-format h3.vr:not(.no-vr),
  .vr .t-format h3:not(.no-vr),
  .h3.vr:not(.no-vr),
  .vr
  .h3:not(.no-vr) {
    font-size: 1.78571429rem;
    line-height: 2rem;
    padding-top: 0.12499rem;
    padding-bottom: 0rem;
    margin-bottom: 1.12499rem;
  }
  .t-format h4,
  .h4 {
    font-size: 20px;
  }
  .t-format h4.vr:not(.no-vr),
  .vr .t-format h4:not(.no-vr),
  .h4.vr:not(.no-vr),
  .vr
  .h4:not(.no-vr) {
    font-size: 1.42857143rem;
    line-height: 2rem;
    padding-top: 0.49999rem;
    padding-bottom: 0rem;
    margin-bottom: 1.49999rem;
  }
  .t-format h,
  .h5 {
    font-size: 17px;
  }
  .t-format h.vr:not(.no-vr),
  .vr .t-format h:not(.no-vr),
  .h5.vr:not(.no-vr),
  .vr
  .h5:not(.no-vr) {
    font-size: 1.21428571rem;
    line-height: 2rem;
    padding-top: 0.52499rem;
    padding-bottom: 0rem;
    margin-bottom: 0.52499rem;
  }
}

a {
  text-decoration: none;
  color: inherit;
  -webkit-font-smoothing: subpixel-antialiased;
}

.link, .t-format h1 a.link,
.h1 a.link, .t-format h2 a.link,
.h2 a.link, .t-format h3 a.link,
.h3 a.link, .t-format h4 a.link,
.h4 a.link, .t-format h5 a.link,
.h5 a.link,
.t-format a {
  color: #f2bc2b;
  word-wrap: break-word;
}

.link:hover, .link:active, .link:focus,
.t-format a:hover,
.t-format a:active,
.t-format a:focus {
  text-decoration: underline;
}

.link-hover {
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.link-hover:hover {
  color: #f2bc2b;
}

.t-format strong, .t-format b, .t-format .bold {
  font-weight: bold;
}

@font-face {
  font-family: "icons";
  src: url("../fonts/icons.eot");
  src: url("../fonts/icons.eot?#iefix") format("eot"), url("../fonts/icons.woff2") format("woff2"), url("../fonts/icons.woff") format("woff"), url("../fonts/icons.ttf") format("truetype"), url("../fonts/icons.svg#icons") format("svg");
}

.icon:before, .list--sidemenu .list__item.list__item--toggle:before,
[class^="icon-"]:before {
  font-family: "icons";
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  /* speak: none; only necessary if not using the private unicode range (firstGlyph option) */
  text-decoration: none;
  text-transform: none;
}

.icon-bubbles:before {
  content: "\E001" !important;
}

.icon-download:before {
  content: "\E002" !important;
}

.icon-email:before {
  content: "\E003" !important;
}

.icon-facebook:before {
  content: "\E004" !important;
}

.icon-github-circle:before {
  content: "\E005" !important;
}

.icon-github:before {
  content: "\E006" !important;
}

.icon-home:before {
  content: "\E007" !important;
}

.icon-list:before {
  content: "\E008" !important;
}

.icon-loading:before {
  content: "\E009" !important;
}

.icon-menu:before {
  content: "\E00A" !important;
}

.icon-minus:before, .list--sidemenu .list__item.list__item--toggle.active:before {
  content: "\E00B" !important;
}

.icon-news:before {
  content: "\E00C" !important;
}

.icon-plus:before, .list--sidemenu .list__item.list__item--toggle:before {
  content: "\E00D" !important;
}

.icon-share:before {
  content: "\E00E" !important;
}

.icon-skype:before {
  content: "\E00F" !important;
}

.icon-team:before {
  content: "\E010" !important;
}

.icon-twitter-bird:before {
  content: "\E011" !important;
}

.icon-twitter:before {
  content: "\E012" !important;
}

/**
 * Icons helpers
 */
[class^="icon-"]:before,
[class*=" icon-"]:before {
  vertical-align: top;
}

/**
 * Images generic styling
 */
@keyframes image-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes image-in-cover {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(-50%) scale(1, 1);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(-50%) scale(1.05, 1.05);
  }
}

img {
  line-height: 1;
  min-width: 100%;
  height: auto;
  border: none;
}

img[src]:not([src$="svg"]) {
  animation: image-in 0.3s 0s ease-in-out 1 normal forwards;
}

img.abs-cover[src]:not([src$="svg"]) {
  animation: image-in-cover 0.3s 0s ease-in-out 1 normal forwards;
}

img[src$="svg"] {
  min-width: auto;
}

img:not([src]) {
  opacity: 0.001;
}

figure {
  background-color: lightblue;
}

*::selection {
  background-color: rgba(242, 188, 43, 0.2);
}

html {
  height: 100%;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-size-adjust: 100%;
  -webkit-overflow-scrolling: touch;
}

body {
  font-family: "Helvetica Neue";
  height: 100%;
  color: gray;
  line-height: 1.4;
  letter-spacing: 0.02rem;
}

* {
  -webkit-overflow-scrolling: touch;
}

/* OBJECTS
---------------------------------------*/
/**
 * These are design-free objects, abstractions and design patterns. These create
 * constructs that you lay your designs over.
 */
/* OBJECTS
---------------------------------------*/
/**
 * Arrow
 */
.arrow--right {
  position: relative;
  background: white;
  border-style: solid;
  border-width: 0;
}

.arrow--right:after, .arrow--right:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

.arrow--right:after {
  border-width: 1em;
  border-left-color: white;
  right: -2em;
  top: 0em;
}

.arrow--right:before {
  border-width: 1em;
  right: -2em;
  top: 0em;
}

.arrow--left {
  position: relative;
  background: white;
  border-style: solid;
  border-width: 0;
}

.arrow--left:after, .arrow--left:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

.arrow--left:after {
  border-width: 1em;
  border-right-color: white;
  left: -2em;
  top: 0em;
}

.arrow--left:before {
  border-width: 1em;
  left: -2em;
  top: 0em;
}

.arrow--up {
  position: relative;
  background: white;
  border-style: solid;
  border-width: 0;
}

.arrow--up:after, .arrow--up:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

.arrow--up:after {
  border-width: 1em;
  border-bottom-color: white;
  top: -2em;
}

.arrow--up:before {
  border-width: 1em;
  top: -2em;
}

.arrow--bottom {
  position: relative;
  background: white;
  border-style: solid;
  border-width: 0;
}

.arrow--bottom:after, .arrow--bottom:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

.arrow--bottom:after {
  border-width: 1em;
  border-top-color: white;
  bottom: -2em;
}

.arrow--bottom:before {
  border-width: 1em;
  bottom: -2em;
}

/**
 * Button base styling
 */
.btn {
  border-radius: 0em;
  padding: 1.21428571em 1.57142857em;
  height: 3.42857143em;
  text-align: left;
}

.btn--block {
  border-radius: 0em;
  padding: 1.21428571em 1.57142857em;
  height: 3.42857143em;
  text-align: left;
  display: block;
  width: 100%;
}

.btn {
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.btn--primary {
  background-color: #f2bc2b;
  border: 1px solid #f2bc2b;
  color: white;
}

.btn--primary[active]:not(:disabled), .btn--primary.active:not(:disabled), .btn--primary:active:not(:disabled), .btn--primary:hover:not(:disabled) {
  background-color: #c4920c;
  border-color: #c4920c;
}

.btn--primary.btn--outline {
  color: #f2bc2b;
  background-color: transparent;
  border: 1px solid #f2bc2b;
}

.btn--primary.btn--outline:active:not(:disabled), .btn--primary.btn--outline:hover:not(:disabled), .btn--primary.btn--outline.active:not(:disabled),
:checked + .btn--primary.btn--outline:not(:disabled) {
  background-color: #f2bc2b;
  border-color: #f2bc2b;
  color: white;
}

.btn--primary.btn--link {
  background-color: transparent !important;
  color: #f2bc2b !important;
  border: none !important;
  position: relative;
}

.btn--primary.btn--link:after {
  content: '';
  position: absolute;
  display: block;
  bottom: 0.60714286em;
  left: 50%;
  height: .2em;
  width: 0;
  transform: translateX(-50%) translateY(0) translateZ(0);
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  background: #f2bc2b;
}

.btn--primary.btn--link[active]:not(:disabled):after, .btn--primary.btn--link.active:not(:disabled):after, .btn--primary.btn--link:active:not(:disabled):after, .btn--primary.btn--link:hover:not(:disabled):after {
  width: calc(100% - 3.14285714em);
}

.btn--primary.btn[disabled], .btn--primary.btn--disabled {
  background-color: #f2bc2b;
  border: 1px solid #f2bc2b;
  color: white;
  opacity: 0.25;
  cursor: not-allowed !important;
  pointer-events: none;
}

.btn--primary.btn[disabled][active]:not(:disabled), .btn--primary.btn[disabled].active:not(:disabled), .btn--primary.btn[disabled]:active:not(:disabled), .btn--primary.btn[disabled]:hover:not(:disabled), .btn--primary.btn--disabled[active]:not(:disabled), .btn--primary.btn--disabled.active:not(:disabled), .btn--primary.btn--disabled:active:not(:disabled), .btn--primary.btn--disabled:hover:not(:disabled) {
  background-color: #c4920c;
  border-color: #c4920c;
}

.btn--secondary {
  background-color: #777;
  border: 1px solid #777;
  color: white;
}

.btn--secondary[active]:not(:disabled), .btn--secondary.active:not(:disabled), .btn--secondary:active:not(:disabled), .btn--secondary:hover:not(:disabled) {
  background-color: #515151;
  border-color: #515151;
}

.btn--secondary.btn--outline {
  color: #777;
  background-color: transparent;
  border: 1px solid #777;
}

.btn--secondary.btn--outline:active:not(:disabled), .btn--secondary.btn--outline:hover:not(:disabled), .btn--secondary.btn--outline.active:not(:disabled),
:checked + .btn--secondary.btn--outline:not(:disabled) {
  background-color: #777;
  border-color: #777;
  color: white;
}

.btn--secondary.btn--link {
  background-color: transparent !important;
  color: #777 !important;
  border: none !important;
  position: relative;
}

.btn--secondary.btn--link:after {
  content: '';
  position: absolute;
  display: block;
  bottom: 0.60714286em;
  left: 50%;
  height: .2em;
  width: 0;
  transform: translateX(-50%) translateY(0) translateZ(0);
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  background: #777;
}

.btn--secondary.btn--link[active]:not(:disabled):after, .btn--secondary.btn--link.active:not(:disabled):after, .btn--secondary.btn--link:active:not(:disabled):after, .btn--secondary.btn--link:hover:not(:disabled):after {
  width: calc(100% - 3.14285714em);
}

.btn--secondary.btn[disabled], .btn--secondary.btn--disabled {
  background-color: #777;
  border: 1px solid #777;
  color: white;
  opacity: 0.25;
  cursor: not-allowed !important;
  pointer-events: none;
}

.btn--secondary.btn[disabled][active]:not(:disabled), .btn--secondary.btn[disabled].active:not(:disabled), .btn--secondary.btn[disabled]:active:not(:disabled), .btn--secondary.btn[disabled]:hover:not(:disabled), .btn--secondary.btn--disabled[active]:not(:disabled), .btn--secondary.btn--disabled.active:not(:disabled), .btn--secondary.btn--disabled:active:not(:disabled), .btn--secondary.btn--disabled:hover:not(:disabled) {
  background-color: #515151;
  border-color: #515151;
}

/**
 * Adjust icon font-size
 */
.btn {
  border-radius: 3.42857143em;
  overflow: hidden;
  text-shadow: rgba(0, 0, 0, 0.3) 1px 1px 2px;
}

.btn i {
  font-size: 1.3em;
}

/**
 * Loading button
 */
.btn--loading i {
  color: transparent;
  background-image: url("../img/loader--white-on-red.gif");
  background-repeat: no-repeat;
  background-position: 50% 50%;
  background-size: 100% auto;
}

s-corner-badge {
  position: absolute;
  display: block;
}

s-corner-badge > * {
  position: relative;
}

s-corner-badge:before {
  content: '';
  display: block;
  position: absolute;
  border-style: solid;
  border-color: transparent;
}

s-corner-badge {
  font-size: 1em;
  width: 4.14285714em;
  height: 4.14285714em;
  padding: 0.62857143em;
}

s-corner-badge:before {
  border-width: 2.07142857em;
}

s-corner-badge[align="tl"] {
  top: 0;
  left: 0;
}

s-corner-badge[align="tl"]:before {
  border-right-color: transparent !important;
  border-bottom-color: transparent !important;
  border-left-color: transparent !important;
  top: 0;
  left: 0;
}

s-corner-badge[align="tr"] {
  top: 0;
  right: 0;
  text-align: right;
}

s-corner-badge[align="tr"]:before {
  border-bottom-color: transparent !important;
  border-left-color: transparent !important;
  top: 0;
  right: 0;
}

s-corner-badge[align="bl"] {
  bottom: 0;
  left: 0;
}

s-corner-badge[align="bl"]:before {
  border-top-color: transparent !important;
  border-right-color: transparent !important;
  border-bottom-color: transparent !important;
  bottom: 0;
  left: 0;
}

s-corner-badge[align="br"] {
  bottom: 0;
  right: 0;
}

s-corner-badge[align="br"]:before {
  border-top-color: transparent !important;
  border-right-color: transparent !important;
  border-left-color: transparent !important;
  bottom: 0;
  right: 0;
}

s-corner-badge[color="primary"] {
  color: white;
}

s-corner-badge[color="primary"]:before {
  border-color: #f2bc2b;
}

s-corner-badge[color="secondary"] {
  color: white;
}

s-corner-badge[color="secondary"]:before {
  border-color: #777;
}

.s-corner-badge {
  text-shadow: rgba(0, 0, 0, 0.2) 0 0 5px;
}

/**
 * Dropdown
 */
.dropdown__menu {
  visibility: hidden;
  opacity: 0;
  position: absolute;
  top: 100%;
  pointer-events: none;
}

.dropdown:hover .dropdown__menu, .dropdown.active .dropdown__menu, .dropdown.dropdown--active .dropdown__menu {
  visibility: visible;
  opacity: 1;
  pointer-events: all;
}

.dropdown {
  position: relative;
}

.dropdown:hover, .dropdown.active, .dropdown.dropdown--active {
  z-index: 1;
}

.dropdown:hover .dropdown__menu, .dropdown.active .dropdown__menu, .dropdown.dropdown--active .dropdown__menu {
  top: 100%;
}

.dropdown.dropdown--right .dropdown__menu {
  left: auto;
  right: 0;
}

.dropdown.dropdown--up .dropdown__menu {
  top: auto;
  bottom: 100%;
}

.dropdown.dropdown--up:hover .dropdown__menu, .dropdown.dropdown--up.active .dropdown__menu, .dropdown.dropdown--up.dropdown--active .dropdown__menu {
  top: auto;
  bottom: 100%;
}

.dropdown__menu {
  transition: all, 0.2s, ease-in-out, 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.dropdown__item {
  white-space: nowrap;
}

.dropdown__item > a {
  padding: 1.21428571em 1.57142857em;
  display: block;
}

.dropdown__menu {
  background: #f8f8f9;
  box-shadow: rgba(0, 0, 0, 0.2) 0 4px 6px;
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  overflow: hidden;
}

.dropdown__item {
  border-top: solid 1px rgba(248, 248, 249, 0.2);
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  background-color: white;
  left: 0;
  position: relative;
  color: #333;
  transition: left 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.dropdown__item:hover, .dropdown__item.active, .dropdown__item.dropdown--active {
  left: 5px;
}

.dropdown__item > a {
  color: #333;
  display: block;
  width: 100%;
}

.dropdown .dropdown__menu {
  background-color: #f8f8f9;
}

.dropdown--primary .dropdown__menu {
  background-color: #f2bc2b;
}

/**
 * Input
 */
.input, .s-select.input {
  display: inline-block;
  font-family: "Helvetica Neue";
  -webkit-appearance: none;
  -moz-appearance: none;
  border: none;
  outline: none;
  width: 100%;
  font-size: 1em;
}

.input:not(.input-addon):not(textarea) {
  line-height: 1 !important;
}

.input, .s-select {
  border-width: 1px;
  border-bottom-width: 3px;
  border-style: solid;
  color: #333;
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.input::-webkit-input-placeholder, .s-select::-webkit-input-placeholder {
  color: rgba(51, 51, 51, 0.4);
}

.input:-moz-placeholder, .s-select:-moz-placeholder {
  color: rgba(51, 51, 51, 0.4);
}

.input::-moz-placeholder, .s-select::-moz-placeholder {
  color: rgba(51, 51, 51, 0.4);
}

.input:-ms-input-placeholder, .s-select:-ms-input-placeholder {
  color: rgba(51, 51, 51, 0.4);
}

.input--placeholder {
  color: rgba(51, 51, 51, 0.4);
}

[data-input-activator]:focus ~ .input, [data-input-activator]:focus ~ .s-select, .input:focus, .s-select:focus {
  border-left-width: 5px;
}

.input:disabled, .s-select:disabled {
  opacity: 0.25;
  cursor: not-allowed;
}

.input {
  border-radius: 0em;
  padding: 0 1.57142857em;
  height: 3.42857143em;
}

.input:not(input) {
  padding: 1.21428571em 1.57142857em;
}

.input.vr:not(.no-vr),
.vr .input:not(.no-vr), .input ~  span.vr:not(.no-vr),
.vr .input ~  span:not(.no-vr) {
  margin-bottom: 1rem;
}

textarea.input {
  height: auto !important;
  line-height: 1.5;
  padding: 1.21428571em 1.57142857em;
  display: inline-block;
}

textarea.input.vr:not(.no-vr),
.vr textarea.input:not(.no-vr) {
  margin-bottom: 1rem;
}

.input {
  background-color: white !important;
}

.input {
  border-color: rgba(248, 248, 249, 0.1);
  border-bottom-color: rgba(248, 248, 249, 0.3);
}

[data-input-activator]:focus ~ .input,
[data-input-activator]:checked ~ .input, .input:hover:not(:disabled), .input:focus:not(:disabled), .input.active:not(:disabled) {
  border-bottom-color: rgba(248, 248, 249, 0.6);
}

[data-input-activator]:focus ~ .input,
[data-input-activator]:checked ~ .input, .input:focus:not(:disabled), .input.active:not(:disabled) {
  border-left-color: rgba(248, 248, 249, 0.6);
}

select.input {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="32" height="24" viewBox="0 0 32 24"><polygon points="0,0 32,0 16,24" style="fill%3A%23f8f8f9"></polygon></svg>');
}

.input--primary {
  border-color: rgba(242, 188, 43, 0.1);
  border-bottom-color: rgba(242, 188, 43, 0.3);
}

[data-input-activator]:focus ~ .input--primary,
[data-input-activator]:checked ~ .input--primary, .input--primary:hover:not(:disabled), .input--primary:focus:not(:disabled), .input--primary.active:not(:disabled) {
  border-bottom-color: rgba(242, 188, 43, 0.6);
}

[data-input-activator]:focus ~ .input--primary,
[data-input-activator]:checked ~ .input--primary, .input--primary:focus:not(:disabled), .input--primary.active:not(:disabled) {
  border-left-color: rgba(242, 188, 43, 0.6);
}

select.input--primary {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="32" height="24" viewBox="0 0 32 24"><polygon points="0,0 32,0 16,24" style="fill%3A%23f2bc2b"></polygon></svg>');
}

.input--secondary {
  border-color: rgba(119, 119, 119, 0.1);
  border-bottom-color: rgba(119, 119, 119, 0.3);
}

[data-input-activator]:focus ~ .input--secondary,
[data-input-activator]:checked ~ .input--secondary, .input--secondary:hover:not(:disabled), .input--secondary:focus:not(:disabled), .input--secondary.active:not(:disabled) {
  border-bottom-color: rgba(119, 119, 119, 0.6);
}

[data-input-activator]:focus ~ .input--secondary,
[data-input-activator]:checked ~ .input--secondary, .input--secondary:focus:not(:disabled), .input--secondary.active:not(:disabled) {
  border-left-color: rgba(119, 119, 119, 0.6);
}

select.input--secondary {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="32" height="24" viewBox="0 0 32 24"><polygon points="0,0 32,0 16,24" style="fill%3A%23777"></polygon></svg>');
}

/**
 * Input error styling
 */
.input-error {
  margin-top: 0.85714286rem;
  color: #f2bc2b;
  transition: all 0.1s ease-in-out 0.1s, outline-color 0.000001s linear 0s;
  outline-color: black;
  opacity: 0;
  position: absolute;
  margin-left: 1.42857143rem;
}

.input-error--in {
  opacity: 1;
  margin-left: 0;
}

/**
 * Generic list
 */
.list .list__item {
  line-height: 1.7;
  color: #737373;
}

/**
 * Unordered list
 */
ul.list {
  counter-reset: s-list;
}

ul.list.vr:not(.no-vr) .list__item,
.vr ul.list:not(.no-vr) .list__item {
  margin-bottom: 1.14285714rem;
}

/**
 * Ordered list
 */
ol.list {
  counter-reset: s-list;
}

ol.list .list__item {
  padding-left: 20px;
  position: relative;
}

ol.list .list__item:before {
  content: counter(s-list, decimal);
  counter-increment: s-list;
}

ol.list .list__item:before {
  left: 0;
  color: #f8f8f9 !important;
}

ol.list .list__item:before {
  position: absolute;
  display: block;
}

ol.list .list__item > ul,
ol.list .list__item > ol,
ol.list .list__item > dl {
  margin-left: 0;
  margin-bottom: 0;
}

ol.list .list__item.vr:not(.no-vr),
.vr ol.list .list__item:not(.no-vr) {
  margin-bottom: 1.14285714rem;
}

/**
 * List sidemenu
 */
.list--sidemenu {
  padding-left: 0.71428571rem;
}

.list--sidemenu a.active {
  color: #f2bc2b;
}

.list--sidemenu .list__item {
  padding-left: 0.71428571rem;
}

.list--sidemenu .list__item.list__item--toggle {
  font-weight: bold;
  font-size: 1.28571429rem;
  cursor: pointer;
  position: relative;
}

.list--sidemenu .list__item.list__item--toggle:before {
  position: absolute;
  right: 0;
  font-size: .5em;
  color: rgba(51, 51, 51, 0.3);
  top: .5em;
}

.list--sidemenu .list__item.list__item--toggle + .list {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.4s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.list--sidemenu .list__item.list__item--toggle:hover:before {
  color: #f2bc2b;
}

.list--sidemenu .list__item.list__item--toggle.active:before {
  color: #f2bc2b;
}

.list--sidemenu .list__item.list__item--toggle.active + .list {
  max-height: 10000px;
}

/**
 * Need help styling
 */
.need-help-cta {
  font-family: open-sans-light;
  font-size: 2rem;
}

.need-help {
  position: fixed;
  right: 0;
  top: 20vh;
  display: block;
  width: 21.42857143rem;
  z-index: 10;
  background-color: #f2bc2b;
  padding: 1.42857143rem;
  transform: translateX(150%) translateY(0) translateZ(0);
  transition: all 0.4s ease-in-out 0.1s, outline-color 0.000001s linear 0s;
  outline-color: black;
  background-image: url("/assets/img/alpadia-logo--grey-transparent.svg");
  background-repeat: no-repeat;
  background-size: 300px auto;
  background-position: 50% 50%;
}

@media screen and (max-width: 620px) {
  .need-help {
    display: none;
  }
}

.need-help--sticked .need-help {
  transform: translateX(100%) translateY(0) translateZ(0);
}

.need-help--opened .need-help, .need-help:hover {
  transform: translateX(0) translateY(0) translateZ(0);
  box-shadow: rgba(0, 0, 0, 0.2) 0 10px 15px;
}

.need-help--opened .need-help .need-help__cta, .need-help:hover .need-help__cta {
  background-color: #f2bc2b;
}

.need-help__cta {
  background-color: #f2bc2b;
  position: absolute;
  top: 0;
  left: 0;
  transform: translateX(-100%) translateY(0) translateZ(0);
  padding: 0.85714286rem 1.42857143rem;
  font-size: 1rem;
}

.need-help__cta .icon-cross {
  display: none;
  cursor: pointer;
}

.need-help--opened .need-help__cta .icon-cross {
  display: block;
}

.need-help--opened .need-help__cta .icon-help {
  display: none;
}

/**
 * prism.js default theme for JavaScript, CSS and HTML
 * Based on dabblet (http://dabblet.com)
 * @author Lea Verou
 */
code[class*="language-"],
pre[class*="language-"] {
  color: black;
  background: none;
  text-shadow: 0 1px white;
  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.5;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

pre[class*="language-"]::-moz-selection, pre[class*="language-"] ::-moz-selection,
code[class*="language-"]::-moz-selection, code[class*="language-"] ::-moz-selection {
  text-shadow: none;
  background: #b3d4fc;
}

pre[class*="language-"]::selection, pre[class*="language-"] ::selection,
code[class*="language-"]::selection, code[class*="language-"] ::selection {
  text-shadow: none;
  background: #b3d4fc;
}

@media print {
  code[class*="language-"],
  pre[class*="language-"] {
    text-shadow: none;
  }
}

/* Code blocks */
pre[class*="language-"] {
  padding: 2em;
  margin: .5em 0;
  overflow: auto;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
  background: #f8f8f9;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: slategray;
}

.token.punctuation {
  color: #999;
}

.namespace {
  opacity: .7;
}

.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
  color: #905;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #690;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: #a67f59;
  background: rgba(255, 255, 255, 0.5);
}

.token.atrule,
.token.attr-value,
.token.keyword {
  color: #07a;
}

.token.function {
  color: #DD4A68;
}

.token.regex,
.token.important,
.token.variable {
  color: #e90;
}

.token.important,
.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}

.token.entity {
  cursor: help;
}

.read-more--active {
  max-height: 2000px !important;
  height: auto !important;
}

.read-more {
  transition: max-height 0.4s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  position: relative;
  overflow: hidden;
}

.read-more a {
  pointer-events: all;
}

.read-more:before {
  opacity: 1;
  background: linear-gradient(to bottom, #fff, transparent 3rem);
  transition: all 0.3s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  position: absolute;
  bottom: 0;
  left: 0;
  top: 0;
  right: 0;
  height: 100%;
  content: '';
  z-index: 1;
  transform: rotate(180deg);
}

.read-more[data-more] {
  pointer-events: none;
  padding-bottom: 30px;
}

.read-more[data-more]:after {
  pointer-events: all;
}

.read-more[data-more]:before {
  background: linear-gradient(to bottom, #fff 20px, transparent);
}

.read-more[data-more]:after {
  content: attr(data-more);
  color: #f2bc2b;
  cursor: pointer;
  position: absolute;
  z-index: 1;
  bottom: 0;
  left: 0;
  border-bottom: 0 solid #f2bc2b;
  pointer-events: all;
}

.read-more[data-more]:after:hover {
  text-decoration: underline;
  border-bottom-width: 3px;
}

.read-more--active .read-more, .read-more.read-more--active {
  max-height: 2000px !important;
}

.read-more--active .read-more:before, .read-more.read-more--active:before {
  opacity: 0;
  pointer-events: none;
}

.read-more--active .read-more[data-less]:after, .read-more.read-more--active[data-less]:after {
  content: attr(data-less);
}

.read-more--active .read-more[s-readmore]:not(.read-more--active),
.read-more--active [s-readmore]:not(.read-more--active) .read-more,
.read-more--active [s-activate-target]:not(.read-more--active) .read-more {
  max-height: 50px;
}

.read-more--active .read-more[s-readmore]:not(.read-more--active).read-more--offers,
.read-more--active [s-readmore]:not(.read-more--active) .read-more.read-more--offers,
.read-more--active [s-activate-target]:not(.read-more--active) .read-more.read-more--offers {
  max-height: 500px;
}

.read-more--active .read-more[s-readmore]:not(.read-more--active):before,
.read-more--active [s-readmore]:not(.read-more--active) .read-more:before,
.read-more--active [s-activate-target]:not(.read-more--active) .read-more:before {
  opacity: 1;
  pointer-events: all;
}

.read-more--active .read-more[s-readmore]:not(.read-more--active)[data-less]:after,
.read-more--active [s-readmore]:not(.read-more--active) .read-more[data-less]:after,
.read-more--active [s-activate-target]:not(.read-more--active) .read-more[data-less]:after {
  content: attr(data-more);
}

/**
 * Ripples
 */
@keyframes ripple {
  0% {
    opacity: 1;
    transform: translateX(-50%) translateY(-50%) scale(0, 0);
  }
  100% {
    opacity: 0;
    transform: translateX(-50%) translateY(-50%) scale(1, 1);
  }
}

.s-ripple__container {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.s-ripple__particle {
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%) translateZ(0);
  position: relative;
  overflow: hidden;
  position: absolute;
  width: 150%;
  border-radius: 50%;
}

.s-ripple__particle:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 100%;
}

.s-ripple__particle {
  background: transparent;
  border: 7px solid #777;
  width: 50px;
  height: 50px;
  animation: ripple 0.2s 0s cubic-bezier(0.005, 0.575, 0.565, 1) 1 normal forwards;
  z-index: 99999;
}

tooltip {
  position: absolute !important;
  pointer-events: none;
  border-radius: 0em;
  padding: 1.21428571em 1.57142857em;
  opacity: 0;
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

:hover > tooltip,
.active > tooltip {
  opacity: 1;
}

tooltip {
  box-shadow: rgba(0, 0, 0, 0.2) 0 10px 15px;
}

@keyframes s-tooltip-component {
  0% {
    transform: scale(0.9, 0.9);
  }
  100% {
    transform: scale(1, 1);
  }
}

@keyframes s-tooltip-component--c {
  0% {
    transform: scale(0.9, 0.9) translateX(-50%) translateY(-50%);
  }
  100% {
    transform: scale(1, 1) translateX(-50%) translateY(-50%);
  }
}

@keyframes s-tooltip-component--b {
  0% {
    transform: scale(0.9, 0.9) translateX(-50%);
  }
  100% {
    transform: scale(1, 1) translateX(-50%);
  }
}

tooltip {
  background-color: #f8f8f9;
  color: #a6a6b2;
}

tooltip[align="c"] {
  left: 50%;
  top: 50%;
  transform-origin: 0 0;
  transform: translateX(-50%) translateY(-50%) translateZ(0);
}

[active] > tooltip[align="c"],
.active > tooltip[align="c"],
:hover > tooltip[align="c"] {
  animation: s-tooltip-component--c 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[align="tr"] {
  transform-origin: 100% 100%;
  right: 0;
  bottom: calc(100% + 1em);
  position: relative;
  background: #f8f8f9;
  border-style: solid;
  border-width: 0;
}

tooltip[align="tr"]:after, tooltip[align="tr"]:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

tooltip[align="tr"]:after {
  border-width: 0.5em;
  border-top-color: #f8f8f9;
  bottom: -1em;
  right: 0.5em;
}

tooltip[align="tr"]:before {
  border-width: 0.5em;
  bottom: -1em;
  right: 0.5em;
}

[active] > tooltip[align="tr"],
.active > tooltip[align="tr"],
:hover > tooltip[align="tr"] {
  animation: s-tooltip-component 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[align="b"] {
  transform-origin: 0 -1em;
  left: 50%;
  top: calc(100% + 1em);
  transform: translateX(-50%) translateY(0) translateZ(0);
  position: relative;
  background: #f8f8f9;
  border-style: solid;
  border-width: 0;
}

tooltip[align="b"]:after, tooltip[align="b"]:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

tooltip[align="b"]:after {
  border-width: 0.5em;
  border-bottom-color: #f8f8f9;
  top: -1em;
  right: 50%;
  margin-right: -0.5em;
}

tooltip[align="b"]:before {
  border-width: 0.5em;
  top: -1em;
  right: 50%;
  margin-right: -0.5em;
}

[active] > tooltip[align="b"],
.active > tooltip[align="b"],
:hover > tooltip[align="b"] {
  animation: s-tooltip-component--b 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[align="br"] {
  transform-origin: calc(100% - 1em) -1em;
  right: 0;
  top: calc(100% + 1em);
  position: relative;
  background: #f8f8f9;
  border-style: solid;
  border-width: 0;
}

tooltip[align="br"]:after, tooltip[align="br"]:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

tooltip[align="br"]:after {
  border-width: 0.5em;
  border-bottom-color: #f8f8f9;
  top: -1em;
  right: 0.5em;
}

tooltip[align="br"]:before {
  border-width: 0.5em;
  top: -1em;
  right: 0.5em;
}

[active] > tooltip[align="br"],
.active > tooltip[align="br"],
:hover > tooltip[align="br"] {
  animation: s-tooltip-component 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[color="primary"] {
  background-color: #f2bc2b;
  color: white;
}

tooltip[color="primary"][align="c"] {
  left: 50%;
  top: 50%;
  transform-origin: 0 0;
  transform: translateX(-50%) translateY(-50%) translateZ(0);
}

[active] > tooltip[color="primary"][align="c"],
.active > tooltip[color="primary"][align="c"],
:hover > tooltip[color="primary"][align="c"] {
  animation: s-tooltip-component--c 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[color="primary"][align="tr"] {
  transform-origin: 100% 100%;
  right: 0;
  bottom: calc(100% + 1em);
  position: relative;
  background: #f2bc2b;
  border-style: solid;
  border-width: 0;
}

tooltip[color="primary"][align="tr"]:after, tooltip[color="primary"][align="tr"]:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

tooltip[color="primary"][align="tr"]:after {
  border-width: 0.5em;
  border-top-color: #f2bc2b;
  bottom: -1em;
  right: 0.5em;
}

tooltip[color="primary"][align="tr"]:before {
  border-width: 0.5em;
  bottom: -1em;
  right: 0.5em;
}

[active] > tooltip[color="primary"][align="tr"],
.active > tooltip[color="primary"][align="tr"],
:hover > tooltip[color="primary"][align="tr"] {
  animation: s-tooltip-component 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[color="primary"][align="b"] {
  transform-origin: 0 -1em;
  left: 50%;
  top: calc(100% + 1em);
  transform: translateX(-50%) translateY(0) translateZ(0);
  position: relative;
  background: #f2bc2b;
  border-style: solid;
  border-width: 0;
}

tooltip[color="primary"][align="b"]:after, tooltip[color="primary"][align="b"]:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

tooltip[color="primary"][align="b"]:after {
  border-width: 0.5em;
  border-bottom-color: #f2bc2b;
  top: -1em;
  right: 50%;
  margin-right: -0.5em;
}

tooltip[color="primary"][align="b"]:before {
  border-width: 0.5em;
  top: -1em;
  right: 50%;
  margin-right: -0.5em;
}

[active] > tooltip[color="primary"][align="b"],
.active > tooltip[color="primary"][align="b"],
:hover > tooltip[color="primary"][align="b"] {
  animation: s-tooltip-component--b 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[color="primary"][align="br"] {
  transform-origin: calc(100% - 1em) -1em;
  right: 0;
  top: calc(100% + 1em);
  position: relative;
  background: #f2bc2b;
  border-style: solid;
  border-width: 0;
}

tooltip[color="primary"][align="br"]:after, tooltip[color="primary"][align="br"]:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

tooltip[color="primary"][align="br"]:after {
  border-width: 0.5em;
  border-bottom-color: #f2bc2b;
  top: -1em;
  right: 0.5em;
}

tooltip[color="primary"][align="br"]:before {
  border-width: 0.5em;
  top: -1em;
  right: 0.5em;
}

[active] > tooltip[color="primary"][align="br"],
.active > tooltip[color="primary"][align="br"],
:hover > tooltip[color="primary"][align="br"] {
  animation: s-tooltip-component 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[color="secondary"] {
  background-color: #777;
  color: white;
}

tooltip[color="secondary"][align="c"] {
  left: 50%;
  top: 50%;
  transform-origin: 0 0;
  transform: translateX(-50%) translateY(-50%) translateZ(0);
}

[active] > tooltip[color="secondary"][align="c"],
.active > tooltip[color="secondary"][align="c"],
:hover > tooltip[color="secondary"][align="c"] {
  animation: s-tooltip-component--c 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[color="secondary"][align="tr"] {
  transform-origin: 100% 100%;
  right: 0;
  bottom: calc(100% + 1em);
  position: relative;
  background: #777;
  border-style: solid;
  border-width: 0;
}

tooltip[color="secondary"][align="tr"]:after, tooltip[color="secondary"][align="tr"]:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

tooltip[color="secondary"][align="tr"]:after {
  border-width: 0.5em;
  border-top-color: #777;
  bottom: -1em;
  right: 0.5em;
}

tooltip[color="secondary"][align="tr"]:before {
  border-width: 0.5em;
  bottom: -1em;
  right: 0.5em;
}

[active] > tooltip[color="secondary"][align="tr"],
.active > tooltip[color="secondary"][align="tr"],
:hover > tooltip[color="secondary"][align="tr"] {
  animation: s-tooltip-component 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[color="secondary"][align="b"] {
  transform-origin: 0 -1em;
  left: 50%;
  top: calc(100% + 1em);
  transform: translateX(-50%) translateY(0) translateZ(0);
  position: relative;
  background: #777;
  border-style: solid;
  border-width: 0;
}

tooltip[color="secondary"][align="b"]:after, tooltip[color="secondary"][align="b"]:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

tooltip[color="secondary"][align="b"]:after {
  border-width: 0.5em;
  border-bottom-color: #777;
  top: -1em;
  right: 50%;
  margin-right: -0.5em;
}

tooltip[color="secondary"][align="b"]:before {
  border-width: 0.5em;
  top: -1em;
  right: 50%;
  margin-right: -0.5em;
}

[active] > tooltip[color="secondary"][align="b"],
.active > tooltip[color="secondary"][align="b"],
:hover > tooltip[color="secondary"][align="b"] {
  animation: s-tooltip-component--b 0.1s 0s ease-in-out 1 normal forwards;
}

tooltip[color="secondary"][align="br"] {
  transform-origin: calc(100% - 1em) -1em;
  right: 0;
  top: calc(100% + 1em);
  position: relative;
  background: #777;
  border-style: solid;
  border-width: 0;
}

tooltip[color="secondary"][align="br"]:after, tooltip[color="secondary"][align="br"]:before {
  border: solid transparent;
  content: " ";
  height: 0;
  width: 0;
  position: absolute;
  pointer-events: none;
  visibility: visible;
}

tooltip[color="secondary"][align="br"]:after {
  border-width: 0.5em;
  border-bottom-color: #777;
  top: -1em;
  right: 0.5em;
}

tooltip[color="secondary"][align="br"]:before {
  border-width: 0.5em;
  top: -1em;
  right: 0.5em;
}

[active] > tooltip[color="secondary"][align="br"],
.active > tooltip[color="secondary"][align="br"],
:hover > tooltip[color="secondary"][align="br"] {
  animation: s-tooltip-component 0.1s 0s ease-in-out 1 normal forwards;
}

/**
 * Tables
 */
.s-table--responsive {
  min-height: 0.01%;
  overflow-x: auto;
  width: 100%;
  overflow-y: hidden;
}

.s-table--center td, .s-table--center .td,
.s-table--center th, .s-table--center .th {
  text-align: center;
}

.s-table--middle td, .s-table--middle .td,
.s-table--middle th, .s-table--middle .th {
  vertical-align: middle;
}

.s-table, .markdown table {
  width: 100%;
}

.s-table .th, .markdown table .th, .s-table th, .markdown table th {
  text-align: left;
}

.s-table .th, .markdown table .th, .s-table th, .markdown table th,
.s-table .td, .markdown table .td, .s-table td, .markdown table td {
  padding: 1.21428571em 1.57142857em;
  position: relative;
}

.s-table .th:last-child, .markdown table .th:last-child, .s-table th:last-child, .markdown table th:last-child,
.s-table .td:last-child, .markdown table .td:last-child, .s-table td:last-child, .markdown table td:last-child {
  border-right: none;
}

.s-table .th:before, .markdown table .th:before, .s-table th:before, .markdown table th:before,
.s-table .td:before, .markdown table .td:before, .s-table td:before, .markdown table td:before {
  content: '';
  display: block;
  position: absolute;
  top: 50%;
  left: 0;
  transform: translateX(0) translateY(-50%) translateZ(0);
  width: 100%;
  height: 100%;
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  border-width: 0;
  border-color: transparent;
  border-style: solid;
  border-top-width: 0.07142857rem;
  border-bottom-width: 0.07142857rem;
  pointer-events: none;
}

.s-table .th:last-child:before, .markdown table .th:last-child:before, .s-table th:last-child:before, .markdown table th:last-child:before,
.s-table .td:last-child:before, .markdown table .td:last-child:before, .s-table td:last-child:before, .markdown table td:last-child:before {
  border-right-width: 1px;
}

.s-table .th:first-child:before, .markdown table .th:first-child:before, .s-table th:first-child:before, .markdown table th:first-child:before,
.s-table .td:first-child:before, .markdown table .td:first-child:before, .s-table td:first-child:before, .markdown table td:first-child:before {
  border-left-width: 1px;
}

.s-table .th, .markdown table .th, .s-table th, .markdown table th {
  font-weight: bold;
  position: relative;
}

.s-table .tr:last-child .td, .markdown table .tr:last-child .td,
.s-table tr:last-child td, .markdown table tr:last-child td,
.s-table .tr:last-child:not(:first-child) .th, .markdown table .tr:last-child:not(:first-child) .th,
.s-table tr:last-child:not(:first-child) th, .markdown table tr:last-child:not(:first-child) th {
  border-bottom: none !important;
}

.s-table .caption, .markdown table .caption,
.s-table caption, .markdown table caption {
  font-family: italic left;
}

.s-table .caption:before, .markdown table .caption:before,
.s-table caption:before, .markdown table caption:before {
  content: "\2014 \00A0";
}

.s-table .td.adapt, .markdown table .td.adapt,
.s-table td.adapt, .markdown table td.adapt,
.s-table .th.adapt, .markdown table .th.adapt,
.s-table th.adapt, .markdown table th.adapt {
  width: 1px;
  white-space: nowrap;
}

.s-table .td.grow, .markdown table .td.grow,
.s-table td.grow, .markdown table td.grow,
.s-table .th.grow, .markdown table .th.grow,
.s-table th.grow, .markdown table th.grow {
  width: 9999999px;
}

.s-table.s-table--shadowed, .markdown table.s-table--shadowed {
  transition: all, 0.2s, ease-in-out, 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.s-table.s-table--shadowed .s-table--hover, .markdown table.s-table--shadowed .s-table--hover, .s-table.s-table--shadowed .markdown table, .markdown .s-table.s-table--shadowed table, .markdown table.s-table--shadowed table, .s-table.s-table--shadowed:hover, .markdown table.s-table--shadowed:hover {
  box-shadow: #333 0 0 32px;
}

.s-table.s-table.s-table--striped > thead > .tr:nth-of-type(odd) > td, .markdown table > thead > .tr:nth-of-type(odd) > td,
.s-table.s-table.s-table--striped > thead > .tr:nth-of-type(odd) > th, .markdown table > thead > .tr:nth-of-type(odd) > th,
.s-table.s-table.s-table--striped > thead > tr:nth-of-type(odd) > td, .markdown table > thead > tr:nth-of-type(odd) > td,
.s-table.s-table.s-table--striped > thead > tr:nth-of-type(odd) > th, .markdown table > thead > tr:nth-of-type(odd) > th {
  background-color: #f8f8f9;
}

.s-table.s-table.s-table--striped > tbody > .tr:nth-of-type(even) > td, .markdown table > tbody > .tr:nth-of-type(even) > td,
.s-table.s-table.s-table--striped > tbody > .tr:nth-of-type(even) > th, .markdown table > tbody > .tr:nth-of-type(even) > th,
.s-table.s-table.s-table--striped > tbody > tr:nth-of-type(even) > td, .markdown table > tbody > tr:nth-of-type(even) > td,
.s-table.s-table.s-table--striped > tbody > tr:nth-of-type(even) > th, .markdown table > tbody > tr:nth-of-type(even) > th {
  background-color: rgba(248, 248, 249, 0.6);
}

.s-table.s-table.s-table--bordered, .markdown table.s-table--bordered {
  border: 1px solid #f8f8f9;
}

.s-table.s-table.s-table--bordered td, .markdown table.s-table--bordered td,
.s-table.s-table.s-table--bordered th, .markdown table.s-table--bordered th {
  border-right: 1px solid rgba(248, 248, 249, 0.8);
}

.s-table.s-table.s-table--hover > tbody > .tr:hover td, .markdown table > tbody > .tr:hover td, .s-table.s-table.s-table--hover > tbody > .tr:hover .td, .markdown table > tbody > .tr:hover .td,
.s-table.s-table.s-table--hover > tbody > .tr:hover th, .markdown table > tbody > .tr:hover th, .s-table.s-table.s-table--hover > tbody > .tr:hover .th, .markdown table > tbody > .tr:hover .th,
.s-table.s-table.s-table--hover > tbody > tr:hover td, .markdown table > tbody > tr:hover td,
.s-table.s-table.s-table--hover > tbody > tr:hover .td, .markdown table > tbody > tr:hover .td,
.s-table.s-table.s-table--hover > tbody > tr:hover th, .markdown table > tbody > tr:hover th,
.s-table.s-table.s-table--hover > tbody > tr:hover .th, .markdown table > tbody > tr:hover .th {
  background-color: #f8f8f9;
}

.s-table.s-table.s-table--hover > tbody > .tr:hover td:before, .markdown table > tbody > .tr:hover td:before, .s-table.s-table.s-table--hover > tbody > .tr:hover .td:before, .markdown table > tbody > .tr:hover .td:before,
.s-table.s-table.s-table--hover > tbody > .tr:hover th:before, .markdown table > tbody > .tr:hover th:before, .s-table.s-table.s-table--hover > tbody > .tr:hover .th:before, .markdown table > tbody > .tr:hover .th:before,
.s-table.s-table.s-table--hover > tbody > tr:hover td:before, .markdown table > tbody > tr:hover td:before,
.s-table.s-table.s-table--hover > tbody > tr:hover .td:before, .markdown table > tbody > tr:hover .td:before,
.s-table.s-table.s-table--hover > tbody > tr:hover th:before, .markdown table > tbody > tr:hover th:before,
.s-table.s-table.s-table--hover > tbody > tr:hover .th:before, .markdown table > tbody > tr:hover .th:before {
  border-color: #dddde1;
}

.s-table.s-table--primary.s-table--striped > thead > .tr:nth-of-type(odd) > td, .markdown table.s-table--primary > thead > .tr:nth-of-type(odd) > td,
.s-table.s-table--primary.s-table--striped > thead > .tr:nth-of-type(odd) > th, .markdown table.s-table--primary > thead > .tr:nth-of-type(odd) > th,
.s-table.s-table--primary.s-table--striped > thead > tr:nth-of-type(odd) > td, .markdown table.s-table--primary > thead > tr:nth-of-type(odd) > td,
.s-table.s-table--primary.s-table--striped > thead > tr:nth-of-type(odd) > th, .markdown table.s-table--primary > thead > tr:nth-of-type(odd) > th {
  background-color: #f2bc2b;
}

.s-table.s-table--primary.s-table--striped > tbody > .tr:nth-of-type(even) > td, .markdown table.s-table--primary > tbody > .tr:nth-of-type(even) > td,
.s-table.s-table--primary.s-table--striped > tbody > .tr:nth-of-type(even) > th, .markdown table.s-table--primary > tbody > .tr:nth-of-type(even) > th,
.s-table.s-table--primary.s-table--striped > tbody > tr:nth-of-type(even) > td, .markdown table.s-table--primary > tbody > tr:nth-of-type(even) > td,
.s-table.s-table--primary.s-table--striped > tbody > tr:nth-of-type(even) > th, .markdown table.s-table--primary > tbody > tr:nth-of-type(even) > th {
  background-color: rgba(242, 188, 43, 0.6);
}

.s-table.s-table--primary.s-table--bordered, .markdown table.s-table--primary.s-table--bordered {
  border: 1px solid #f2bc2b;
}

.s-table.s-table--primary.s-table--bordered td, .markdown table.s-table--primary.s-table--bordered td,
.s-table.s-table--primary.s-table--bordered th, .markdown table.s-table--primary.s-table--bordered th {
  border-right: 1px solid rgba(242, 188, 43, 0.8);
}

.s-table.s-table--primary.s-table--hover > tbody > .tr:hover td, .markdown table.s-table--primary > tbody > .tr:hover td, .s-table.s-table--primary.s-table--hover > tbody > .tr:hover .td, .markdown table.s-table--primary > tbody > .tr:hover .td,
.s-table.s-table--primary.s-table--hover > tbody > .tr:hover th, .markdown table.s-table--primary > tbody > .tr:hover th, .s-table.s-table--primary.s-table--hover > tbody > .tr:hover .th, .markdown table.s-table--primary > tbody > .tr:hover .th,
.s-table.s-table--primary.s-table--hover > tbody > tr:hover td, .markdown table.s-table--primary > tbody > tr:hover td,
.s-table.s-table--primary.s-table--hover > tbody > tr:hover .td, .markdown table.s-table--primary > tbody > tr:hover .td,
.s-table.s-table--primary.s-table--hover > tbody > tr:hover th, .markdown table.s-table--primary > tbody > tr:hover th,
.s-table.s-table--primary.s-table--hover > tbody > tr:hover .th, .markdown table.s-table--primary > tbody > tr:hover .th {
  background-color: #f2bc2b;
}

.s-table.s-table--primary.s-table--hover > tbody > .tr:hover td:before, .markdown table.s-table--primary > tbody > .tr:hover td:before, .s-table.s-table--primary.s-table--hover > tbody > .tr:hover .td:before, .markdown table.s-table--primary > tbody > .tr:hover .td:before,
.s-table.s-table--primary.s-table--hover > tbody > .tr:hover th:before, .markdown table.s-table--primary > tbody > .tr:hover th:before, .s-table.s-table--primary.s-table--hover > tbody > .tr:hover .th:before, .markdown table.s-table--primary > tbody > .tr:hover .th:before,
.s-table.s-table--primary.s-table--hover > tbody > tr:hover td:before, .markdown table.s-table--primary > tbody > tr:hover td:before,
.s-table.s-table--primary.s-table--hover > tbody > tr:hover .td:before, .markdown table.s-table--primary > tbody > tr:hover .td:before,
.s-table.s-table--primary.s-table--hover > tbody > tr:hover th:before, .markdown table.s-table--primary > tbody > tr:hover th:before,
.s-table.s-table--primary.s-table--hover > tbody > tr:hover .th:before, .markdown table.s-table--primary > tbody > tr:hover .th:before {
  border-color: #dca40e;
}

.s-table.s-table--secondary.s-table--striped > thead > .tr:nth-of-type(odd) > td, .markdown table.s-table--secondary > thead > .tr:nth-of-type(odd) > td,
.s-table.s-table--secondary.s-table--striped > thead > .tr:nth-of-type(odd) > th, .markdown table.s-table--secondary > thead > .tr:nth-of-type(odd) > th,
.s-table.s-table--secondary.s-table--striped > thead > tr:nth-of-type(odd) > td, .markdown table.s-table--secondary > thead > tr:nth-of-type(odd) > td,
.s-table.s-table--secondary.s-table--striped > thead > tr:nth-of-type(odd) > th, .markdown table.s-table--secondary > thead > tr:nth-of-type(odd) > th {
  background-color: #777;
}

.s-table.s-table--secondary.s-table--striped > tbody > .tr:nth-of-type(even) > td, .markdown table.s-table--secondary > tbody > .tr:nth-of-type(even) > td,
.s-table.s-table--secondary.s-table--striped > tbody > .tr:nth-of-type(even) > th, .markdown table.s-table--secondary > tbody > .tr:nth-of-type(even) > th,
.s-table.s-table--secondary.s-table--striped > tbody > tr:nth-of-type(even) > td, .markdown table.s-table--secondary > tbody > tr:nth-of-type(even) > td,
.s-table.s-table--secondary.s-table--striped > tbody > tr:nth-of-type(even) > th, .markdown table.s-table--secondary > tbody > tr:nth-of-type(even) > th {
  background-color: rgba(119, 119, 119, 0.6);
}

.s-table.s-table--secondary.s-table--bordered, .markdown table.s-table--secondary.s-table--bordered {
  border: 1px solid #777;
}

.s-table.s-table--secondary.s-table--bordered td, .markdown table.s-table--secondary.s-table--bordered td,
.s-table.s-table--secondary.s-table--bordered th, .markdown table.s-table--secondary.s-table--bordered th {
  border-right: 1px solid rgba(119, 119, 119, 0.8);
}

.s-table.s-table--secondary.s-table--hover > tbody > .tr:hover td, .markdown table.s-table--secondary > tbody > .tr:hover td, .s-table.s-table--secondary.s-table--hover > tbody > .tr:hover .td, .markdown table.s-table--secondary > tbody > .tr:hover .td,
.s-table.s-table--secondary.s-table--hover > tbody > .tr:hover th, .markdown table.s-table--secondary > tbody > .tr:hover th, .s-table.s-table--secondary.s-table--hover > tbody > .tr:hover .th, .markdown table.s-table--secondary > tbody > .tr:hover .th,
.s-table.s-table--secondary.s-table--hover > tbody > tr:hover td, .markdown table.s-table--secondary > tbody > tr:hover td,
.s-table.s-table--secondary.s-table--hover > tbody > tr:hover .td, .markdown table.s-table--secondary > tbody > tr:hover .td,
.s-table.s-table--secondary.s-table--hover > tbody > tr:hover th, .markdown table.s-table--secondary > tbody > tr:hover th,
.s-table.s-table--secondary.s-table--hover > tbody > tr:hover .th, .markdown table.s-table--secondary > tbody > tr:hover .th {
  background-color: #777;
}

.s-table.s-table--secondary.s-table--hover > tbody > .tr:hover td:before, .markdown table.s-table--secondary > tbody > .tr:hover td:before, .s-table.s-table--secondary.s-table--hover > tbody > .tr:hover .td:before, .markdown table.s-table--secondary > tbody > .tr:hover .td:before,
.s-table.s-table--secondary.s-table--hover > tbody > .tr:hover th:before, .markdown table.s-table--secondary > tbody > .tr:hover th:before, .s-table.s-table--secondary.s-table--hover > tbody > .tr:hover .th:before, .markdown table.s-table--secondary > tbody > .tr:hover .th:before,
.s-table.s-table--secondary.s-table--hover > tbody > tr:hover td:before, .markdown table.s-table--secondary > tbody > tr:hover td:before,
.s-table.s-table--secondary.s-table--hover > tbody > tr:hover .td:before, .markdown table.s-table--secondary > tbody > tr:hover .td:before,
.s-table.s-table--secondary.s-table--hover > tbody > tr:hover th:before, .markdown table.s-table--secondary > tbody > tr:hover th:before,
.s-table.s-table--secondary.s-table--hover > tbody > tr:hover .th:before, .markdown table.s-table--secondary > tbody > tr:hover .th:before {
  border-color: #5e5e5e;
}

/* BLOCKS
---------------------------------------*/
/**
 * These are your components and modules; things like sections, accordions,
 * carousels, etc.
 */
/* BLOCKS
---------------------------------------*/
/**
 * Menu drawer
 */
html, body {
  height: 100%;
}

input[is="s-drawer-toggle"] {
  position: fixed;
  top: 0;
  left: 0;
  opacity: 0;
}

s-drawer[name="team"] {
  position: fixed;
  display: block;
  left: auto;
  right: -500px;
  height: 100%;
  width: 500px;
  top: 0;
  z-index: 1;
  overflow-x: hidden;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  transition: all, 0.2s, ease-in-out, 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

/* actual page content pane */
s-drawer-content {
  transform: translateX(0) translateY(0) translateZ(0);
  width: 100%;
  min-height: 100vh;
  transition: all, 0.2s, ease-in-out, 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  background-color: white;
  position: relative;
  display: block;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 2;
}

label[is="s-drawer-overlay"][for="team"] {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  height: 100%;
  width: 100%;
  background: rgba(255, 255, 255, 0);
  opacity: 0;
  pointer-events: none;
  transition: all, 0.2s, ease-in-out, 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  z-index: 4;
}

s-drawer-bkg[for="team"] {
  display: block;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 0;
  visibility: hidden;
  transition: all, 0.2s, ease-in-out, 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

input[is="s-drawer-toggle"][name="team"]:checked ~ label[is="s-drawer-overlay"][for="team"] {
  opacity: 1;
  pointer-events: all;
  left: auto;
  right: 500px;
  cursor: pointer;
}

input[is="s-drawer-toggle"][name="team"]:checked ~ s-drawer-bkg[for="team"] {
  visibility: visible;
  transition: visibility 0s linear 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

input[is="s-drawer-toggle"][name="team"]:checked ~ s-drawer[name="team"] {
  left: auto;
  right: 0;
}

input[is="s-drawer-toggle"][name="team"]:checked ~ s-drawer-content {
  left: auto;
  right: 500px;
}

/**
 * Generic drawer styling
 */
[s-drawer-content] {
  overflow-x: hidden;
  transform: none;
  height: 100%;
  filter: drop-shadow(rgba(0, 0, 0, 0.3) 0 0 4px);
}

[s-drawer-overlay] {
  background: rgba(169, 169, 169, 0.8);
}

.s-drawer-menu [s-drawer-content] {
  filter: grayscale(90%);
}

body.s-drawer-menu {
  overflow-y: hidden;
}

.s-form-group {
  display: flex !important;
  flex: 1 !important;
}

.s-form-group input[type="submit"], .s-form-group button,
.s-form-group .s-form-addon {
  flex: 0 auto;
}

.s-form-group > input:not([type="checkbox"]):not([type="radio"]):not([type="submit"]),
.s-form-group > label:first-of-type:last-of-type {
  flex: 1 !important;
  margin-top: 0 !important;
}

[is="label"] {
  position: relative;
  display: block;
}

[is="label"] > input {
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  padding-left: 0;
  border-left: none !important;
  border-right: none !important;
  border-top: none !important;
}

[is="label"] > span {
  display: inline-block;
  padding: 1.21428571em 1.57142857em;
  padding-left: 0;
  height: 3.42857143em;
  position: absolute;
  top: 0;
  left: 0;
  white-space: nowrap;
  pointer-events: none;
  text-overflow: ellipsis;
  overflow: hidden;
  transform: translateX(0) translateY(0) translateZ(0);
  transition: padding 0.1s ease-in-out 0s, font-size 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

[is="label"] > input[has-value] ~ span,
[is="label"] > input:focus ~ span {
  font-size: 0.7em;
  padding: 0;
}

[is="label"] > input[has-value],
[is="label"] > input:focus {
  padding-left: 0 !important;
  padding-top: 1.615em !important;
  padding-bottom: 0.80952381em !important;
}

.s-select {
  position: relative;
  cursor: pointer;
}

select:disabled + .s-select {
  opacity: 0.25;
  pointer-events: none;
  cursor: not-allowed;
}

.s-select__dropdown {
  opacity: 0;
  pointer-events: none;
  position: absolute;
  top: 100%;
  left: 0;
  z-index: 1;
  width: 100%;
  height: 0;
  overflow-y: hidden;
}

.s-select__selection {
  vertical-align: middle;
}

.s-select__selection > * {
  display: inline-block;
  vertical-align: middle;
}

.s-select__dropup .s-select__dropdown {
  top: auto;
  bottom: calc(100% + 10px);
}

.s-select--opened .s-select__dropdown {
  opacity: 1;
  pointer-events: all;
  height: auto;
}

.s-select__options {
  overflow-y: auto;
  overflow-x: hidden;
  height: 100%;
  max-height: 100vh;
}

.s-select__option {
  list-style: none;
  cursor: pointer;
}

.s-select__option--disabled {
  opacity: 0.25;
  pointer-events: none;
}

.s-select__option--hidden {
  display: none;
}

.s-select__selection-tag {
  display: inline-block;
}

.s-select__reset {
  display: none;
  background-size: 100% 100%;
  background-color: transparent;
  border: none;
  position: absolute;
}

:hover > .s-select__reset {
  display: inline-block;
}

.s-select__selection-tag-close {
  background-size: 100% 100%;
}

.s-select__selection-tag-close {
  height: 0.8em;
  width: 0.8em;
  vertical-align: middle;
  cursor: pointer;
  display: inline-block;
}

.s-select__reset {
  right: 3.64285714em;
  top: 1.57142857em;
  height: 1em;
  width: 1em;
  vertical-align: middle;
  cursor: pointer;
}

.s-select__search-field {
  border-radius: 0em;
  padding: 1.21428571em 1.57142857em;
}

.s-select.input {
  background-size: 9px 6px;
  background-position: right center;
  background-origin: content-box;
  background-repeat: no-repeat;
  border-radius: 0em;
  padding: 0 1.57142857em;
  height: 3.42857143em;
}

.s-select.input:not(input) {
  padding: 1.21428571em 1.57142857em;
}

.s-select.input.s-select__multiple {
  transition: none;
}

.s-select.input.s-select__multiple:not(.s-select--placeholder) {
  padding: 0.36428571em 0.72857143em;
  height: auto !important;
}

.s-select.input .s-select__dropdown {
  border-radius: 0em;
}

.s-select.input .s-select__search-container {
  padding: 1.21428571em 1.57142857em;
}

.s-select.input .s-select__search-field {
  border-radius: 0em;
  padding: 0 1.57142857em;
  height: 3.42857143em;
  border-radius: 0em;
}

.s-select.input .s-select__search-field:not(input) {
  padding: 1.21428571em 1.57142857em;
}

.s-select.input .s-select__selection-tag {
  border-radius: 0em;
  font-size: 0.8em;
  margin-right: 0.78571429em;
  margin-top: 0.36428571em;
  margin-bottom: 0.36428571em;
  padding: 0.60714286em 0.78571429em;
}

.s-select.input .s-select__selection-tag-close {
  margin-left: 0.52380952em;
}

.s-select.input .s-select__option:not(.s-select__option--custom),
.s-select.input .s-select__optgroup:not(.s-select__optgroup--custom) {
  padding: 1.21428571em 1.57142857em;
}

.s-select.input .s-select__option--in-optgroup {
  padding-left: 2.42857143em !important;
}

.s-select {
  background-color: white;
  border-color: rgba(51, 51, 51, 0.1);
  border-bottom-color: rgba(51, 51, 51, 0.3);
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="32" height="24" viewBox="0 0 32 24"><polygon points="0,0 32,0 16,24" style="fill%3A%23333"></polygon></svg>');
}

[data-input-activator]:focus ~ .s-select,
[data-input-activator]:checked ~ .s-select, .s-select:hover:not(:disabled), .s-select:focus:not(:disabled), .s-select.active:not(:disabled) {
  border-bottom-color: rgba(51, 51, 51, 0.6);
}

[data-input-activator]:focus ~ .s-select,
[data-input-activator]:checked ~ .s-select, .s-select:focus:not(:disabled), .s-select.active:not(:disabled) {
  border-left-color: rgba(51, 51, 51, 0.6);
}

.s-select.vr:not(.no-vr),
.vr .s-select:not(.no-vr) {
  margin-bottom: 1rem;
}

.s-select__search-field {
  width: 100%;
  height: 100%;
  outline: none;
  color: #333;
  background-color: white;
  border: 1px solid rgba(51, 51, 51, 0.5);
}

.s-select__search-field::-webkit-input-placeholder {
  color: rgba(51, 51, 51, 0.4);
}

.s-select__search-field:-moz-placeholder {
  color: rgba(51, 51, 51, 0.4);
}

.s-select__search-field::-moz-placeholder {
  color: rgba(51, 51, 51, 0.4);
}

.s-select__search-field:-ms-input-placeholder {
  color: rgba(51, 51, 51, 0.4);
}

.input--placeholder {
  color: rgba(51, 51, 51, 0.4);
}

.s-select__dropdown {
  top: calc(100% + 3px);
  margin-top: -20px;
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
  background: white;
  box-shadow: rgba(0, 0, 0, 0.2) 0 12px 18px;
}

.s-select--opened .s-select__dropdown {
  margin-top: 0;
}

.s-select.input .s-select__optgroup:not(.s-select__optgroup--custom) {
  font-weight: bold;
}

.s-select__option {
  color: #333;
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

select[required] + .s-select--placeholder .s-select__selection:after {
  content: ' *';
  color: #d9534f;
  font-size: .7em;
}

.s-select .s-select__search-container {
  background: rgba(51, 51, 51, 0.1);
  border-bottom: 1px solid rgba(51, 51, 51, 0.2);
}

.s-select .s-select__selection-tag {
  background: rgba(51, 51, 51, 0.6);
  color: white;
}

.s-select .s-select__reset,
.s-select .s-select__selection-tag-close {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A%23333;}</style><path d="M443.6,387.1L312.4,255.4l131.5-130c5.4-5.4,5.4-14.2,0-19.6l-37.4-37.6c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4  L256,197.8L124.9,68.3c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4L68,105.9c-5.4,5.4-5.4,14.2,0,19.6l131.5,130L68.4,387.1  c-2.6,2.6-4.1,6.1-4.1,9.8c0,3.7,1.4,7.2,4.1,9.8l37.4,37.6c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1L256,313.1l130.7,131.1  c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1l37.4-37.6c2.6-2.6,4.1-6.1,4.1-9.8C447.7,393.2,446.2,389.7,443.6,387.1z"/></svg>');
  opacity: .65;
}

.s-select .s-select__reset:hover,
.s-select .s-select__selection-tag-close:hover {
  opacity: 1;
}

.s-select .s-select__option--selected {
  background: rgba(51, 51, 51, 0.2);
}

.s-select .s-select__option.active {
  background: rgba(51, 51, 51, 0.3);
}

.s-select .s-select__option:hover, .s-select .s-select__option:active {
  background: rgba(51, 51, 51, 0.6);
  color: white;
}

.s-select .s-select__search-result {
  background: #333;
  color: white;
}

.s-select--primary .s-select__search-container {
  background: rgba(242, 188, 43, 0.1);
  border-bottom: 1px solid rgba(242, 188, 43, 0.2);
}

.s-select--primary .s-select__selection-tag {
  background: rgba(242, 188, 43, 0.6);
  color: white;
}

.s-select--primary .s-select__reset,
.s-select--primary .s-select__selection-tag-close {
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><style>path{fill%3A%23f2bc2b;}</style><path d="M443.6,387.1L312.4,255.4l131.5-130c5.4-5.4,5.4-14.2,0-19.6l-37.4-37.6c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4  L256,197.8L124.9,68.3c-2.6-2.6-6.1-4-9.8-4c-3.7,0-7.2,1.5-9.8,4L68,105.9c-5.4,5.4-5.4,14.2,0,19.6l131.5,130L68.4,387.1  c-2.6,2.6-4.1,6.1-4.1,9.8c0,3.7,1.4,7.2,4.1,9.8l37.4,37.6c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1L256,313.1l130.7,131.1  c2.7,2.7,6.2,4.1,9.8,4.1c3.5,0,7.1-1.3,9.8-4.1l37.4-37.6c2.6-2.6,4.1-6.1,4.1-9.8C447.7,393.2,446.2,389.7,443.6,387.1z"/></svg>');
  opacity: .65;
}

.s-select--primary .s-select__reset:hover,
.s-select--primary .s-select__selection-tag-close:hover {
  opacity: 1;
}

.s-select--primary .s-select__option--selected {
  background: rgba(242, 188, 43, 0.2);
}

.s-select--primary .s-select__option.active {
  background: rgba(242, 188, 43, 0.3);
}

.s-select--primary .s-select__option:hover, .s-select--primary .s-select__option:active {
  background: rgba(242, 188, 43, 0.6);
  color: white;
}

.s-select--primary .s-select__search-result {
  background: #f2bc2b;
  color: white;
}

.markdown ul {
  counter-reset: s-list;
  color: #333;
}

.markdown ul li {
  padding-left: 20px;
  position: relative;
}

.markdown ul li:before {
  content: counter(s-list, disc);
  counter-increment: s-list;
}

.markdown ul li:before {
  left: 0;
  color: #f2bc2b !important;
}

.markdown ul li:before {
  position: absolute;
  display: block;
}

.markdown ul li > ul,
.markdown ul li > ol,
.markdown ul li > dl {
  margin-left: 0;
  margin-bottom: 0;
}

.markdown hr {
  display: none;
  color: #f2bc2b;
  background-color: transparent;
  border-color: #f2bc2b;
}

.markdown h3 {
  display: block;
  overflow: hidden;
  min-height: 1.2em;
  text-align: left;
}

.markdown h3:after {
  content: "";
  display: inline-block;
  vertical-align: middle;
  position: relative;
  width: 100%;
  border-top-style: solid;
  border-top-width: 10px;
  border-top-color: #eaeaed;
  bottom: 0.05em;
}

.markdown h3:after {
  left: 1.42857143rem;
  margin-right: -50%;
}

.markdown h2 {
  margin-top: 4rem;
  margin-bottom: 4rem !important;
  background-color: #dddde1;
  padding: 1.42857143rem 4.28571429rem;
  margin-left: -4.28571429rem;
  margin-right: -4.28571429rem;
  box-shadow: inset 0 4px 4px -4px rgba(0, 0, 0, 0.3), inset 0 -4px 4px -4px rgba(0, 0, 0, 0.3);
}

.markdown h1, .markdown h2, .markdown h3, .markdown h4, .markdown h5, .markdown h6 {
  color: #333;
}

.markdown h1, .markdown h2, .markdown h3, .markdown h4, .markdown h5, .markdown h6,
.markdown p,
.markdown pre,
.markdown ul, .markdown ol, .markdown dl {
  margin-bottom: 2rem;
}

.markdown table {
  margin-bottom: 2rem;
}

.markdown h1 + p, .markdown h2 + p, .markdown h3 + p {
  font-size: 1.5rem;
}

.markdown p {
  margin-bottom: 1rem;
}

.markdown table {
  color: #333;
}

.nav--inline, .nav--justify {
  list-style: none;
  padding: 0;
  margin: 0;
  user-select: none;
}

.nav--inline {
  display: block;
}

.nav--inline > li,
.nav--inline > .nav__item {
  position: relative;
  display: inline-block;
  padding-right: 3.14285714em;
}

.nav--inline > li:last-of-type,
.nav--inline > .nav__item:last-of-type {
  padding-right: 0 !important;
}

.nav--inline > li:first-of-type,
.nav--inline > .nav__item:first-of-type {
  padding-left: 0 !important;
}

.nav--right {
  text-align: right;
}

.nav--right > li,
.nav--right > .nav__item {
  padding-right: 0;
  padding-left: 3.14285714em;
}

.nav--justify {
  display: table;
  width: 100%;
}

.nav--justify > li,
.nav--justify > .nav__item {
  display: table-cell;
  vertical-align: middle;
  padding-right: 3.14285714em;
  text-align: center;
}

.nav--right {
  text-align: right;
}

.nav--right > li,
.nav--right > .nav__item {
  padding-right: 0;
  padding-left: 3.14285714em;
}

[s-activate-target] {
  display: none;
}

[s-activate-target].read-more--active, [s-activate-target].active {
  display: block;
}

[s-activate-target="toggle"] {
  display: block !important;
  max-height: 0;
  overflow: hidden;
  opacity: 0.001;
  transition: all 0.4s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

[s-activate-target="toggle"].read-more--active, [s-activate-target="toggle"].active {
  max-height: 500px;
  opacity: 1;
}

/**
 * Dialog
 */
body.s-dialog--opened {
  overflow: hidden;
}

.s-dialog {
  z-index: 9999;
  padding: 4.28571429rem;
  animation: dialog-out-container 0.2s 0s ease-in-out 1 normal forwards;
}

@media screen and (max-width: 620px) {
  .s-dialog {
    padding: 0;
  }
}

.s-dialog__overlay {
  background: rgba(169, 169, 169, 0.8);
  animation: dialog-in-overlay 0.1s 0s ease-out 1 normal forwards;
}

.s-dialog__content {
  max-width: 80vw;
  background: white;
  animation: dialog-in-content 0.2s 0s ease-in-out 1 normal forwards;
  box-shadow: rgba(0, 0, 0, 0.2) 0 10px 15px;
}

@media screen and (max-width: 620px) {
  .s-dialog__content {
    max-width: 100vw;
  }
}

.s-dialog--out .s-dialog__overlay {
  animation: dialog-out-overlay 0.2s 0s ease-out 1 normal forwards;
}

.s-dialog--out .s-dialog__content {
  animation: dialog-out-content 0.1s 0s ease-out 1 normal forwards;
}

@keyframes dialog-in-overlay {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes dialog-in-content {
  from {
    opacity: 0;
    transform: translateY(-50px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes dialog-out-container {
  from {
  }
  to {
  }
}

@keyframes dialog-out-overlay {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes dialog-out-content {
  from {
    transform: translateY(0);
    opacity: 1;
  }
  to {
    transform: translateY(50px);
    opacity: 0;
  }
}

/**
 * s-equalize component styling
 */
[s-equalizer] {
  transition: max-height 0.4s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

/**
 * Section styling
 */
.section {
  position: relative;
  padding-top: 1.42857143rem;
  padding-bottom: 1.42857143rem;
}

@media screen and (max-width: 1023px) {
  .section {
    padding-top: 1.42857143rem;
    padding-bottom: 1.42857143rem;
  }
}

/**
	 * Image
	 */
.section__img {
  position: absolute;
  top: 0;
  right: 0;
  min-width: 50%;
  width: auto;
  height: 100%;
  overflow: hidden;
  z-index: -1;
}

.section__img:after {
  content: '';
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: #f85032;
  background: radial-gradient(circle farthest-side at 100% 50%, transparent, white 100%);
}

.section__img > img {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  min-width: 100%;
  min-height: 100%;
}

/**
 * Sizes
 */
.section--smaller {
  padding-top: 0.85714286rem;
  padding-bottom: 0.85714286rem;
}

.section--small {
  padding-top: 1.14285714rem;
  padding-bottom: 1.14285714rem;
}

.section--medium {
  padding-top: 2.14285714rem;
  padding-bottom: 2.14285714rem;
}

@media screen and (max-width: 1023px) {
  .section--medium {
    padding-top: 2.14285714rem;
    padding-bottom: 2.14285714rem;
  }
}

.section--big {
  padding-top: 2.85714286rem;
  padding-bottom: 2.85714286rem;
}

@media screen and (max-width: 1023px) {
  .section--big {
    padding-top: 2.14285714rem;
    padding-bottom: 2.14285714rem;
  }
}

.section--bigger {
  padding-top: 4.28571429rem;
  padding-bottom: 4.28571429rem;
}

@media screen and (max-width: 1023px) {
  .section--bigger {
    padding-top: 2.14285714rem;
    padding-bottom: 2.14285714rem;
  }
}

/**
 * Dark section
 */
.section--dark {
  background: url("/assets/img/section--dark-juniors.png") no-repeat 50% 50%, linear-gradient(to top, darkgrey, #909090);
  background-size: cover;
}

/**
 * Side menu
 */
[s-trianglify] {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  mix-blend-mode: overlay;
}

#topbar {
  background: linear-gradient(to right, #f2bc2b, #dca40e);
  height: 70px;
  position: relative;
}

.topbar__title {
  font-size: 1.85714286rem;
  color: white;
  text-transform: uppercase;
  padding: 0 0 0 2.85714286rem;
  text-shadow: rgba(0, 0, 0, 0.3) 1px 1px 2px;
}

.topbar__links {
  padding-right: 2.85714286rem;
  position: relative;
}

.topbar__links .nav__item {
  text-align: center;
}

.topbar__links .nav__item > * > i {
  color: white;
  text-shadow: rgba(0, 0, 0, 0.3) 1px 1px 2px;
}

#sidebar {
  font-size: 0.9rem;
  min-width: 14.28571429rem;
  max-width: 21.42857143rem;
  height: calc(100% - 70px);
  overflow-y: auto;
  float: left;
  border-right: solid 1px #eee;
  background-color: #f8f8f9;
}

.sidebar__header {
  background: white;
  padding: 2.85714286rem;
  border-bottom: solid 1px #eee;
}

#content {
  background-color: white;
  margin-left: 21.42857143rem;
  padding: 4.28571429rem;
  height: calc(100% - 70px);
  overflow-y: auto;
}

.tabs {
  background-color: lightblue;
}

.tabs__tab {
  float: left;
}

.tabs__tab a {
  padding: 1.21428571em 1.57142857em;
  text-align: center;
  display: block;
}

.tabs__tab a, .tabs__tab a:before, .tabs__tab a:after {
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.tabs__tab a:hover, .tabs__tab a.active {
  background: white;
}

[s-drawer="team"] {
  background: #686870;
  height: 100%;
}

.team {
  padding: 2.85714286rem;
  color: white;
}

.team > [s-trianglify] {
  position: fixed;
  z-index: 0;
}

.team__member {
  background: #f8f8f9;
  border-radius: 0.35714286rem;
  padding: 1.42857143rem;
  margin-bottom: 2.14285714rem;
  color: #5c5c63;
}

.team__picture {
  position: relative;
  overflow: hidden;
  border-radius: 50%;
  overflow: hidden;
  width: 3.57142857rem;
  display: inline-block;
}

.team__picture:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 100%;
}

.team__picture > img {
  border-radius: 50%;
  overflow: hidden;
}

.team__picture img {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  min-width: 100%;
  min-height: 100%;
}

/* LAYOUT
---------------------------------------*/
/**
 * These are the classes that are specific to certain section id's
 * other styles, e.g. `#home-products figure`.
 */
/* TRUMPS
---------------------------------------*/
/**
 * These are helper classes and overrides that should take precedence over all
 * other styles, e.g. `.float--left {}`.
 */
/* TRUMPS
---------------------------------------*/
@media screen and (max-width: 400px) {
  @-ms-viewport {
    width: device-width;
  }
}

.float-left {
  float: left;
}

.float-right {
  float: right;
}

.clear {
  clear: both;
}

.clear-left {
  clear: left;
}

.clear-right {
  clear: right;
}

.auto-height {
  height: inherit;
  min-height: inherit;
  max-height: inherit;
}

.no-gutter {
  padding-top: 0;
  padding-right: 0;
  padding-bottom: 0;
  padding-left: 0;
}

.no-gutter-left {
  padding-left: 0;
}

.no-gutter-right {
  padding-right: 0;
}

.no-gutter-top {
  padding-top: 0;
}

.no-gutter-bottom {
  padding-bottom: 0;
}

.row > .gutter,
.gutter {
  padding-top: 10px;
  padding-right: 10px;
  padding-bottom: 10px;
  padding-left: 10px;
}

.row > .gutter-left,
.gutter-left {
  padding-left: 10px;
}

.row > .gutter-right,
.gutter-right {
  padding-right: 10px;
}

.row > .gutter-top,
.gutter-top {
  padding-top: 10px;
}

.row > .gutter-bottom,
.gutter-bottom {
  padding-bottom: 10px;
}

.hide {
  display: none !important;
}

.not-visible {
  visibility: hidden;
}

.show {
  display: block !important;
}

.show-inline {
  display: inline-block !important;
}

.visible {
  visibility: visible;
}

.clear-each-2 > [class*="gr-"]:nth-of-type(2n+1) {
  clear: left;
}

.clear-each-3 > [class*="gr-"]:nth-of-type(3n+1) {
  clear: left;
}

.clear-each-4 > [class*="gr-"]:nth-of-type(4n+1) {
  clear: left;
}

.clear-each-5 > [class*="gr-"]:nth-of-type(5n+1) {
  clear: left;
}

body {
  direction: ltr;
}

@media screen and (max-width: 1023px) {
  .float-left\@moblet {
    float: left;
  }
  .float-right\@moblet {
    float: right;
  }
  .clear\@moblet {
    clear: both;
  }
  .clear-left\@moblet {
    clear: left;
  }
  .clear-right\@moblet {
    clear: right;
  }
  .auto-height\@moblet {
    height: inherit;
    min-height: inherit;
    max-height: inherit;
  }
  .no-gutter\@moblet {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .no-gutter-left\@moblet {
    padding-left: 0;
  }
  .no-gutter-right\@moblet {
    padding-right: 0;
  }
  .no-gutter-top\@moblet {
    padding-top: 0;
  }
  .no-gutter-bottom\@moblet {
    padding-bottom: 0;
  }
  .row > .gutter\@moblet,
  .gutter\@moblet {
    padding-top: 10px;
    padding-right: 10px;
    padding-bottom: 10px;
    padding-left: 10px;
  }
  .row > .gutter-left\@moblet,
  .gutter-left\@moblet {
    padding-left: 10px;
  }
  .row > .gutter-right\@moblet,
  .gutter-right\@moblet {
    padding-right: 10px;
  }
  .row > .gutter-top\@moblet,
  .gutter-top\@moblet {
    padding-top: 10px;
  }
  .row > .gutter-bottom\@moblet,
  .gutter-bottom\@moblet {
    padding-bottom: 10px;
  }
  .hide\@moblet {
    display: none !important;
  }
  .not-visible\@moblet {
    visibility: hidden;
  }
  .show\@moblet {
    display: block !important;
  }
  .show-inline\@moblet {
    display: inline-block !important;
  }
  .visible\@moblet {
    visibility: visible;
  }
  .clear-each-2\@moblet > [class*="gr-"]:nth-of-type(2n+1) {
    clear: left;
  }
  .clear-each-3\@moblet > [class*="gr-"]:nth-of-type(3n+1) {
    clear: left;
  }
  .clear-each-4\@moblet > [class*="gr-"]:nth-of-type(4n+1) {
    clear: left;
  }
  .clear-each-5\@moblet > [class*="gr-"]:nth-of-type(5n+1) {
    clear: left;
  }
  body {
    direction: ltr;
  }
}

@media screen and (max-width: 620px) {
  .float-left\@mobile {
    float: left;
  }
  .float-right\@mobile {
    float: right;
  }
  .clear\@mobile {
    clear: both;
  }
  .clear-left\@mobile {
    clear: left;
  }
  .clear-right\@mobile {
    clear: right;
  }
  .auto-height\@mobile {
    height: inherit;
    min-height: inherit;
    max-height: inherit;
  }
  .no-gutter\@mobile {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .no-gutter-left\@mobile {
    padding-left: 0;
  }
  .no-gutter-right\@mobile {
    padding-right: 0;
  }
  .no-gutter-top\@mobile {
    padding-top: 0;
  }
  .no-gutter-bottom\@mobile {
    padding-bottom: 0;
  }
  .row > .gutter\@mobile,
  .gutter\@mobile {
    padding-top: 10px;
    padding-right: 10px;
    padding-bottom: 10px;
    padding-left: 10px;
  }
  .row > .gutter-left\@mobile,
  .gutter-left\@mobile {
    padding-left: 10px;
  }
  .row > .gutter-right\@mobile,
  .gutter-right\@mobile {
    padding-right: 10px;
  }
  .row > .gutter-top\@mobile,
  .gutter-top\@mobile {
    padding-top: 10px;
  }
  .row > .gutter-bottom\@mobile,
  .gutter-bottom\@mobile {
    padding-bottom: 10px;
  }
  .hide\@mobile {
    display: none !important;
  }
  .not-visible\@mobile {
    visibility: hidden;
  }
  .show\@mobile {
    display: block !important;
  }
  .show-inline\@mobile {
    display: inline-block !important;
  }
  .visible\@mobile {
    visibility: visible;
  }
  .clear-each-2\@mobile > [class*="gr-"]:nth-of-type(2n+1) {
    clear: left;
  }
  .clear-each-3\@mobile > [class*="gr-"]:nth-of-type(3n+1) {
    clear: left;
  }
  .clear-each-4\@mobile > [class*="gr-"]:nth-of-type(4n+1) {
    clear: left;
  }
  .clear-each-5\@mobile > [class*="gr-"]:nth-of-type(5n+1) {
    clear: left;
  }
  body {
    direction: ltr;
  }
}

@media screen and (min-width: 621px) and (max-width: 1023px) {
  .float-left\@tablet {
    float: left;
  }
  .float-right\@tablet {
    float: right;
  }
  .clear\@tablet {
    clear: both;
  }
  .clear-left\@tablet {
    clear: left;
  }
  .clear-right\@tablet {
    clear: right;
  }
  .auto-height\@tablet {
    height: inherit;
    min-height: inherit;
    max-height: inherit;
  }
  .no-gutter\@tablet {
    padding-top: 0;
    padding-right: 0;
    padding-bottom: 0;
    padding-left: 0;
  }
  .no-gutter-left\@tablet {
    padding-left: 0;
  }
  .no-gutter-right\@tablet {
    padding-right: 0;
  }
  .no-gutter-top\@tablet {
    padding-top: 0;
  }
  .no-gutter-bottom\@tablet {
    padding-bottom: 0;
  }
  .row > .gutter\@tablet,
  .gutter\@tablet {
    padding-top: 10px;
    padding-right: 10px;
    padding-bottom: 10px;
    padding-left: 10px;
  }
  .row > .gutter-left\@tablet,
  .gutter-left\@tablet {
    padding-left: 10px;
  }
  .row > .gutter-right\@tablet,
  .gutter-right\@tablet {
    padding-right: 10px;
  }
  .row > .gutter-top\@tablet,
  .gutter-top\@tablet {
    padding-top: 10px;
  }
  .row > .gutter-bottom\@tablet,
  .gutter-bottom\@tablet {
    padding-bottom: 10px;
  }
  .hide\@tablet {
    display: none !important;
  }
  .not-visible\@tablet {
    visibility: hidden;
  }
  .show\@tablet {
    display: block !important;
  }
  .show-inline\@tablet {
    display: inline-block !important;
  }
  .visible\@tablet {
    visibility: visible;
  }
  .clear-each-2\@tablet > [class*="gr-"]:nth-of-type(2n+1) {
    clear: left;
  }
  .clear-each-3\@tablet > [class*="gr-"]:nth-of-type(3n+1) {
    clear: left;
  }
  .clear-each-4\@tablet > [class*="gr-"]:nth-of-type(4n+1) {
    clear: left;
  }
  .clear-each-5\@tablet > [class*="gr-"]:nth-of-type(5n+1) {
    clear: left;
  }
  body {
    direction: ltr;
  }
}

/**
 * Cover
 */
.abs-cover {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  min-width: 100%;
  min-height: 100%;
  max-width: 100%;
}

.rel-cover {
  position: relative;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  min-width: 100%;
  min-height: 100%;
  max-width: 100%;
}

/**
 * Mobile specific
 */
@media screen and (max-width: 620px) {
  *,
  *:after,
  *:before {
    -webkit-transition: none !important;
    transition: none !important;
  }
}

/**
 * Position styling
 */
.abs-top-left {
  position: absolute;
  top: 0%;
  left: 0%;
}

.abs-top-center {
  position: absolute;
  top: 0%;
  left: 50%;
  transform: translateX(-50%) translateY(0%) translateZ(0);
}

.abs-top-right {
  position: absolute;
  top: 0%;
  right: 0%;
}

.abs-middle-left {
  position: absolute;
  top: 50%;
  left: 0%;
  transform: translateX(0) translateY(-50%) translateZ(0);
}

.abs-middle-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%) translateZ(0);
}

.abs-middle-right {
  position: absolute;
  top: 50%;
  right: 0%;
  transform: translateX(0) translateY(-50%) translateZ(0);
}

.abs-bottom-left {
  position: absolute;
  bottom: 0%;
  left: 0%;
}

.abs-bottom-center {
  position: absolute;
  bottom: 0%;
  left: 50%;
  transform: translateX(-50%) translateY(0%) translateZ(0);
}

.abs-bottom-right {
  position: absolute;
  bottom: 0%;
  right: 0%;
}

/**
 * sizes
 */
.abs-fit {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.flex-column {
  display: flex;
  flex-direction: column;
  height: inherit;
  min-height: inherit;
  max-height: inherit;
}

.flex-column > * {
  flex: 0 1 auto;
  flex-shrink: 0;
}

.flex-adapt {
  flex: 0 1 auto;
  flex-shrink: 0;
}

.flex-grow {
  flex: 1 1 auto;
}

/**
 * Ratios
 */
.ratio-1-1 {
  position: relative;
  overflow: hidden;
}

.ratio-1-1:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 100%;
}

.ratio-3-1 {
  position: relative;
  overflow: hidden;
}

.ratio-3-1:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 33.33333333%;
}

.ratio-4-1 {
  position: relative;
  overflow: hidden;
}

.ratio-4-1:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 25%;
}

.ratio-5-1 {
  position: relative;
  overflow: hidden;
}

.ratio-5-1:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 20%;
}

.ratio-16-9 {
  position: relative;
  overflow: hidden;
}

.ratio-16-9:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 56.25%;
}

.ratio-4-3 {
  position: relative;
  overflow: hidden;
}

.ratio-4-3:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 75%;
}

.ratio-identity-picture {
  position: relative;
  overflow: hidden;
}

.ratio-identity-picture:before {
  content: '';
  display: block;
  height: 0;
  padding-top: 128.57142857%;
}

.fi-shadow {
  box-shadow: #333 0 0 32px;
}

.fi-shadowed-text {
  text-shadow: rgba(0, 0, 0, 0.3) 1px 1px 2px;
}

.tr-default {
  transition: all 0.2s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.tr-fast {
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.tr-slow {
  transition: all 0.4s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

.f-default {
  font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;
  font-weight: normal;
}

.f-code {
  font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
  font-weight: normal;
}

.f-helvetica-neue {
  font-family: "Helvetica Neue";
}

.m-b-smaller {
  margin-bottom: 0.85714286rem;
}

.m-t-smaller {
  margin-top: 0.85714286rem;
}

.m-l-smaller {
  margin-left: 0.85714286rem;
}

.m-r-smaller {
  margin-right: 0.85714286rem;
}

.m-s-smaller {
  margin-left: 0.85714286rem;
  margin-right: 0.85714286rem;
}

.p-smaller {
  padding: 0.85714286rem;
}

.p-b-smaller {
  padding-bottom: 0.85714286rem;
}

.p-t-smaller {
  padding-top: 0.85714286rem;
}

.p-l-smaller {
  padding-left: 0.85714286rem;
}

.p-r-smaller {
  padding-right: 0.85714286rem;
}

.p-s-smaller {
  padding-left: 0.85714286rem;
  padding-right: 0.85714286rem;
}

.m-b-small {
  margin-bottom: 1.14285714rem;
}

.m-t-small {
  margin-top: 1.14285714rem;
}

.m-l-small {
  margin-left: 1.14285714rem;
}

.m-r-small {
  margin-right: 1.14285714rem;
}

.m-s-small {
  margin-left: 1.14285714rem;
  margin-right: 1.14285714rem;
}

.p-small {
  padding: 1.14285714rem;
}

.p-b-small {
  padding-bottom: 1.14285714rem;
}

.p-t-small {
  padding-top: 1.14285714rem;
}

.p-l-small {
  padding-left: 1.14285714rem;
}

.p-r-small {
  padding-right: 1.14285714rem;
}

.p-s-small {
  padding-left: 1.14285714rem;
  padding-right: 1.14285714rem;
}

.m-b {
  margin-bottom: 1.42857143rem;
}

.m-t {
  margin-top: 1.42857143rem;
}

.m-l {
  margin-left: 1.42857143rem;
}

.m-r {
  margin-right: 1.42857143rem;
}

.m-s {
  margin-left: 1.42857143rem;
  margin-right: 1.42857143rem;
}

.p {
  padding: 1.42857143rem;
}

.p-b {
  padding-bottom: 1.42857143rem;
}

.p-t {
  padding-top: 1.42857143rem;
}

.p-l {
  padding-left: 1.42857143rem;
}

.p-r {
  padding-right: 1.42857143rem;
}

.p-s {
  padding-left: 1.42857143rem;
  padding-right: 1.42857143rem;
}

.m-b-medium {
  margin-bottom: 2.14285714rem;
}

.m-t-medium {
  margin-top: 2.14285714rem;
}

.m-l-medium {
  margin-left: 2.14285714rem;
}

.m-r-medium {
  margin-right: 2.14285714rem;
}

.m-s-medium {
  margin-left: 2.14285714rem;
  margin-right: 2.14285714rem;
}

.p-medium {
  padding: 2.14285714rem;
}

.p-b-medium {
  padding-bottom: 2.14285714rem;
}

.p-t-medium {
  padding-top: 2.14285714rem;
}

.p-l-medium {
  padding-left: 2.14285714rem;
}

.p-r-medium {
  padding-right: 2.14285714rem;
}

.p-s-medium {
  padding-left: 2.14285714rem;
  padding-right: 2.14285714rem;
}

.m-b-big {
  margin-bottom: 2.85714286rem;
}

.m-t-big {
  margin-top: 2.85714286rem;
}

.m-l-big {
  margin-left: 2.85714286rem;
}

.m-r-big {
  margin-right: 2.85714286rem;
}

.m-s-big {
  margin-left: 2.85714286rem;
  margin-right: 2.85714286rem;
}

.p-big {
  padding: 2.85714286rem;
}

.p-b-big {
  padding-bottom: 2.85714286rem;
}

.p-t-big {
  padding-top: 2.85714286rem;
}

.p-l-big {
  padding-left: 2.85714286rem;
}

.p-r-big {
  padding-right: 2.85714286rem;
}

.p-s-big {
  padding-left: 2.85714286rem;
  padding-right: 2.85714286rem;
}

.m-b-bigger {
  margin-bottom: 4.28571429rem;
}

.m-t-bigger {
  margin-top: 4.28571429rem;
}

.m-l-bigger {
  margin-left: 4.28571429rem;
}

.m-r-bigger {
  margin-right: 4.28571429rem;
}

.m-s-bigger {
  margin-left: 4.28571429rem;
  margin-right: 4.28571429rem;
}

.p-bigger {
  padding: 4.28571429rem;
}

.p-b-bigger {
  padding-bottom: 4.28571429rem;
}

.p-t-bigger {
  padding-top: 4.28571429rem;
}

.p-l-bigger {
  padding-left: 4.28571429rem;
}

.p-r-bigger {
  padding-right: 4.28571429rem;
}

.p-s-bigger {
  padding-left: 4.28571429rem;
  padding-right: 4.28571429rem;
}

.s-smaller {
  font-size: 0.6rem;
}

.s-smaller-rel {
  font-size: 0.6em;
}

.s-small {
  font-size: 0.8rem;
}

.s-small-rel {
  font-size: 0.8em;
}

.s-default {
  font-size: 1rem;
}

.s-default-rel {
  font-size: 1em;
}

.s-medium {
  font-size: 1.5rem;
}

.s-medium-rel {
  font-size: 1.5em;
}

.s-big {
  font-size: 2rem;
}

.s-big-rel {
  font-size: 2em;
}

.s-bigger {
  font-size: 3rem;
}

.s-bigger-rel {
  font-size: 3em;
}

.no-p-t {
  padding-top: 0 !important;
}

.no-p-r {
  padding-right: 0 !important;
}

.no-p-b {
  padding-bottom: 0 !important;
}

.no-p-l {
  padding-left: 0 !important;
}

.no-p-s {
  padding-left: 0 !important;
  padding-right: 0 !important;
}

.no-m-t {
  margin-top: 0 !important;
}

.no-m-r {
  margin-right: 0 !important;
}

.no-m-b {
  margin-bottom: 0 !important;
}

.no-m-l {
  margin-left: 0 !important;
}

.no-m-s {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

.c-default {
  color: #f8f8f9;
}

.bkg-default {
  background-color: #f8f8f9;
}

.c-text {
  color: #333;
}

.bkg-text {
  background-color: #333;
}

.c-link {
  color: #f2bc2b;
}

.bkg-link {
  background-color: #f2bc2b;
}

.c-primary {
  color: #f2bc2b;
}

.bkg-primary {
  background-color: #f2bc2b;
}

.c-secondary {
  color: #777;
}

.bkg-secondary {
  background-color: #777;
}

.c-success {
  color: #5cb85c;
}

.bkg-success {
  background-color: #5cb85c;
}

.c-warning {
  color: #f0ad4e;
}

.bkg-warning {
  background-color: #f0ad4e;
}

.c-error {
  color: #d9534f;
}

.bkg-error {
  background-color: #d9534f;
}

.c-info {
  color: #2199e8;
}

.bkg-info {
  background-color: #2199e8;
}

.c-lightgrey {
  color: #f8f8f9;
}

.bkg-lightgrey {
  background-color: #f8f8f9;
}

.c-lightgrey--dark {
  color: #eaeaed;
}

.bkg-lightgrey--dark {
  background-color: #eaeaed;
}

.c-lightgrey--light {
  color: white;
}

.bkg-lightgrey--light {
  background-color: white;
}

/**
 * Typography trumps classes
 */
.two-cols {
  column-count: 2;
  column-gap: 20px;
}

@media screen and (max-width: 620px) {
  .two-cols {
    column-count: 1;
  }
}

/* VENDORS
---------------------------------------*/
/**
 * Vendors packages
 */
/**
 * Hamburgers settings
 */
/*!
 * Hamburgers
 * @description Tasty CSS-animated hamburgers
 * @author Jonathan Suh @jonsuh
 * @site https://jonsuh.com/hamburgers
 * @link https://github.com/jonsuh/hamburgers
 */
.hamburger {
  padding: 0 0;
  display: inline-block;
  cursor: pointer;
  transition-property: opacity, filter;
  transition-duration: 0.15s;
  transition-timing-function: linear;
  font: inherit;
  color: inherit;
  text-transform: none;
  background-color: transparent;
  border: 0;
  margin: 0;
  overflow: visible;
}

.hamburger:hover {
  opacity: 0.7;
}

.hamburger-box {
  width: 25px;
  height: 15px;
  display: inline-block;
  position: relative;
}

.hamburger-inner {
  display: block;
  top: 50%;
  margin-top: -1.5px;
}

.hamburger-inner, .hamburger-inner::before, .hamburger-inner::after {
  width: 25px;
  height: 3px;
  background-color: #333;
  border-radius: 2px;
  position: absolute;
  transition-property: transform;
  transition-duration: 0.15s;
  transition-timing-function: ease;
}

.hamburger-inner::before, .hamburger-inner::after {
  content: "";
  display: block;
}

.hamburger-inner::before {
  top: -6px;
}

.hamburger-inner::after {
  bottom: -6px;
}

/*
   * Squeeze
   */
.hamburger--squeeze .hamburger-inner {
  transition-duration: 0.1s;
  transition-timing-function: cubic-bezier(0.55, 0.055, 0.675, 0.19);
}

.hamburger--squeeze .hamburger-inner::before {
  transition: top 0.1s 0.14s ease, opacity 0.1s ease;
}

.hamburger--squeeze .hamburger-inner::after {
  transition: bottom 0.1s 0.14s ease, transform 0.1s cubic-bezier(0.55, 0.055, 0.675, 0.19);
}

.hamburger--squeeze.is-active .hamburger-inner {
  transform: rotate(45deg);
  transition-delay: 0.14s;
  transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
}

.hamburger--squeeze.is-active .hamburger-inner::before {
  top: 0;
  opacity: 0;
  transition: top 0.1s ease, opacity 0.1s 0.14s ease;
}

.hamburger--squeeze.is-active .hamburger-inner::after {
  bottom: 0;
  transform: rotate(-90deg);
  transition: bottom 0.1s ease, transform 0.1s 0.14s cubic-bezier(0.215, 0.61, 0.355, 1);
}
